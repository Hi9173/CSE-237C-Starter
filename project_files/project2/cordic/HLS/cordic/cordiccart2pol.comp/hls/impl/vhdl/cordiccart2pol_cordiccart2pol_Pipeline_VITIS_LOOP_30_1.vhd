-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cordiccart2pol_cordiccart2pol_Pipeline_VITIS_LOOP_30_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    select_ln18 : IN STD_LOGIC_VECTOR (30 downto 0);
    y_new : IN STD_LOGIC_VECTOR (31 downto 0);
    x_new : IN STD_LOGIC_VECTOR (31 downto 0);
    current_theta_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    current_theta_2_out_ap_vld : OUT STD_LOGIC;
    x_new_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_new_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cordiccart2pol_cordiccart2pol_Pipeline_VITIS_LOOP_30_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal icmp_ln30_reg_389 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal Kvalues_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Kvalues_q0 : STD_LOGIC_VECTOR (29 downto 0);
    signal angles_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal angles_q0 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln30_fu_169_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_reg_379 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln30_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_389_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal Kvalues_load_reg_393 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal current_x_12_load_reg_398 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal current_y_14_load_reg_403 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_408 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln41_1_fu_215_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal grp_fu_134_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal mul_ln41_reg_436 : STD_LOGIC_VECTOR (60 downto 0);
    signal grp_fu_138_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal mul_ln42_reg_442 : STD_LOGIC_VECTOR (60 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i1_fu_60 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal i_fu_174_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i1_load : STD_LOGIC_VECTOR (3 downto 0);
    signal current_x_12_fu_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal current_x_fu_328_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal current_y_14_fu_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal current_y_fu_301_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_theta5_fu_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal current_theta_fu_273_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln18_cast_fu_142_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter1_stage1 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal Kvalues_ce0_local : STD_LOGIC;
    signal angles_ce0_local : STD_LOGIC;
    signal grp_fu_134_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_138_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_4_fu_197_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln41_fu_205_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln42_fu_210_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_223_p3 : STD_LOGIC_VECTOR (60 downto 0);
    signal shl_ln1_fu_230_p3 : STD_LOGIC_VECTOR (60 downto 0);
    signal zext_ln41_fu_237_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_theta_1_fu_251_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_theta_2_fu_267_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_fu_246_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal sub_ln42_fu_262_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal tmp_fu_281_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_291_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln35_fu_241_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal add_ln41_fu_257_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal tmp_2_fu_308_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_318_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cordiccart2pol_mul_30ns_32s_61_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (29 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (60 downto 0) );
    end component;


    component cordiccart2pol_cordiccart2pol_Pipeline_VITIS_LOOP_30_1_Kvalues_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component cordiccart2pol_cordiccart2pol_Pipeline_VITIS_LOOP_30_1_angles_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component cordiccart2pol_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    Kvalues_U : component cordiccart2pol_cordiccart2pol_Pipeline_VITIS_LOOP_30_1_Kvalues_ROM_AUTO_1R
    generic map (
        DataWidth => 30,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Kvalues_address0,
        ce0 => Kvalues_ce0_local,
        q0 => Kvalues_q0);

    angles_U : component cordiccart2pol_cordiccart2pol_Pipeline_VITIS_LOOP_30_1_angles_ROM_AUTO_1R
    generic map (
        DataWidth => 29,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => angles_address0,
        ce0 => angles_ce0_local,
        q0 => angles_q0);

    mul_30ns_32s_61_2_1_U1 : component cordiccart2pol_mul_30ns_32s_61_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 32,
        dout_WIDTH => 61)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_134_p0,
        din1 => sext_ln41_fu_205_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_134_p2);

    mul_30ns_32s_61_2_1_U2 : component cordiccart2pol_mul_30ns_32s_61_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 32,
        dout_WIDTH => 61)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_138_p0,
        din1 => sext_ln42_fu_210_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_138_p2);

    flow_control_loop_pipe_sequential_init_U : component cordiccart2pol_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage1) and (ap_idle_pp0_0to0 = ap_const_logic_1)))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    current_theta5_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                current_theta5_fu_72 <= select_ln18_cast_fu_142_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                current_theta5_fu_72 <= current_theta_fu_273_p3;
            end if; 
        end if;
    end process;

    current_x_12_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                current_x_12_fu_64 <= x_new;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                current_x_12_fu_64 <= current_x_fu_328_p3;
            end if; 
        end if;
    end process;

    current_y_14_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                current_y_14_fu_68 <= y_new;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                current_y_14_fu_68 <= current_y_fu_301_p3;
            end if; 
        end if;
    end process;

    i1_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then 
                    i1_fu_60 <= i_fu_174_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i1_fu_60 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                Kvalues_load_reg_393 <= Kvalues_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                current_x_12_load_reg_398 <= current_x_12_fu_64;
                current_y_14_load_reg_403 <= current_y_14_fu_68;
                tmp_4_reg_408 <= tmp_4_fu_197_p1(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln30_reg_389 <= icmp_ln30_fu_180_p2;
                icmp_ln30_reg_389_pp0_iter1_reg <= icmp_ln30_reg_389;
                mul_ln41_reg_436 <= grp_fu_134_p2;
                mul_ln42_reg_442 <= grp_fu_138_p2;
                    zext_ln30_reg_379(3 downto 0) <= zext_ln30_fu_169_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln30_reg_379(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter1_stage1, ap_idle_pp0_0to0, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage1) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    Kvalues_address0 <= zext_ln30_fu_169_p1(4 - 1 downto 0);

    Kvalues_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Kvalues_ce0_local <= ap_const_logic_1;
        else 
            Kvalues_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln36_fu_246_p2 <= std_logic_vector(unsigned(shl_ln1_fu_230_p3) + unsigned(mul_ln42_reg_442));
    add_ln41_fu_257_p2 <= std_logic_vector(unsigned(shl_ln_fu_223_p3) + unsigned(mul_ln41_reg_436));
    angles_address0 <= zext_ln30_reg_379(4 - 1 downto 0);

    angles_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            angles_ce0_local <= ap_const_logic_1;
        else 
            angles_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_enable_reg_pp0_iter0_reg, icmp_ln30_reg_389)
    begin
        if (((icmp_ln30_reg_389 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage1_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln30_reg_389_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((icmp_ln30_reg_389_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter1_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready_pp0_iter1_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_enable_reg_pp0_iter0_reg)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i1_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i1_fu_60, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i1_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i1_load <= i1_fu_60;
        end if; 
    end process;

    current_theta_1_fu_251_p2 <= std_logic_vector(unsigned(current_theta5_fu_72) - unsigned(zext_ln41_fu_237_p1));
    current_theta_2_fu_267_p2 <= std_logic_vector(unsigned(zext_ln41_fu_237_p1) + unsigned(current_theta5_fu_72));
    current_theta_2_out <= 
        current_theta_1_fu_251_p2 when (tmp_4_reg_408(0) = '1') else 
        current_theta_2_fu_267_p2;

    current_theta_2_out_ap_vld_assign_proc : process(icmp_ln30_reg_389_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((icmp_ln30_reg_389_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            current_theta_2_out_ap_vld <= ap_const_logic_1;
        else 
            current_theta_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    current_theta_fu_273_p3 <= 
        current_theta_1_fu_251_p2 when (tmp_4_reg_408(0) = '1') else 
        current_theta_2_fu_267_p2;
    current_x_fu_328_p3 <= 
        tmp_2_fu_308_p4 when (tmp_4_reg_408(0) = '1') else 
        tmp_3_fu_318_p4;
    current_y_fu_301_p3 <= 
        tmp_fu_281_p4 when (tmp_4_reg_408(0) = '1') else 
        tmp_1_fu_291_p4;
    grp_fu_134_p0 <= zext_ln41_1_fu_215_p1(30 - 1 downto 0);
    grp_fu_138_p0 <= zext_ln41_1_fu_215_p1(30 - 1 downto 0);
    i_fu_174_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i1_load) + unsigned(ap_const_lv4_1));
    icmp_ln30_fu_180_p2 <= "1" when (ap_sig_allocacmp_i1_load = ap_const_lv4_F) else "0";
        select_ln18_cast_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln18),32));

    sext_ln41_fu_205_p0 <= current_y_14_fu_68;
    sext_ln42_fu_210_p0 <= current_x_12_fu_64;
    shl_ln1_fu_230_p3 <= (current_y_14_load_reg_403 & ap_const_lv29_0);
    shl_ln_fu_223_p3 <= (current_x_12_load_reg_398 & ap_const_lv29_0);
    sub_ln35_fu_241_p2 <= std_logic_vector(unsigned(shl_ln_fu_223_p3) - unsigned(mul_ln41_reg_436));
    sub_ln42_fu_262_p2 <= std_logic_vector(unsigned(shl_ln1_fu_230_p3) - unsigned(mul_ln42_reg_442));
    tmp_1_fu_291_p4 <= sub_ln42_fu_262_p2(60 downto 29);
    tmp_2_fu_308_p4 <= sub_ln35_fu_241_p2(60 downto 29);
    tmp_3_fu_318_p4 <= add_ln41_fu_257_p2(60 downto 29);
    tmp_4_fu_197_p1 <= current_y_14_fu_68;
    tmp_fu_281_p4 <= add_ln36_fu_246_p2(60 downto 29);
    x_new_1_out <= 
        tmp_2_fu_308_p4 when (tmp_4_reg_408(0) = '1') else 
        tmp_3_fu_318_p4;

    x_new_1_out_ap_vld_assign_proc : process(icmp_ln30_reg_389_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((icmp_ln30_reg_389_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            x_new_1_out_ap_vld <= ap_const_logic_1;
        else 
            x_new_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln30_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i1_load),64));
    zext_ln41_1_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kvalues_load_reg_393),61));
    zext_ln41_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(angles_q0),32));
end behav;
