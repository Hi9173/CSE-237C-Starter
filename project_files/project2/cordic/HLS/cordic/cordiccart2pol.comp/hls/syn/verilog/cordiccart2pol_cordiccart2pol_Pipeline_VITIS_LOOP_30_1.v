// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module cordiccart2pol_cordiccart2pol_Pipeline_VITIS_LOOP_30_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        select_ln18,
        y_new,
        x_new,
        current_theta_2_out,
        current_theta_2_out_ap_vld,
        x_new_1_out,
        x_new_1_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [30:0] select_ln18;
input  [31:0] y_new;
input  [31:0] x_new;
output  [31:0] current_theta_2_out;
output   current_theta_2_out_ap_vld;
output  [31:0] x_new_1_out;
output   x_new_1_out_ap_vld;

reg ap_idle;
reg current_theta_2_out_ap_vld;
reg x_new_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [0:0] icmp_ln30_reg_389;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] Kvalues_address0;
wire   [29:0] Kvalues_q0;
wire   [3:0] angles_address0;
wire   [28:0] angles_q0;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln30_fu_169_p1;
reg   [63:0] zext_ln30_reg_379;
wire   [0:0] icmp_ln30_fu_180_p2;
reg   [0:0] icmp_ln30_reg_389_pp0_iter1_reg;
reg   [29:0] Kvalues_load_reg_393;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_11001;
reg  signed [31:0] current_x_12_load_reg_398;
wire    ap_block_pp0_stage2_11001;
reg  signed [31:0] current_y_14_load_reg_403;
reg   [0:0] tmp_4_reg_408;
wire   [60:0] zext_ln41_1_fu_215_p1;
wire   [60:0] grp_fu_134_p2;
reg   [60:0] mul_ln41_reg_436;
wire   [60:0] grp_fu_138_p2;
reg   [60:0] mul_ln42_reg_442;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage0;
reg   [3:0] i1_fu_60;
wire   [3:0] i_fu_174_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i1_load;
reg   [31:0] current_x_12_fu_64;
wire   [31:0] current_x_fu_328_p3;
wire    ap_block_pp0_stage2;
reg   [31:0] current_y_14_fu_68;
wire   [31:0] current_y_fu_301_p3;
reg   [31:0] current_theta5_fu_72;
wire   [31:0] current_theta_fu_273_p3;
wire  signed [31:0] select_ln18_cast_fu_142_p1;
wire    ap_block_pp0_stage1;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter1_stage1;
reg    ap_idle_pp0_0to0;
wire    ap_block_pp0_stage1_01001;
reg    Kvalues_ce0_local;
reg    angles_ce0_local;
wire   [29:0] grp_fu_134_p0;
wire   [29:0] grp_fu_138_p0;
wire  signed [31:0] tmp_4_fu_197_p1;
wire  signed [31:0] sext_ln41_fu_205_p0;
wire  signed [31:0] sext_ln42_fu_210_p0;
wire   [60:0] shl_ln_fu_223_p3;
wire   [60:0] shl_ln1_fu_230_p3;
wire   [31:0] zext_ln41_fu_237_p1;
wire   [31:0] current_theta_1_fu_251_p2;
wire   [31:0] current_theta_2_fu_267_p2;
wire   [60:0] add_ln36_fu_246_p2;
wire   [60:0] sub_ln42_fu_262_p2;
wire   [31:0] tmp_fu_281_p4;
wire   [31:0] tmp_1_fu_291_p4;
wire   [60:0] sub_ln35_fu_241_p2;
wire   [60:0] add_ln41_fu_257_p2;
wire   [31:0] tmp_2_fu_308_p4;
wire   [31:0] tmp_3_fu_318_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 i1_fu_60 = 4'd0;
#0 current_x_12_fu_64 = 32'd0;
#0 current_y_14_fu_68 = 32'd0;
#0 current_theta5_fu_72 = 32'd0;
#0 ap_done_reg = 1'b0;
end

cordiccart2pol_cordiccart2pol_Pipeline_VITIS_LOOP_30_1_Kvalues_ROM_AUTO_1R #(
    .DataWidth( 30 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
Kvalues_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Kvalues_address0),
    .ce0(Kvalues_ce0_local),
    .q0(Kvalues_q0)
);

cordiccart2pol_cordiccart2pol_Pipeline_VITIS_LOOP_30_1_angles_ROM_AUTO_1R #(
    .DataWidth( 29 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
angles_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(angles_address0),
    .ce0(angles_ce0_local),
    .q0(angles_q0)
);

cordiccart2pol_mul_30ns_32s_61_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 30 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 61 ))
mul_30ns_32s_61_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_134_p0),
    .din1(sext_ln41_fu_205_p0),
    .ce(1'b1),
    .dout(grp_fu_134_p2)
);

cordiccart2pol_mul_30ns_32s_61_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 30 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 61 ))
mul_30ns_32s_61_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_138_p0),
    .din1(sext_ln42_fu_210_p0),
    .ce(1'b1),
    .dout(grp_fu_138_p2)
);

cordiccart2pol_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b1 == ap_condition_exit_pp0_iter1_stage1) & (ap_idle_pp0_0to0 == 1'b1)))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        current_theta5_fu_72 <= select_ln18_cast_fu_142_p1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        current_theta5_fu_72 <= current_theta_fu_273_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        current_x_12_fu_64 <= x_new;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        current_x_12_fu_64 <= current_x_fu_328_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        current_y_14_fu_68 <= y_new;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        current_y_14_fu_68 <= current_y_fu_301_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
            i1_fu_60 <= i_fu_174_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i1_fu_60 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        Kvalues_load_reg_393 <= Kvalues_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        current_x_12_load_reg_398 <= current_x_12_fu_64;
        current_y_14_load_reg_403 <= current_y_14_fu_68;
        tmp_4_reg_408 <= tmp_4_fu_197_p1[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln30_reg_389 <= icmp_ln30_fu_180_p2;
        icmp_ln30_reg_389_pp0_iter1_reg <= icmp_ln30_reg_389;
        mul_ln41_reg_436 <= grp_fu_134_p2;
        mul_ln42_reg_442 <= grp_fu_138_p2;
        zext_ln30_reg_379[3 : 0] <= zext_ln30_fu_169_p1[3 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Kvalues_ce0_local = 1'b1;
    end else begin
        Kvalues_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        angles_ce0_local = 1'b1;
    end else begin
        angles_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln30_reg_389 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln30_reg_389_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter1_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i1_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i1_load = i1_fu_60;
    end
end

always @ (*) begin
    if (((icmp_ln30_reg_389_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        current_theta_2_out_ap_vld = 1'b1;
    end else begin
        current_theta_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln30_reg_389_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        x_new_1_out_ap_vld = 1'b1;
    end else begin
        x_new_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((1'b1 == ap_condition_exit_pp0_iter1_stage1) & (ap_idle_pp0_0to0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Kvalues_address0 = zext_ln30_fu_169_p1;

assign add_ln36_fu_246_p2 = (shl_ln1_fu_230_p3 + mul_ln42_reg_442);

assign add_ln41_fu_257_p2 = (shl_ln_fu_223_p3 + mul_ln41_reg_436);

assign angles_address0 = zext_ln30_reg_379;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign ap_ready = ap_ready_sig;

assign current_theta_1_fu_251_p2 = (current_theta5_fu_72 - zext_ln41_fu_237_p1);

assign current_theta_2_fu_267_p2 = (zext_ln41_fu_237_p1 + current_theta5_fu_72);

assign current_theta_2_out = ((tmp_4_reg_408[0:0] == 1'b1) ? current_theta_1_fu_251_p2 : current_theta_2_fu_267_p2);

assign current_theta_fu_273_p3 = ((tmp_4_reg_408[0:0] == 1'b1) ? current_theta_1_fu_251_p2 : current_theta_2_fu_267_p2);

assign current_x_fu_328_p3 = ((tmp_4_reg_408[0:0] == 1'b1) ? tmp_2_fu_308_p4 : tmp_3_fu_318_p4);

assign current_y_fu_301_p3 = ((tmp_4_reg_408[0:0] == 1'b1) ? tmp_fu_281_p4 : tmp_1_fu_291_p4);

assign grp_fu_134_p0 = zext_ln41_1_fu_215_p1;

assign grp_fu_138_p0 = zext_ln41_1_fu_215_p1;

assign i_fu_174_p2 = (ap_sig_allocacmp_i1_load + 4'd1);

assign icmp_ln30_fu_180_p2 = ((ap_sig_allocacmp_i1_load == 4'd15) ? 1'b1 : 1'b0);

assign select_ln18_cast_fu_142_p1 = $signed(select_ln18);

assign sext_ln41_fu_205_p0 = current_y_14_fu_68;

assign sext_ln42_fu_210_p0 = current_x_12_fu_64;

assign shl_ln1_fu_230_p3 = {{current_y_14_load_reg_403}, {29'd0}};

assign shl_ln_fu_223_p3 = {{current_x_12_load_reg_398}, {29'd0}};

assign sub_ln35_fu_241_p2 = (shl_ln_fu_223_p3 - mul_ln41_reg_436);

assign sub_ln42_fu_262_p2 = (shl_ln1_fu_230_p3 - mul_ln42_reg_442);

assign tmp_1_fu_291_p4 = {{sub_ln42_fu_262_p2[60:29]}};

assign tmp_2_fu_308_p4 = {{sub_ln35_fu_241_p2[60:29]}};

assign tmp_3_fu_318_p4 = {{add_ln41_fu_257_p2[60:29]}};

assign tmp_4_fu_197_p1 = current_y_14_fu_68;

assign tmp_fu_281_p4 = {{add_ln36_fu_246_p2[60:29]}};

assign x_new_1_out = ((tmp_4_reg_408[0:0] == 1'b1) ? tmp_2_fu_308_p4 : tmp_3_fu_318_p4);

assign zext_ln30_fu_169_p1 = ap_sig_allocacmp_i1_load;

assign zext_ln41_1_fu_215_p1 = Kvalues_load_reg_393;

assign zext_ln41_fu_237_p1 = angles_q0;

always @ (posedge ap_clk) begin
    zext_ln30_reg_379[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //cordiccart2pol_cordiccart2pol_Pipeline_VITIS_LOOP_30_1
