// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cordiccart2pol_cordiccart2pol,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.225000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=13,HLS_SYN_DSP=0,HLS_SYN_FF=2,HLS_SYN_LUT=48,HLS_VERSION=2024_2}" *)

module cordiccart2pol (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        y,
        r,
        r_ap_vld,
        theta,
        theta_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] x;
input  [6:0] y;
output  [6:0] r;
output   r_ap_vld;
output  [6:0] theta;
output   theta_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg r_ap_vld;
reg theta_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] my_LUT_r_address0;
wire   [5:0] my_LUT_r_q0;
wire   [13:0] my_LUT_th_address0;
wire   [6:0] my_LUT_th_q0;
wire   [63:0] zext_ln26_fu_259_p1;
wire    ap_CS_fsm_state2;
reg    my_LUT_r_ce0_local;
reg    my_LUT_th_ce0_local;
wire   [0:0] tmp_fu_103_p3;
wire   [0:0] tmp_1_fu_117_p3;
wire   [0:0] xor_ln11_fu_125_p2;
wire   [0:0] and_ln11_fu_131_p2;
wire   [4:0] trunc_ln11_fu_149_p1;
wire   [0:0] and_ln11_1_fu_137_p2;
wire   [0:0] or_ln11_fu_143_p2;
wire   [0:0] xor_ln11_1_fu_163_p2;
wire   [6:0] fixed_x_1_fu_153_p4;
wire   [6:0] fixed_x_fu_111_p2;
wire   [0:0] tmp_2_fu_177_p3;
wire   [0:0] tmp_3_fu_191_p3;
wire   [0:0] xor_ln12_fu_199_p2;
wire   [0:0] and_ln12_fu_205_p2;
wire   [4:0] trunc_ln12_fu_223_p1;
wire   [0:0] and_ln12_1_fu_211_p2;
wire   [0:0] or_ln12_fu_217_p2;
wire   [0:0] xor_ln12_1_fu_237_p2;
wire   [6:0] fixed_y_1_fu_227_p4;
wire   [6:0] fixed_y_fu_185_p2;
wire   [6:0] fixed_x_2_fu_169_p3;
wire   [6:0] fixed_y_2_fu_243_p3;
wire   [13:0] index_fu_251_p3;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

cordiccart2pol_my_LUT_r_ROM_AUTO_1R #(
    .DataWidth( 6 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
my_LUT_r_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(my_LUT_r_address0),
    .ce0(my_LUT_r_ce0_local),
    .q0(my_LUT_r_q0)
);

cordiccart2pol_my_LUT_th_ROM_AUTO_1R #(
    .DataWidth( 7 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
my_LUT_th_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(my_LUT_th_address0),
    .ce0(my_LUT_th_ce0_local),
    .q0(my_LUT_th_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        my_LUT_r_ce0_local = 1'b1;
    end else begin
        my_LUT_r_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        my_LUT_th_ce0_local = 1'b1;
    end else begin
        my_LUT_th_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_ap_vld = 1'b1;
    end else begin
        r_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        theta_ap_vld = 1'b1;
    end else begin
        theta_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln11_1_fu_137_p2 = (tmp_fu_103_p3 & tmp_1_fu_117_p3);

assign and_ln11_fu_131_p2 = (xor_ln11_fu_125_p2 & tmp_1_fu_117_p3);

assign and_ln12_1_fu_211_p2 = (tmp_3_fu_191_p3 & tmp_2_fu_177_p3);

assign and_ln12_fu_205_p2 = (xor_ln12_fu_199_p2 & tmp_3_fu_191_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign fixed_x_1_fu_153_p4 = {{{tmp_fu_103_p3}, {trunc_ln11_fu_149_p1}}, {1'd0}};

assign fixed_x_2_fu_169_p3 = ((xor_ln11_1_fu_163_p2[0:0] == 1'b1) ? fixed_x_1_fu_153_p4 : fixed_x_fu_111_p2);

assign fixed_x_fu_111_p2 = x << 7'd1;

assign fixed_y_1_fu_227_p4 = {{{tmp_2_fu_177_p3}, {trunc_ln12_fu_223_p1}}, {1'd0}};

assign fixed_y_2_fu_243_p3 = ((xor_ln12_1_fu_237_p2[0:0] == 1'b1) ? fixed_y_1_fu_227_p4 : fixed_y_fu_185_p2);

assign fixed_y_fu_185_p2 = y << 7'd1;

assign index_fu_251_p3 = {{fixed_x_2_fu_169_p3}, {fixed_y_2_fu_243_p3}};

assign my_LUT_r_address0 = zext_ln26_fu_259_p1;

assign my_LUT_th_address0 = zext_ln26_fu_259_p1;

assign or_ln11_fu_143_p2 = (tmp_fu_103_p3 | and_ln11_fu_131_p2);

assign or_ln12_fu_217_p2 = (tmp_2_fu_177_p3 | and_ln12_fu_205_p2);

assign r = my_LUT_r_q0;

assign theta = my_LUT_th_q0;

assign tmp_1_fu_117_p3 = x[32'd5];

assign tmp_2_fu_177_p3 = y[32'd6];

assign tmp_3_fu_191_p3 = y[32'd5];

assign tmp_fu_103_p3 = x[32'd6];

assign trunc_ln11_fu_149_p1 = x[4:0];

assign trunc_ln12_fu_223_p1 = y[4:0];

assign xor_ln11_1_fu_163_p2 = (or_ln11_fu_143_p2 ^ and_ln11_1_fu_137_p2);

assign xor_ln11_fu_125_p2 = (tmp_fu_103_p3 ^ 1'd1);

assign xor_ln12_1_fu_237_p2 = (or_ln12_fu_217_p2 ^ and_ln12_1_fu_211_p2);

assign xor_ln12_fu_199_p2 = (tmp_2_fu_177_p3 ^ 1'd1);

assign zext_ln26_fu_259_p1 = index_fu_251_p3;

endmodule //cordiccart2pol
