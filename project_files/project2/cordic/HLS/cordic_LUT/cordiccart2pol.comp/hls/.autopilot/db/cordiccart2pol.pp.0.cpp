# 1 "cordiccart2pol.cpp"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 376 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/autopilot_ssdm_op.h" 1
# 105 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/autopilot_ssdm_op.h"
extern "C" {






    void _ssdm_op_IfRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_IfWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_StreamRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_StreamWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned _ssdm_StreamSize(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_ReadReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Read(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_WriteReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Write(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_NbReadReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_CanReadReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_NbWriteReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_CanWriteReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));




    void _ssdm_op_MemShiftRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_PrintNone(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_PrintInt(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_PrintDouble(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_Wait(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Poll(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_Return(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_op_SpecSynModule(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecTopModule(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProcessDecl(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProcessDef(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPort(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecConnection(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecChannel(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecSensitive(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecModuleInst(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPortMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecReset(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPlatform(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecClockDomain(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPowerDomain(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    int _ssdm_op_SpecRegionBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    int _ssdm_op_SpecRegionEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecLoopName(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecLoopTripCount(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    int _ssdm_op_SpecStateBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    int _ssdm_op_SpecStateEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecInterface(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPipeline(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecDataflowPipeline(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_op_SpecLatency(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecParallel(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProtocol(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecOccurrence(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecResource(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecResourceLimit(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecCHCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecFUCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecIFCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecIPCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecMemCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecExt(...) __attribute__ ((nothrow)) __attribute__((overloadable));




    void _ssdm_SpecArrayDimSize(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_RegionBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_RegionEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_InlineAll(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineLoop(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_Inline(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineSelf(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineRegion(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecArrayMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecArrayPartition(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecArrayReshape(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecStream(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecStable(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecStableContent(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecBindPort(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPipoDepth(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecExpr(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecExprBalance(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecDependence(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecLoopMerge(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecLoopFlatten(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecLoopRewind(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecFuncInstantiation(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecFuncBuffer(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecFuncExtract(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecConstant(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_DataPack(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecDataPack(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecBitsMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecLicense(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void __xilinx_ip_top(...) __attribute__ ((nothrow)) __attribute__((overloadable));


}
# 2 "<built-in>" 2
# 1 "cordiccart2pol.cpp" 2
# 1 "./cordiccart2pol.h" 1



# 1 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/ap_fixed.h" 1








# 1 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_common.h" 1
# 41 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_common.h"
# 1 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_decl.h" 1
# 54 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_decl.h"
enum ap_q_mode {
  AP_RND,
  AP_RND_ZERO,
  AP_RND_MIN_INF,
  AP_RND_INF,
  AP_RND_CONV,
  AP_TRN,
  AP_TRN_ZERO,
};
# 76 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_decl.h"
enum ap_o_mode {
  AP_SAT,
  AP_SAT_ZERO,
  AP_SAT_SYM,
  AP_WRAP,
  AP_WRAP_SM,
};
# 133 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_decl.h"
template <int _AP_W, bool _AP_S>
struct ap_int_base;

template <int _AP_W>
struct ap_int;

template <int _AP_W>
struct ap_uint;

template <int _AP_W, bool _AP_S>
struct ap_range_ref;

template <int _AP_W, bool _AP_S>
struct ap_bit_ref;

template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref;

template <int _AP_W, int _AP_I, bool _AP_S = true, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed_base;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_ufixed;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref;


enum BaseMode { AP_BIN = 2, AP_OCT = 8, AP_DEC = 10, AP_HEX = 16 };
# 187 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_decl.h"
typedef signed long long ap_slong;
typedef unsigned long long ap_ulong;


enum {
  _AP_SIZE_char = 8,
  _AP_SIZE_short = sizeof(short) * 8,
  _AP_SIZE_int = sizeof(int) * 8,
  _AP_SIZE_long = sizeof(long) * 8,
  _AP_SIZE_ap_slong = sizeof(ap_slong) * 8
};
# 42 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_common.h" 2
# 164 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_common.h"
enum { CHAR_IS_SIGNED = (char)-1 < 0 };


namespace _ap_type {
template <typename _Tp>
struct is_signed {
  static const bool value = _Tp(-1) < _Tp(1);
};

template <typename _Tp>
struct is_integral {
  static const bool value = false;
};





template <> struct is_integral<bool> { static const bool value = true; };
template <> struct is_integral<char> { static const bool value = true; };
template <> struct is_integral<signed char> { static const bool value = true; };
template <> struct is_integral<unsigned char> { static const bool value = true; };
template <> struct is_integral<short> { static const bool value = true; };
template <> struct is_integral<unsigned short> { static const bool value = true; };
template <> struct is_integral<int> { static const bool value = true; };
template <> struct is_integral<unsigned int> { static const bool value = true; };
template <> struct is_integral<long> { static const bool value = true; };
template <> struct is_integral<unsigned long> { static const bool value = true; };
template <> struct is_integral<ap_slong> { static const bool value = true; };
template <> struct is_integral<ap_ulong> { static const bool value = true; };


template <bool, typename _Tp = void>
struct enable_if {};

template <typename _Tp>
struct enable_if<true, _Tp> {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const<_Tp const> {
  typedef _Tp type;
};
}
# 507 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_common.h"
template <int _AP_N, bool _AP_S>
struct ssdm_int;

template <int _AP_N>
struct ssdm_int<_AP_N, true> {
  typedef int __attribute__((bitwidth(_AP_N))) DataType;
  int V __attribute__((bitwidth(_AP_N)));
  inline __attribute__((always_inline)) ssdm_int<_AP_N, true>() = default;
                inline __attribute__((always_inline)) ssdm_int<_AP_N, true>(int o __attribute__((bitwidth(_AP_N)))):V(o){};
};

template <int _AP_N>
struct ssdm_int<_AP_N, false> {
  typedef unsigned __attribute__((bitwidth(_AP_N))) DataType;
  unsigned V __attribute__((bitwidth(_AP_N)));
  inline __attribute__((always_inline)) ssdm_int<_AP_N, false>() = default;
                inline __attribute__((always_inline)) ssdm_int<_AP_N, false>(unsigned o __attribute__((bitwidth(_AP_N)))):V(o){};
};
# 575 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_common.h"
# 1 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/autopilot_ssdm_bits.h" 1
# 576 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_common.h" 2

extern "C" void _ssdm_string2bits(...);
# 587 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_common.h"
static inline unsigned char guess_radix(const char* s) {
  unsigned char rd = 10;
  const char* p = s;

  if (p[0] == '-' || p[0] == '+') ++p;

  if (p[0] == '0') {
    if (p[1] == 'b' || p[1] == 'B') {
      rd = 2;
    } else if (p[1] == 'o' || p[1] == 'O') {
      rd = 8;
    } else if (p[1] == 'x' || p[1] == 'X') {
      rd = 16;
    } else if (p[1] == 'd' || p[1] == 'D') {
      rd = 10;
    }
  }
  return rd;
}







typedef __fp16 half;
# 710 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_common.h"
inline __attribute__((always_inline)) ap_ulong doubleToRawBits(double pf) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned int floatToRawBits(float pf) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned short halfToRawBits(half pf) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__D = pf;
  return LD.__L;



}


inline __attribute__((always_inline)) double rawBitsToDouble(ap_ulong pi) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) float rawBitsToFloat(unsigned long pi) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) half rawBitsToHalf(unsigned short pi) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__L = pi;
  return LD.__D;






}
# 10 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/ap_fixed.h" 2
# 1 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_base.h" 1
# 16 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_base.h"
# 1 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/ap_int.h" 1
# 11 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/ap_int.h"
# 1 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h" 1
# 56 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_N, bool _AP_S>
struct retval;


template <int _AP_N>
struct retval<_AP_N, true> {
  typedef ap_slong Type;
};

template <int _AP_N>
struct retval<_AP_N, false> {
  typedef ap_ulong Type;
};


template <>
struct retval<1, true> {
  typedef signed char Type;
};

template <>
struct retval<1, false> {
  typedef unsigned char Type;
};


template <>
struct retval<2, true> {
  typedef short Type;
};

template <>
struct retval<2, false> {
  typedef unsigned short Type;
};


template <>
struct retval<3, true> {
  typedef long Type;
};

template <>
struct retval<3, false> {
  typedef unsigned long Type;
};

template <>
struct retval<4, true> {
  typedef long Type;
};

template <>
struct retval<4, false> {
  typedef unsigned long Type;
};




template <int _AP_W2, bool _AP_S2>
struct _ap_int_factory;
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,true> { typedef ap_int<_AP_W2> type; };
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,false> { typedef ap_uint<_AP_W2> type; };

template <int _AP_W, bool _AP_S>
struct ap_int_base : public ssdm_int<_AP_W, _AP_S> {
 static_assert(_AP_W > 0, "ap_int_base bitwidth must be positive");

 private:
                inline __attribute__((always_inline)) __attribute__((nodebug)) int countLeadingOnes() const {




    return 0;

  }

 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;







  typedef typename retval<(((_AP_W + 7) / 8) > (8) ? ((_AP_W + 7) / 8) : (8)), _AP_S>::Type RetType;

  static const int width = _AP_W;
  static const bool sign_flag = _AP_S;

  template <int _AP_W2, bool _AP_S2>
  struct RType {
    enum {
      mult_w = _AP_W + _AP_W2,
      mult_s = _AP_S || _AP_S2,
      plus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,
      div_w = _AP_W + _AP_S2,
      div_s = _AP_S || _AP_S2,
      mod_w = ((_AP_W) < (_AP_W2 + (!_AP_S2 && _AP_S)) ? (_AP_W) : (_AP_W2 + (!_AP_S2 && _AP_S))),
      mod_s = _AP_S,
      logic_w = ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };


    typedef ap_int_base<mult_w, mult_s> mult_base;
    typedef ap_int_base<plus_w, plus_s> plus_base;
    typedef ap_int_base<minus_w, minus_s> minus_base;
    typedef ap_int_base<logic_w, logic_s> logic_base;
    typedef ap_int_base<div_w, div_s> div_base;
    typedef ap_int_base<mod_w, mod_s> mod_base;
    typedef ap_int_base<_AP_W, _AP_S> arg1_base;

    typedef typename _ap_int_factory<mult_w, mult_s>::type mult;
    typedef typename _ap_int_factory<plus_w, plus_s>::type plus;
    typedef typename _ap_int_factory<minus_w, minus_s>::type minus;
    typedef typename _ap_int_factory<logic_w, logic_s>::type logic;
    typedef typename _ap_int_factory<div_w, div_s>::type div;
    typedef typename _ap_int_factory<mod_w, mod_s>::type mod;
    typedef typename _ap_int_factory<_AP_W, _AP_S>::type arg1;
    typedef bool reduce;
  };





  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base() = default;


  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const ap_int_base<_AP_W2, _AP_S2>& op):Base(op.V) {
    Base::V = op.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }
# 220 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const bool op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const char op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const signed char op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const unsigned char op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const short op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const unsigned short op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const int op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const unsigned int op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const long op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const unsigned long op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const ap_slong op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const ap_ulong op):Base(op) { Base::V = op; }




  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(half op) {
    ap_int_base<_AP_W, _AP_S> t((float)op);
    Base::V = t.V;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(float op) {
    const int BITS = 23 + 8 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = floatToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<8 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 23, BITS - 2); __Result__; });
    exp = exp - ((1 << (8 - 1)) - 1);

    ap_int_base<23 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 23 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23); __Result__; });


    if ((reg.V & 0x7ffffffful) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 23 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 23 + 2) {
          ap_int_base<23 + 2, true> man_shift;
          man_shift.V = (man.V >> sh_amt);






          Base::V = man_shift.V;
        } else {



            Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {



          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(double op) {
    const int BITS = 52 + 11 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = doubleToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<11 + 1, true> exp, bias = ((1 << (11 - 1)) - 1);
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, BITS - 2); __Result__; });
    exp = exp - bias;

    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });


    if ((reg.V & 0x7fffffffffffffffull) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 52 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 52 + 2) {
          ap_int_base<23 + 2, true> man_shift;
          man_shift.V = (man.V >> sh_amt);






          Base::V = man_shift.V;
        } else {



           Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {



          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    op.checkOverflowCsimFix(_AP_W, _AP_S);
    Base::V = op.to_ap_int_base().V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const ap_range_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = (ref.get()).V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const ap_bit_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = ref.operator bool();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref) {
    const ap_int_base<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>::_AP_WR,
                      false>
        tmp = ref.get();
    Base::V = tmp.V;
  }
# 399 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = (val.get()).V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = val.operator bool();
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base read() volatile {

    ap_int_base ret;
    ret.V = Base::V;
    return ret;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void write(const ap_int_base<_AP_W, _AP_S>& op2) volatile {

    *((volatile typename Base::DataType *)(&(Base::V))) = op2.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    *((volatile typename Base::DataType *)(&(Base::V))) = op2.V;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(
      const volatile ap_int_base<_AP_W, _AP_S>& op2) volatile {
    *((volatile typename Base::DataType *)(&(Base::V))) = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    *((volatile typename Base::DataType *)(&(Base::V))) = op2.V;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(const ap_int_base<_AP_W, _AP_S>& op2) volatile {
    *((volatile typename Base::DataType *)(&(Base::V))) = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(const volatile ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }


  ap_int_base& operator=(const ap_int_base<_AP_W, _AP_S>& op2) = default;
# 493 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(bool op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(signed char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(unsigned char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(unsigned short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(unsigned int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(unsigned long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(ap_slong op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(ap_ulong op) { Base::V = op; return *this; }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (bool)op2;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (ap_int_base<_AP_W2, false>(op2)).V;
    return *this;
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op2) {
    Base::V = op2.get().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = (bool)op;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = ((const ap_int_base<_AP_W2, false>)(op)).V;
    return *this;
  }





                inline __attribute__((always_inline)) __attribute__((nodebug)) operator RetType() const { return (RetType)(Base::V); }




                inline __attribute__((always_inline)) __attribute__((nodebug)) bool to_bool() const { return (bool)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) char to_char() const { return (char)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) signed char to_schar() const { return (signed char)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned char to_uchar() const { return (unsigned char)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) short to_short() const { return (short)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned short to_ushort() const { return (unsigned short)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) int to_int() const { return (int)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned to_uint() const { return (unsigned)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) long to_long() const { return (long)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned long to_ulong() const { return (unsigned long)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_slong to_int64() const { return (ap_slong)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ulong to_uint64() const { return (ap_ulong)(Base::V); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) half to_half() const { return (float)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) float to_float() const { return (float)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) double to_double() const { return (double)(Base::V); }
# 598 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const volatile { return _AP_W; }
                inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const { return _AP_W; }


                inline __attribute__((always_inline)) __attribute__((nodebug)) bool iszero() const { return Base::V == 0; }


                inline __attribute__((always_inline)) __attribute__((nodebug)) bool is_zero() const { return Base::V == 0; }


                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool sign() const {
    if (_AP_S &&
        ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }))
      return true;
    else
      return false;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void clear(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void invert(int i) {
                                                           ;
    bool val = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    if (val)
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
    else
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool test(int i) const {
                                                           ;
    return ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& get() { return *this; }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void set(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void set(int i, bool v) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& lrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << n;
    typeof(Base::V) r_p = Base::V >> (_AP_W - n);
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& rrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << (_AP_W - n);
    typeof(Base::V) r_p = Base::V >> n;
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& reverse() {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
    return *this;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void set_bit(int i, bool v) {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) bool get_bit(int i) const {
    return (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void b_not() { Base::V = ~Base::V; }

  template<typename T>
                inline __attribute__((always_inline)) __attribute__((nodebug)) void checkOverflowBaseC(T val) {
# 769 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
    (void)val;

    return;
  }

                inline __attribute__((always_inline)) __attribute__((nodebug)) bool checkOverflowCsim(int _ap_w2, bool _ap_s2,
          bool print = true) const {
# 819 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
      (void)_ap_w2;
      (void)_ap_s2;
      (void)print;

      return 0;
  }
# 853 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator *=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V *= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator +=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V += op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator -=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V -= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator /=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V /= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator %=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V %= op2.V; return *this; }
# 871 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator &=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V &= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator |=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V |= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator ^=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V ^= op2.V; return *this; }





  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator++() {
    operator+=((ap_int_base<1, false>)1);
    return *this;
  }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator--() {
    operator-=((ap_int_base<1, false>)1);
    return *this;
  }




  inline __attribute__((always_inline)) __attribute__((nodebug)) const typename RType<_AP_W,_AP_S>::arg1 operator++(int) {
    ap_int_base t = *this;
    operator+=((ap_int_base<1, false>)1);
    return t;
  }
  inline __attribute__((always_inline)) __attribute__((nodebug)) const typename RType<_AP_W,_AP_S>::arg1 operator--(int) {
    ap_int_base t = *this;
    operator-=((ap_int_base<1, false>)1);
    return t;
  }




                inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W,_AP_S>::arg1 operator+() const { return *this; }


                inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<1, false>::minus operator-() const {
    return ap_int_base<1, false>(0) - *this;
  }




                inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!() const { return Base::V == 0; }





                inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W,_AP_S>::arg1 operator~() const {
    ap_int_base<_AP_W, _AP_S> r(0);
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>(sh);
    } else
      return operator<<(sh);
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r(0);
    r.V = Base::V << op2.to_uint();
    return r;
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<(sh);
    }
    return operator>>(sh);
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r(0);
    r.V = Base::V >> op2.to_uint();
    return r;
  }
# 982 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>=(sh);
    } else
      return operator<<=(sh);
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V <<= op2.to_uint();
    return *this;
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<=(sh);
    }
    return operator>>=(sh);
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V >>= op2.to_uint();
    return *this;
  }
# 1031 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator==(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V == op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return !(Base::V == op2.V);
  }
  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V < op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V >= op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V > op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V <= op2.V;
  }




  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(const_cast<ap_int_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }
# 1140 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W, _AP_S> operator[](int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W, _AP_S> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator[](int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator[](const ap_int_base<_AP_W2, _AP_S2>& index) const {
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index.to_int());
    return br.to_bool();
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W, _AP_S> bit(int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W, _AP_S> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool bit(int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool bit(const ap_int_base<_AP_W2, _AP_S2>& index) const {
    return bit(index.to_int());
  }
# 1207 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
                inline __attribute__((always_inline)) __attribute__((nodebug)) int countLeadingZeros() const {

    return __fpga_ctlz(this->V);



  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(const ap_int_base<_AP_W2, _AP_S2>& a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(ap_int_base<_AP_W2, _AP_S2>& a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this), a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator&(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this & a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator|(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this | a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator^(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this ^ a2.get();
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) void set(const ap_int_base<_AP_W3, false>& val) {
    Base::V = val.V;
  }





  inline __attribute__((always_inline)) __attribute__((nodebug)) bool and_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_and_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool nand_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_nand_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool or_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool nor_reduce() const { return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); })); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool xor_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool xnor_reduce() const {
    return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }));
  }
# 1416 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) char* to_string(signed char rd = 2, bool sign = _AP_S) const {
    (void)(rd);
    (void)(sign);
    return 0;
  }

};
# 1477 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mult_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mult_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mult_base ret(0); ret.V = lhs.V * rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::plus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::plus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::plus_base ret(0); ret.V = lhs.V + rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::minus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::minus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::minus_base ret(0); ret.V = lhs.V - rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base ret(0); ret.V = lhs.V & rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base ret(0); ret.V = lhs.V | rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base ret(0); ret.V = lhs.V ^ rhs.V; return ret; }
# 1496 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::div_base ret(0); ret.V = op.V / op2.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mod_base ret(0); ret.V = op.V % op2.V; return ret; }
# 1524 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) PTR_TYPE* operator +(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op + op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) PTR_TYPE* operator +(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 + i_op; }
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) PTR_TYPE* operator -(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op - op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) PTR_TYPE* operator -(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 - i_op; }
# 1553 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator *(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator *(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator /(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator /(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator +(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator +(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator -(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator -(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator *(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator *(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator /(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator /(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator +(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator +(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator -(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator -(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
# 1578 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator *(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator *(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator /(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator /(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator +(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator +(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator -(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator -(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
# 1610 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op * ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op + ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op - ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op / ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op % ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op & ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op | ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op ^ ap_int_base<1, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op * ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op + ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op - ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op / ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op % ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op & ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op | ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op ^ ap_int_base<8, CHAR_IS_SIGNED>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op * ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op + ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op - ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op / ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op % ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op & ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op | ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op ^ ap_int_base<8, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op * ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op + ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op - ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op / ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op % ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op & ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op | ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op ^ ap_int_base<8, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op * ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op + ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op - ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op / ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op % ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op & ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op | ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op ^ ap_int_base<_AP_SIZE_short, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op * ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op + ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op - ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op / ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op % ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op & ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op | ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op ^ ap_int_base<_AP_SIZE_short, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op * ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op + ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op - ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op / ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op % ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op & ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op | ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op ^ ap_int_base<_AP_SIZE_int, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op * ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op + ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op - ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op / ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op % ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op & ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op | ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op ^ ap_int_base<_AP_SIZE_int, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op * ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op + ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op - ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op / ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op % ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op & ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op | ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op ^ ap_int_base<_AP_SIZE_long, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op * ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op + ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op - ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op / ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op % ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op & ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op | ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op ^ ap_int_base<_AP_SIZE_long, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, false>(i_op); }
# 1649 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r(0); if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r(0); if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
# 1673 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
# 1704 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op += ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op -= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op *= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op /= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op %= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op &= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op |= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op ^= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >>= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <<= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op += ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op -= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op *= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op /= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op %= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op &= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op |= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op ^= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >>= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <<= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op += ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op -= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op *= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op /= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op %= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op &= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op |= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op ^= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >>= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <<= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op += ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op -= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op *= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op /= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op %= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op &= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op |= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op ^= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >>= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <<= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op += ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op -= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op *= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op /= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op %= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op &= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op |= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op ^= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >>= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <<= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op += ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op -= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op *= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op /= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op %= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op &= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op |= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op ^= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >>= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <<= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op += ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op -= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op *= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op /= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op %= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op &= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op |= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op ^= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >>= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <<= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op += ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op -= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op *= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op /= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op %= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op &= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op |= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op ^= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >>= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <<= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op += ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op -= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op *= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op /= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op %= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op &= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op |= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op ^= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >>= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <<= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op += ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op -= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op *= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op /= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op %= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op &= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op |= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op ^= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >>= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <<= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1737 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half& operator +=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 += op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half& operator -=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 -= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half& operator *=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 *= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half& operator /=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 /= op_rt; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float& operator +=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 += op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float& operator -=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 -= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float& operator *=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 *= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float& operator /=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 /= op_rt; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double& operator +=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 += op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double& operator -=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 -= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double& operator *=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 *= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double& operator /=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 /= op_rt; }
# 1765 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1802 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; }
# 1832 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) + op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) - op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) * op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) / op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) % op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) & op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) | op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) ^ op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) >> op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) << op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<_AP_W2, false>(op2); }
# 1863 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator +=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator -=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator *=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator /=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator %=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator >>=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator <<=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1895 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator &=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator |=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator ^=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 1914 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator ==(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator ==(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator !=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator !=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <=(op2.operator ap_int_base<_AP_W2, false>()); }
# 1941 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) + op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) - op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) * op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) / op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) % op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) & op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) | op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) ^ op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >> op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) << op2; }
# 1972 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator +=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator -=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator *=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator /=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator %=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator >>=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator <<=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 2004 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator &=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator |=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator ^=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 2023 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 == ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) == op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 != ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) != op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 > ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) > op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >= op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 < ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) < op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) <= op2; }
# 2130 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 == op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() == op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 != op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() != op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 > op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() > op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 >= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() >= op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 < op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() < op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 <= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() <= op2; }
# 12 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/ap_int.h" 2
# 1 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_ref.h" 1
# 27 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_ref.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref {
  enum {
    _AP_WR = _AP_W1 + _AP_W2,
  };

  _AP_T1& mbv1;
  _AP_T2& mbv2;

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref(const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& ref)
      : mbv1(ref.mbv1), mbv2(ref.mbv2) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref(_AP_T1& bv1, _AP_T2& bv2) : mbv1(bv1), mbv2(bv2) {}

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> Part1;
    Part1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(Part1);
    ap_int_base<_AP_W2, false> Part2;
    Part2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(Part2);
    return *this;
  }
# 70 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(bool val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(signed char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(unsigned char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(unsigned short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(unsigned int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(unsigned long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(ap_slong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(ap_ulong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(half val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(float val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(double val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }





  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(const ap_bit_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }
  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(const ap_range_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((const ap_int_base<_AP_W3, false>)(val));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(
      const ap_fixed_base<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&
          val) {
    return operator=(val.to_ap_int_base());
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(
      const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((ap_ulong)(bool)(val));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_int_base<_AP_WR, false>() const { return get(); }

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_ulong() const { return get().to_uint64(); }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                       ap_range_ref<_AP_W3, _AP_S3> >
  operator,(const ap_range_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_range_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_range_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(*this, a2);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(volatile ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const volatile ap_int_base<_AP_W3, _AP_S3> &a2) {

    ap_int_base<_AP_W3, _AP_S3> op(a2);
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(op));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >
  operator,(const ap_bit_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_bit_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                       ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >
  operator,(const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                         ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >(
        *this, const_cast<ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<
      _AP_WR, ap_concat_ref, _AP_W3,
      af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
  operator,(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, _AP_W3,
        af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<
            af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_WR, ap_concat_ref, 1,
                    af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
      operator,(const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>
                    &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, 1,
        af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(
            a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator&(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() & a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator|(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() | a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator^(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() ^ a2;
  }
# 258 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_WR, false> get() const {
    ap_int_base<_AP_WR, false> tmpVal(0);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W2, false> v2(mbv2);
    ap_int_base<_AP_W1, false> v1(mbv1);
    tmpVal.V = ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v2.V) __Repl2__ = v2.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, W_ref2 - 1); __Result__; });
    tmpVal.V =
        ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v1.V) __Repl2__ = v1.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    return tmpVal;
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) void set(const ap_int_base<_AP_W3, false>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> tmpVal1;
    tmpVal1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(tmpVal1);
    ap_int_base<_AP_W2, false> tmpVal2;
    tmpVal2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(tmpVal2);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const { return mbv1.length() + mbv2.length(); }
};




template <int _AP_W, bool _AP_S>
struct ap_range_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref(const ap_range_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_ulong() const { return to_uint64(); }
# 339 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(bool val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(signed char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(unsigned char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(unsigned short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(unsigned int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(unsigned long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(ap_slong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(ap_ulong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(half val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(float val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(double val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }




  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(const ap_range_ref& val) {
    return operator=((const ap_int_base<_AP_W, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    return operator=(val.to_ap_int_base());
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)(val));
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug))
  ap_concat_ref<_AP_W, ap_range_ref, _AP_W, ap_int_base<_AP_W, _AP_S> >
  operator,(ap_int_base<_AP_W, _AP_S>& a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W,
                         ap_int_base<_AP_W, _AP_S> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<
      _AP_W, ap_range_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, ap_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop == hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop < hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop <= hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<=(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= op2.V;
    return *this;
  };



  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator~() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (~ret);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator!() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (!ret);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator+() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator-() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (-ret);
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned to_uint() const {
    ap_int_base<_AP_W, false> t;
    t.V = d_bv.V;
    return (unsigned)(({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned long to_ulong() const {
    ap_int_base<_AP_W, false> t;
    t.V = d_bv.V;
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ulong to_uint64() const {
    ap_int_base<_AP_W, false> t;
    t.V = d_bv.V;
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool and_reduce() const {
    bool ret = true;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    VITIS_LOOP_676_1: for (unsigned i = low; i != high+1; ++i) {

#pragma HLS unroll

 ret &= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool or_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    VITIS_LOOP_690_1: for (unsigned i = low; i != high+1; ++i) {

#pragma HLS unroll

 ret |= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool xor_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    VITIS_LOOP_704_1: for (unsigned i = low; i != high+1; ++i) {

#pragma HLS unroll

 ret ^= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }
# 720 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) char* to_string(signed char radix = 2) const {
    (void)(radix);
    return 0;
  }

};
# 760 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_ref.h"
template <int _AP_W, bool _AP_S>
struct ap_bit_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int d_index;

 public:

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref(const ap_bit_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool to_bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
# 798 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(bool val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(signed char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(unsigned char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(unsigned short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(unsigned int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(unsigned long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(ap_slong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(ap_ulong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
# 820 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(half val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(float val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(double val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(val.V != 0));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_int_base<_AP_W2, false>)val);
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(const ap_bit_ref& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<
      1, ap_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        1, ap_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator==(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!=(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() != op.get();
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool get() { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  template <int _AP_W3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) void set(const ap_int_base<_AP_W3, false>& val) {
    operator=(val);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const { return 1; }

  template <typename _RT>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator&=(const _RT& r) {
    operator=(get() & ap_int_base<1, false>(r));
    return *this;
  }

  template <typename _RT>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator|=(const _RT& r) {
    operator=(get() | ap_int_base<1, false>(r));
    return *this;
  }

  template <typename _RT>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator^=(const _RT& r) {
    operator=(get() ^ ap_int_base<1, false>(r));
    return *this;
  }





  inline __attribute__((always_inline)) __attribute__((nodebug)) char* to_string() const { return 0; }

};
# 1036 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }






template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1095 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::plus operator +(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::minus operator -(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mult operator *(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::div operator /(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mod operator %(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::plus operator +(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::minus operator -(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mult operator *(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::div operator /(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mod operator %(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::plus operator +(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::minus operator -(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mult operator *(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::div operator /(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mod operator %(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::plus operator +(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::minus operator -(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mult operator *(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::div operator /(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mod operator %(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::plus operator +(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::minus operator -(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mult operator *(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::div operator /(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mod operator %(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::plus operator +(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::minus operator -(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mult operator *(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::div operator /(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mod operator %(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::plus operator +(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::minus operator -(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mult operator *(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::div operator /(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mod operator %(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::plus operator +(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::minus operator -(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mult operator *(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::div operator /(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mod operator %(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::plus operator +(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::minus operator -(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mult operator *(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::div operator /(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mod operator %(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::plus operator +(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::minus operator -(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mult operator *(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::div operator /(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mod operator %(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::plus operator +(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::minus operator -(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mult operator *(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::div operator /(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mod operator %(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::plus operator +(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::minus operator -(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mult operator *(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::div operator /(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mod operator %(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
# 1118 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator &(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator |(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator ^(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator >>(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator <<(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator &(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator |(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator ^(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator >>(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator <<(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator &(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator |(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator ^(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator >>(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator <<(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator &(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator |(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator &(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator |(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator ^(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator >>(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator <<(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator &(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator |(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator &(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator |(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator ^(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator >>(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator <<(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator &(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator |(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator &(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator |(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator ^(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator >>(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator <<(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator &(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator |(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator &(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator |(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator ^(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator >>(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator <<(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator &(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator |(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator ^(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator >>(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator <<(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
# 1146 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_ref.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())+( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())-( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())*( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::div operator /(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())/( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())%( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())&( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())|( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())^( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())>>( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())<<( rhs.operator ap_int_base<_AP_W2, false>()); }
# 1195 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_ref.h"
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::plus operator +( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() + rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::minus operator -( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() - rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mult operator *( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() * rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::div operator /( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() / rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mod operator %( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() % rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator &( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() & rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator |( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() | rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator ^( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() ^ rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator >>( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() >> rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator <<( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() << rhs.get(); }
# 1342 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 1, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 1; ret >>= 1; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 1, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 1, false> operator,( bool op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, bool op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op2); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( bool op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op1); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 1, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 1, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 1, false> operator,( bool op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<8 + 1, false> operator,( char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, char op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op2); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op1); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 8, false> operator,( char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<8 + 1, false> operator,( signed char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, signed char op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op2); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( signed char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op1); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + 1, true> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 8, false> operator,( signed char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<8 + 1, false> operator,( unsigned char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned char op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op2); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( unsigned char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op1); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 8, false> operator,( unsigned char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_short + 1, false> operator,( short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_short, false> operator,( short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_short + 1, false> operator,( unsigned short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_short, false> operator,( unsigned short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_int + 1, false> operator,( int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_int, false> operator,( int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_int + 1, false> operator,( unsigned int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_int, false> operator,( unsigned int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_long + 1, false> operator,( long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_long, false> operator,( long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_long + 1, false> operator,( unsigned long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_long, false> operator,( unsigned long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_slong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_ulong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
# 1366 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_ref.h"
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }

template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
# 13 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/ap_int.h" 2




template <int _AP_W>
struct ap_int : ap_int_base<_AP_W, true> {
  static_assert(_AP_W > 0, "ap_int bitwidth must be positive");

  typedef ap_int_base<_AP_W, true> Base;

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int() = default;
  template <int _AP_W2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_int<_AP_W2>& op): Base((ap_int_base<_AP_W2, true>)op){



    op.checkOverflowCsim(_AP_W, true);

    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const volatile ap_int<_AP_W2>& op) {
    const_cast<const ap_int<_AP_W2>& >(op).checkOverflowCsim(_AP_W, true);
    Base::V = op.V;
  }

  template <int _AP_W2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_uint<_AP_W2>& op): Base((ap_int_base<_AP_W2, false>)op){



    op.checkOverflowCsim(_AP_W, true);

    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const volatile ap_uint<_AP_W2>& op) {
    const_cast<const ap_uint<_AP_W2>& >(op).checkOverflowCsim(_AP_W, true);
    Base::V = op.V;
  }




                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(unsigned V __attribute__((bitwidth(_AP_W))), bool raw): Base(0) {
    Base::V = V;
    (void)(raw);
  }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_int_base<_AP_W2, _AP_S2>& op):Base(op) {

  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}







  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(bool val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(char val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(signed char val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(unsigned char val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(short val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(unsigned short val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(int val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(unsigned int val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(long val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(unsigned long val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(ap_slong val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(ap_ulong val):Base(val){ this->checkOverflowBaseC(val); }

                ap_int(double val) : Base(val) {}
                ap_int(float val) : Base(val) {}
  ap_int(half val) : Base(val) {}


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const char* s, signed char rd) : Base(s, rd) {}




  ap_int &operator=(const ap_int<_AP_W> &op2) = default;
# 163 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/ap_int.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int& operator=(const volatile ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(const ap_int<_AP_W>& op2) volatile {
    *((volatile typename Base::Base::DataType *)(&(Base::V))) = op2.V;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(const volatile ap_int<_AP_W>& op2) volatile {
    *((volatile typename Base::Base::DataType *)(&(Base::V))) = op2.V;
  }

};




template <int _AP_W>
struct ap_uint : ap_int_base<_AP_W, false> {
  static_assert(_AP_W > 0, "ap_uint bitwidth must be positive");

  typedef ap_int_base<_AP_W, false> Base;

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint() = default;
  template <int _AP_W2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_uint<_AP_W2>& op):Base((ap_int_base<_AP_W2, false>)op) {
    op.checkOverflowCsim(_AP_W, false);

  }

  template <int _AP_W2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_int<_AP_W2>& op):Base((ap_int_base<_AP_W2, true>)op) {
    op.checkOverflowCsim(_AP_W, false);

  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const volatile ap_uint<_AP_W2>& op) {
    const_cast<const ap_uint<_AP_W2>& >(op).checkOverflowCsim(_AP_W, false);
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const volatile ap_int<_AP_W2>& op) {
    const_cast<const ap_int<_AP_W2>& >(op).checkOverflowCsim(_AP_W, false);
    Base::V = op.V;
  }




                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(unsigned V __attribute__((bitwidth(_AP_W))), bool raw):Base(0) {
    Base::V = V;
    (void)(raw);
  }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_int_base<_AP_W2, _AP_S2>& op):Base(op) {

  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}






  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(bool val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(char val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(signed char val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(unsigned char val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(short val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(unsigned short val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(int val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(unsigned int val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(long val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(unsigned long val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(ap_slong val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(ap_ulong val):Base(val) { this->checkOverflowBaseC(val); }

                ap_uint(double val) : Base(val) {}
                ap_uint(float val) : Base(val) {}
  ap_uint(half val) : Base(val) {}


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const char* s, signed char rd) : Base(s, rd) {}





  ap_uint &operator=(const ap_uint<_AP_W> &op2) = default;
# 321 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/ap_int.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint& operator=(const volatile ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(const ap_uint<_AP_W>& op2) volatile {
    *((volatile typename Base::Base::DataType *)(&(Base::V))) = op2.V;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(const volatile ap_uint<_AP_W>& op2) volatile {
    *((volatile typename Base::Base::DataType *)(&(Base::V))) = op2.V;
  }

};
# 356 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/ap_int.h"
# 1 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_special.h" 1
# 20 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 48 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_special.h"
template <int _AP_W>
class complex<ap_int<_AP_W> > {
 public:
  typedef ap_int<_AP_W> _Tp;
  typedef _Tp value_type;




  __attribute__((nodebug)) complex() = default;


  __attribute__((nodebug)) complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  __attribute__((nodebug)) complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  __attribute__((nodebug)) const _Tp& real() const { return _M_real; }
  const _Tp& imag() const { return _M_imag; }







  __attribute__((nodebug)) void real(_Tp __val) { _M_real = __val; }

  __attribute__((nodebug)) void imag(_Tp __val) { _M_imag = __val; }



  __attribute__((nodebug)) complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 181 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_int_special.h"
template <int _AP_W>
inline __attribute__((nodebug)) bool operator==(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W>
inline __attribute__((nodebug)) bool operator==(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W>
inline __attribute__((nodebug)) bool operator!=(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W>
inline __attribute__((nodebug)) bool operator!=(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 357 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/ap_int.h" 2
# 17 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_base.h" 2
# 87 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_base.h"
template <int _AP_W2, int _AP_I2, bool _AP_S2>
struct _ap_fixed_factory;
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, true> {
  typedef ap_fixed<_AP_W2, _AP_I2> type;
};
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, false> {
  typedef ap_ufixed<_AP_W2, _AP_I2> type;
};
# 108 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct ap_fixed_base : ssdm_int<_AP_W, _AP_S> {
 static_assert(_AP_W > 0, "ap_fixed_base bitwidth must be positive");

 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;
  static const int width = _AP_W;
  static const int iwidth = _AP_I;
  static const ap_q_mode qmode = _AP_Q;
  static const ap_o_mode omode = _AP_O;


  template <int _AP_W2, int _AP_I2, bool _AP_S2>
  struct RType {
    enum {
      _AP_F = _AP_W - _AP_I,
      F2 = _AP_W2 - _AP_I2,
      mult_w = _AP_W + _AP_W2,
      mult_i = _AP_I + _AP_I2,
      mult_s = _AP_S || _AP_S2,
      plus_w = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
               1 + ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      plus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1 +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      minus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,

      div_w = _AP_S2 + _AP_W + ((F2) > (0) ? (F2) : (0)),



      div_i = _AP_S2 + _AP_I + F2,
      div_s = _AP_S || _AP_S2,
      logic_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      logic_i = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };

    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> lhs;
    typedef ap_fixed_base<_AP_W2, _AP_I2, _AP_S2> rhs;

    typedef ap_fixed_base<mult_w, mult_i, mult_s> mult_base;
    typedef ap_fixed_base<plus_w, plus_i, plus_s> plus_base;
    typedef ap_fixed_base<minus_w, minus_i, minus_s> minus_base;
    typedef ap_fixed_base<logic_w, logic_i, logic_s> logic_base;
    typedef ap_fixed_base<div_w, div_i, div_s> div_base;
    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> arg1_base;

    typedef typename _ap_fixed_factory<mult_w, mult_i, mult_s>::type mult;
    typedef typename _ap_fixed_factory<plus_w, plus_i, plus_s>::type plus;
    typedef typename _ap_fixed_factory<minus_w, minus_i, minus_s>::type minus;
    typedef typename _ap_fixed_factory<logic_w, logic_i, logic_s>::type logic;
    typedef typename _ap_fixed_factory<div_w, div_i, div_s>::type div;
    typedef typename _ap_fixed_factory<_AP_W, _AP_I, _AP_S>::type arg1;
  };

 private:
# 297 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_base.h"
                      inline __attribute__((always_inline)) __attribute__((nodebug)) void report() {}




                      inline __attribute__((always_inline)) __attribute__((nodebug)) void overflow_adjust(bool underflow, bool overflow, bool lD,
                              bool sign) {
    if (!underflow && !overflow) return;
    if (_AP_O == AP_WRAP) {
      if (_AP_N == 0) return;
      if (_AP_S) {


        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        if (_AP_N > 1) {

          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
      } else {

        ap_int_base<_AP_W, false> mask(-1);
        Base::V =
            ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 1); __Result__; });
      }
    } else if (_AP_O == AP_SAT_ZERO) {
      Base::V = 0;
    } else if (_AP_O == AP_WRAP_SM && _AP_S) {
      bool Ro = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      if (_AP_N == 0) {
        if (lD != Ro) {
          Base::V = ~Base::V;
          Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(lD) __Repl2__ = !!lD; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        }
      } else {
        if (_AP_N == 1 && sign != Ro) {
          Base::V = ~Base::V;
        } else if (_AP_N > 1) {
          bool lNo = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - _AP_N); __Result__; });
          if (lNo == sign) Base::V = ~Base::V;
          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
      }
    } else {
      if (_AP_S) {
        if (overflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          Base::V = ~Base::V;
        } else if (underflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          if (_AP_O == AP_SAT_SYM) Base::V |= 1;
        }
      } else {
        if (overflow)
          Base::V = ~(ap_int_base<_AP_W, false>(0).V);
        else if (underflow)
          Base::V = 0;
      }
    }
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool quantization_adjust(bool qb, bool r, bool s) {
    bool carry = (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    if (_AP_Q == AP_TRN) return false;
    if (_AP_Q == AP_RND_ZERO)
      qb &= s || r;
    else if (_AP_Q == AP_RND_MIN_INF)
      qb &= r;
    else if (_AP_Q == AP_RND_INF)
      qb &= !s || r;
    else if (_AP_Q == AP_RND_CONV)
      qb &= ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 0); __Result__; }) || r;
    else if (_AP_Q == AP_TRN_ZERO)
      qb = s && (qb || r);
    Base::V += qb;
    return carry && (!(bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }));
  }


                      inline __attribute__((always_inline)) __attribute__((nodebug)) int countLeadingOnes() const {




    return 0;

  }

 public:



  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base() = default;


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op):Base(op.V) {

    operator=(op);



    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const ap_int_base<_AP_W2, _AP_S2>& op):Base(op.V) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp(0);
    tmp.V = op.V;

    operator=(tmp);



    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }
# 460 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    *this = ((bool)op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const ap_range_ref<_AP_W2, _AP_S2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op) {
    *this = (ap_int_base<_AP_W2 + _AP_W3, false>(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (bool(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }
# 528 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const bool x) { ap_fixed_base<(1), (1), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const char x) { ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const signed char x) { ap_fixed_base<(8), (8), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const unsigned char x) { ap_fixed_base<(8), (8), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const unsigned short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const unsigned int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const unsigned long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const ap_slong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const ap_ulong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)> tmp; tmp.V = x; *this = tmp; }







          __attribute__((nodebug)) ap_fixed_base(double d) {
    ap_int_base<64, false> ireg;
    ireg.V = doubleToRawBits(d);
    bool isneg = ({ typeof(ireg.V) __Val2__ = ireg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 63); __Result__; });

    ap_int_base<11 + 1, true> exp, bias = ((1 << (11 - 1)) - 1);
    ap_int_base<11, false> exp_tmp;
    exp_tmp.V = ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, 52 + 11 - 1); __Result__; });
    exp = exp_tmp - bias;
    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });


    (static_cast<void>(0));

    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });
    if (isneg) man = -man;
    if ((ireg.V & 0x7fffffffffffffffLL) == 0) {
      Base::V = 0;
    } else {
      int _AP_W2 = 52 + 2, _AP_I2 = exp.V + 2, _AP_F = _AP_W - _AP_I,
          F2 = _AP_W2 - _AP_I2;
      bool _AP_S2 = true,
           QUAN_INC = F2 > _AP_F &&
                      !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));
      bool carry = false;

      unsigned sh_amt = (F2 > _AP_F) ? F2 - _AP_F : _AP_F - F2;
      if (F2 == _AP_F)
        Base::V = man.V;
      else if (F2 > _AP_F) {
        if (sh_amt < 52 + 2)
          Base::V = man.V >> sh_amt;
        else {
          Base::V = isneg ? -1 : 0;
        }
        if ((_AP_Q != AP_TRN) && !((_AP_Q == AP_TRN_ZERO) && !_AP_S2)) {
          bool qb = (F2 - _AP_F > _AP_W2) ? isneg : (bool)({ typeof(man.V) __Val2__ = man.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

          bool r =
              (F2 > _AP_F + 1)
                  ? ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, (F2 - _AP_F - 2 < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1)); __Result__; }) != 0


                  : false;
          carry = quantization_adjust(qb, r, isneg);
        }
      } else {
        Base::V = man.V;
        if (sh_amt < _AP_W)
          Base::V = Base::V << sh_amt;
        else
          Base::V = 0;
      }

      if ((_AP_O != AP_WRAP || _AP_N != 0) &&
          ((!_AP_S && _AP_S2) ||
           _AP_I - _AP_S <
               _AP_I2 - _AP_S2 +
                   (QUAN_INC ||
                    (_AP_S2 && (_AP_O == AP_SAT_SYM))))) {
        bool deleted_zeros = _AP_S2 ? true : !carry, deleted_ones = true;
        bool neg_src = isneg;
        bool lD = false;
        int pos1 = F2 - _AP_F + _AP_W;
        int pos2 = F2 - _AP_F + _AP_W + 1;
        bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
        if (pos1 < _AP_W2 && pos1 >= 0)

          lD = (man.V >> pos1) & 1;
        if (pos1 < _AP_W2) {
          bool Range1_all_ones = true;
          bool Range1_all_zeros = true;
          bool Range2_all_ones = true;
          ap_int_base<52 + 2, false> Range2;
          ap_int_base<52 + 2, false> all_ones(-1);

          if (pos2 >= 0 && pos2 < _AP_W2) {


            Range2.V = man.V;
            Range2.V >>= pos2;
            Range2_all_ones = Range2 == (all_ones >> pos2);
          } else if (pos2 < 0)
            Range2_all_ones = false;
          if (pos1 >= 0 && pos2 < _AP_W2) {
            Range1_all_ones = Range2_all_ones && lD;
            Range1_all_zeros = !Range2.V && !lD;
          } else if (pos2 == _AP_W2) {
            Range1_all_ones = lD;
            Range1_all_zeros = !lD;
          } else if (pos1 < 0) {
            Range1_all_zeros = !man.V;
            Range1_all_ones = false;
          }

          deleted_zeros =
              deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
          deleted_ones =
              carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
          neg_src = isneg && !(carry && Range1_all_ones);
        } else
          neg_src = isneg && newsignbit;
        bool neg_trg = _AP_S && newsignbit;
        bool overflow = (neg_trg || !deleted_zeros) && !isneg;
        bool underflow = (!neg_trg || !deleted_ones) && neg_src;
        if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
          underflow |=
              neg_src &&
              (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                         : true);
        overflow_adjust(underflow, overflow, lD, neg_src);
      }
    }
    report();
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(float d) { *this = ap_fixed_base(double(d)); }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(half d) { *this = ap_fixed_base(double(d)); }
# 802 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {

    const int _AP_F = _AP_W - _AP_I;
    const int F2 = _AP_W2 - _AP_I2;
    const int QUAN_INC =
          F2 > _AP_F && !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));

    if (!op) Base::V = 0;
    bool carry = false;
    bool signbit = ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    bool isneg = signbit && _AP_S2;
    if (F2 == _AP_F)
      Base::V = op.V;
    else if (F2 > _AP_F) {
      unsigned int sh_amt = F2 - _AP_F;

      if (sh_amt < _AP_W2) {
        Base::V = op.V >> sh_amt;
      } else {
        Base::V = isneg ? -1 : 0;
      }
      if (_AP_Q != AP_TRN && !(_AP_Q == AP_TRN_ZERO && !_AP_S2)) {

        bool qb = (F2 - _AP_F > _AP_W2) ? _AP_S2 && signbit : ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });
        enum { hi = ((F2 - _AP_F - 2) < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1) };

        bool r = (F2 > _AP_F + 1) ? (({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, hi); __Result__; }) != 0) : false;
        carry = quantization_adjust(qb, r, isneg);
      }
    } else {
      unsigned sh_amt = _AP_F - F2;

      if (sh_amt < _AP_W) {
        if (_AP_W > _AP_W2) {

          Base::V = op.V;
          Base::V <<= sh_amt;
        } else {

          Base::V = op.V << sh_amt;
        }
      } else {
        Base::V = 0;
      }
    }

    if ((_AP_O != AP_WRAP || _AP_N != 0) &&
        ((!_AP_S && _AP_S2) ||
         _AP_I - _AP_S <
             _AP_I2 - _AP_S2 +
                 (QUAN_INC || (_AP_S2 && _AP_O == AP_SAT_SYM)))) {
      bool deleted_zeros = _AP_S2 ? true : !carry;
      bool deleted_ones = true;
      bool neg_src = isneg;
      bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      enum { pos1 = F2 - _AP_F + _AP_W, pos2 = F2 - _AP_F + _AP_W + 1 };
      bool lD = (pos1 < _AP_W2 && pos1 >= 0) ? ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), pos1); __Result__; })
                                             : false;
      if (pos1 < _AP_W2) {
        bool Range1_all_ones = true;
        bool Range1_all_zeros = true;
        bool Range2_all_ones = true;
        ap_int_base<_AP_W2, false> all_ones(-1);

        if (pos2 < _AP_W2 && pos2 >= 0) {
          ap_int_base<_AP_W2, false> Range2(0);
          Range2.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos2, _AP_W2 - 1); __Result__; });
          Range2_all_ones = Range2 == (all_ones >> pos2);
        } else if (pos2 < 0) {
          Range2_all_ones = false;
        }

        if (pos1 >= 0 && pos2 < _AP_W2) {
          ap_int_base<_AP_W2, false> Range1(0);
          Range1.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos1, _AP_W2 - 1); __Result__; });
          Range1_all_ones = Range1 == (all_ones >> pos1);
          Range1_all_zeros = !Range1.V;
        } else if (pos2 == _AP_W2) {
          Range1_all_ones = lD;
          Range1_all_zeros = !lD;
        } else if (pos1 < 0) {
          Range1_all_zeros = !op.V;
          Range1_all_ones = false;
        }

        deleted_zeros =
            deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
        deleted_ones =
            carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
        neg_src = isneg && !(carry && Range1_all_ones);
      } else
        neg_src = isneg && newsignbit;
      bool neg_trg = _AP_S && newsignbit;
      bool overflow = (neg_trg || !deleted_zeros) && !isneg;
      bool underflow = (!neg_trg || !deleted_ones) && neg_src;
      if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
        underflow |=
            neg_src &&
            (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                       : true);

      overflow_adjust(underflow, overflow, lD, neg_src);
    }
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator=(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(const_cast<const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(op));
    return *this;
  }


                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& setBits(ap_ulong bv) {

    Base::V = bv;
    return *this;
  }


  static inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base bitsToFixed(ap_ulong bv) {

    ap_fixed_base t;

    t.V = bv;



    return t;
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) void checkOverflowCsimFix(int _ap_w2, bool _ap_s2) const {
# 974 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_base.h"
      (void)_ap_w2;
      (void)_ap_s2;

      return;
  }





                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> to_ap_int_base(
      bool Cnative = true) const {
    ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> ret(0);
    if (_AP_I == 0) {
      ret.V = 0;
    } else if (_AP_I > 0 && _AP_I <= _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - _AP_I, _AP_W - 1); __Result__; });
    } else if (_AP_I > _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 1); __Result__; });
      ret.V <<= (_AP_I - _AP_W);
    }
# 1003 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_base.h"
    if (Cnative && _AP_I < _AP_W) {

      if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }) && (_AP_I < _AP_W) &&
          (({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_I < 0 ? _AP_W - 1 : _AP_W - _AP_I - 1); __Result__; }) != (unsigned long)0))


        ret = ret + 1;
    } else {

    }
    return ret;
  };

 public:
  template <int _AP_W2, bool _AP_S2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_int_base<_AP_W2, _AP_S2>() const {
    return ap_int_base<_AP_W2, _AP_S2>(to_ap_int_base());
  }


                      inline __attribute__((always_inline)) __attribute__((nodebug)) char to_char() const { return to_ap_int_base().to_char(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) int to_int() const { return to_ap_int_base().to_int(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned to_uint() const { return to_ap_int_base().to_uint(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_slong to_int64() const { return to_ap_int_base().to_int64(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ulong to_uint64() const { return to_ap_int_base().to_uint64(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int<_AP_I> to_ap_int() const { return ap_int<_AP_I>(to_ap_int_base()); }



  inline __attribute__((always_inline)) __attribute__((nodebug)) double to_double() const {




    enum { BITS = 52 + 11 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp(0);
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1 << (11 - 1)) - 1);
    int lsb_index = _AP_W - l - 1 - 52;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    ap_ulong m = 0;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (ap_ulong)(tmp.V >> (lsb_index - 1))
                           : (ap_ulong)(tmp.V << (1 - lsb_index));
    } else {
      m = (ap_ulong)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;


    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 52 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52 + 11 - 1); __Result__; });


    return rawBitsToDouble(m);
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) float to_float() const {




    enum { BITS = 23 + 8 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1 << (8 - 1)) - 1);
    int lsb_index = _AP_W - l - 1 - 23;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned long m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned long)(tmp.V >> (lsb_index - 1))
                           : (unsigned long)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned long)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 23 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23 + 8 - 1); __Result__; });

    return rawBitsToFloat(m);
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) half to_half() const {




    enum { BITS = 10 + 5 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1 << (5 - 1)) - 1);
    int lsb_index = _AP_W - l - 1 - 10;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned short m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned short)(tmp.V >> (lsb_index - 1))
                           : (unsigned short)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned short)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 10 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 10, 10 + 5 - 1); __Result__; });

    return rawBitsToHalf(m);
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) operator long double() const { return (long double)to_double(); }

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator double() const { return to_double(); }

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator float() const { return to_float(); }

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator half() const { return to_half(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator bool() const { return (bool)Base::V != 0; }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator char() const { return (char)to_int(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator signed char() const { return (signed char)to_int(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator unsigned char() const { return (unsigned char)to_uint(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator short() const { return (short)to_int(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator unsigned short() const { return (unsigned short)to_uint(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator int() const { return to_int(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator unsigned int() const { return to_uint(); }



                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator long() const { return (long)to_int64(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator unsigned long() const { return (unsigned long)to_uint64(); }






                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_ulong() const { return to_uint64(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_slong() const { return to_int64(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const { return _AP_W; };
# 1232 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_base.h"
                      inline __attribute__((always_inline)) __attribute__((nodebug)) int countLeadingZeros() const {


    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return t.V == 0 ? _AP_W : __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return t.V == 0 ? _AP_W : __builtin_ctzll(t.V);
    } else {
      enum {__N = (_AP_W + 63) / 64};
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      VITIS_LOOP_1248_1: for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.range(0, 63) = this->range(_AP_W - i * 64 - 64, _AP_W - i * 64 - 1);
        NZeros += hitNonZero ? 0 : (t.V == 0 ? 64 : __builtin_clzll(t.V));
        hitNonZero |= (t != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        t.range(63 - (_AP_W - 1) % 64, 63) = this->range(0, (_AP_W - 1) % 64);
        NZeros += t.V == 0 ? _AP_W % 64 : __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W2, _AP_I2, _AP_S2>::mult operator*(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::mult_base r(0), t(0);
    r.V = Base::V;
    t.V = op2.V;
    r.V *= op2.V;
    return r;
  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W2, _AP_I2, _AP_S2>::div operator/(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::div_base r;
# 1302 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_base.h"
        ap_fixed_base<_AP_W + ((_AP_W2 - _AP_I2) > (0) ? (_AP_W2 - _AP_I2) : (0)),_AP_I, _AP_S> t(*this);



        r.V = t.V / op2.V;
# 1335 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_base.h"
    return r;
  }
# 1350 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W2, _AP_I2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::plus_base ret(0), lhs(*this), rhs(op2); ret.V = lhs.V + rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W2, _AP_I2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::minus_base ret(0), lhs(*this), rhs(op2); ret.V = lhs.V - rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::logic_base ret(0), lhs(*this), rhs(op2); ret.V = lhs.V & rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::logic_base ret(0), lhs(*this), rhs(op2); ret.V = lhs.V | rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::logic_base ret(0), lhs(*this), rhs(op2); ret.V = lhs.V ^ rhs.V; return ret; }
# 1368 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator *=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator *(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator /=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator /(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator +=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator +(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator -=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator -(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator &=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator &(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator |=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator |(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator ^=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator ^(op2); return *this; }





  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator++() {
    operator+=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator--() {
    operator-=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) const ap_fixed_base operator++(int) {
    ap_fixed_base r(*this);
    operator++();
    return r;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) const ap_fixed_base operator--(int) {
    ap_fixed_base r(*this);
    operator--();
    return r;
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) typename _ap_fixed_factory<_AP_W, _AP_I, _AP_S>::type operator+() { return *this; }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) typename _ap_fixed_factory<_AP_W + 1, _AP_I + 1, true>::type operator-() const {
    ap_fixed_base<_AP_W + 1, _AP_I + 1, true> r(*this);
    r.V = -r.V;
    return r;
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> getNeg() {
    ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> r(*this);
    r.V = -r.V;
    return r;
  }



                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!() const { return Base::V == (unsigned long)0; }




                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S> operator~() const {
    ap_fixed_base<_AP_W, _AP_I, _AP_S> r(0);
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_SHIFT>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> lshift() const {
    ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> r(0);
    r.V = Base::V;
    return r;
  }

  template <int _AP_SHIFT>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> rshift() const {
    ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> r(0);
    r.V = Base::V;
    return r;
  }





                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator<<(unsigned int sh) const {
    ap_fixed_base r(0);
    r.V = Base::V << sh;
# 1486 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_base.h"
    return r;
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator>>(unsigned int sh) const {
    ap_fixed_base r(0);
    r.V = Base::V >> sh;
# 1508 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_base.h"
    return r;
  }


                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator<<(int sh) const {
    ap_fixed_base r(0);
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator>>(ush);
    } else {
      return operator<<(ush);
    }
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator>>(int sh) const {
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator<<(ush);
    } else {
      return operator>>(ush);
    }
  }


  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, true>& op2) const {


    int sh = op2.to_int();
    return operator<<(sh);
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    int sh = op2.to_int();
    return operator>>(sh);
  }


  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator<<(sh);
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator>>(sh);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator<<(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator<<(op2.to_ap_int_base());
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator>>(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator>>(op2.to_ap_int_base());
  }





                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator<<=(const int sh) {
    *this = operator<<(sh);
    return *this;
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator<<=(const unsigned int sh) {
    *this = operator<<(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator<<=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator<<=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }


                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator>>=(const int sh) {
    *this = operator>>(sh);
    return *this;
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator>>=(const unsigned int sh) {
    *this = operator>>(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator>>=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator>>=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }
# 1652 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V > op2.V; else if (_AP_F > F2) return Base::V > ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V > op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V < op2.V; else if (_AP_F > F2) return Base::V < ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V < op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V >= op2.V; else if (_AP_F > F2) return Base::V >= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V >= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V <= op2.V; else if (_AP_F > F2) return Base::V <= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V <= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V == op2.V; else if (_AP_F > F2) return Base::V == ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V == op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V != op2.V; else if (_AP_F > F2) return Base::V != ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V != op2.V; return false; }





  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(double d) const { return to_double() > d; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(double d) const { return to_double() < d; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(double d) const { return to_double() >= d; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(double d) const { return to_double() <= d; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(double d) const { return to_double() == d; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(double d) const { return to_double() != d; }


  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator[](unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool bit(unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> get_bit(
      const ap_int_base<_AP_W2, true>& index) {
    (static_cast<void>(0));

    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        this, index.to_int() + _AP_W - _AP_I);
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool get_bit(int index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index + _AP_W - _AP_I); __Result__; });

  }
# 1738 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_base.h"
  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool get_bit(const ap_int_base<_AP_W2, true>& index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index.to_int() + _AP_W - _AP_I); __Result__; });

  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(int Hi,
                                                                      int Lo) {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      int Hi, int Lo) const {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        const_cast<ap_fixed_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool is_zero() const { return Base::V == (unsigned long)0; }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool is_neg() const {
    if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; })) return true;
    return false;
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) int wl() const { return _AP_W; }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) int iwl() const { return _AP_I; }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_q_mode q_mode() const { return _AP_Q; }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_o_mode o_mode() const { return _AP_O; }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) int n_bits() const { return _AP_N; }
# 1921 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) char* to_string(unsigned char radix = 2, bool sign = _AP_S) const {
    (void)(radix);
    (void)(sign);
    return 0;
  }

};

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) void b_not(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) {
  ret.V = ~op.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) void b_and(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V & op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) void b_or(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V | op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) void b_xor(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V ^ op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) void neg(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
  ap_fixed_base<_AP_W2 + !_AP_S2, _AP_I2 + !_AP_S2, true, _AP_Q2, _AP_O2,
                _AP_N2>
      t(0);
  t.V = -op.V;
  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) void lshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F2 = _AP_W2 - _AP_I2,
    _AP_I3 = ((_AP_I) > (_AP_I2) ? (_AP_I) : (_AP_I2)),
    _AP_W3 = _AP_I3 + F2,
  };

  ap_fixed_base<_AP_W3, _AP_I3, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t(0);
  t.V = op.V;
  t.V <<= i;

  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) void rshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F = _AP_W - _AP_I,
    F2 = _AP_W2 - _AP_I2,
    F3 = ((F) > (F2) ? (F) : (F2)),
    _AP_W3 = _AP_I2 + F3,
    sh = F - F2,
  };

  ap_fixed_base<_AP_W3, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t(0);
  t.V = op.V;
  if (sh >= 0)
    t.V <<= (int) sh;
  t.V >>= i;

  ret = t;
}
# 2373 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ==(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator !=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator !=(op); }
# 2461 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::plus operator +( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::minus operator -( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::mult operator *( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::div operator /( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator &( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator |( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator ^( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W2, _AP_S2>& operator +=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator +=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W2, _AP_S2>& operator -=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator -=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W2, _AP_S2>& operator *=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator *=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W2, _AP_S2>& operator /=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator /=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W2, _AP_S2>& operator &=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator &=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W2, _AP_S2>& operator |=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator |=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W2, _AP_S2>& operator ^=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator ^=(op.to_ap_int_base()); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ==(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ==(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator !=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <=(op); }




template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator==(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator==(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator!=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>=(op1);
}
# 11 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/ap_fixed.h" 2
# 1 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_ref.h" 1
# 25 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int d_index;

 public:
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref(
      const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {






  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}


  inline __attribute__((always_inline)) __attribute__((nodebug)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }



  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(bool val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; });
    return *this;
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(const af_bit_ref& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=(val != 0);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=(ap_int_base<_AP_W2 + _AP_W3, false>(val));
  }




  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(*this,
                                                                        op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<
      1, af_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        1, af_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator==(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() != op.get();
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const { return 1; }





  inline __attribute__((always_inline)) __attribute__((nodebug)) char* to_string() const { return 0; }

};
# 212 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref(
      const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}




  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {
# 242 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_ref.h"
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {
# 254 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_ref.h"
  }
# 266 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const bool val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const signed char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const unsigned char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const unsigned short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const unsigned int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const unsigned long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const ap_slong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const ap_ulong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const half val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const float val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const double val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }



  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }



  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const af_range_ref& val) {
    ap_int_base<_AP_W, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    const ap_int_base<_AP_W2 + _AP_W3, false> tmp(val);
    return operator=(tmp);
  }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator==(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator<(op2));
  }





  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, op);
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                    af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, af_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_ulong() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret.to_uint64();
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> to_ap_int_base() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) char to_char() const {
    return (char)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator~() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (~ret);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator!() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (!ret);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator+() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator-() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (-ret);
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }
# 615 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) char* to_string(signed char rd = 2) const {
     (void)(rd);
    return 0;
  }

};
# 679 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
# 725 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<1, false>(op); }
# 12 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/ap_fixed.h" 2





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_fixed : ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> {
  static_assert(_AP_W > 0, "ap_fixed bitwidth must be positive");

  typedef ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed() = default;


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                      _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                               _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 68 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}




  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(unsigned V __attribute__((bitwidth(_AP_W))), bool raw) {
    Base::V = V;
    (void)(raw);
  }
# 103 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}





                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(bool v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(char v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(signed char v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(unsigned char v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(short v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(unsigned short v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(int v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(unsigned int v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(long v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(unsigned long v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(ap_slong v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const char* s, signed char rd) : Base(s, rd) {}







  ap_fixed &
  operator=(const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &op) = default;
# 170 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/ap_fixed.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed& operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }
};





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_ufixed : ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> {
  static_assert(_AP_W > 0, "ap_ufixed bitwidth must be positive");

  typedef ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed() = default;


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                       _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                                _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 241 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}




  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(unsigned V __attribute__((bitwidth(_AP_W))), bool raw) {
    Base::V = V;
    (void)(raw);
  }
# 273 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}




                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(bool v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(char v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(signed char v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(unsigned char v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(short v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(unsigned short v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(int v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(unsigned int v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(long v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(unsigned long v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(ap_slong v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const char* s, signed char rd) : Base(s, rd) {}



  ap_ufixed &
  operator=(const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &op) = default;
# 331 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/ap_fixed.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed& operator=(
      const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O,
                                                 _AP_N>& op) volatile {
    Base::V = op.V;
  }
};
# 369 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/ap_fixed.h"
# 1 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_special.h" 1
# 20 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 48 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
class complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > {
 public:
  typedef ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> _Tp;
  typedef _Tp value_type;




  __attribute__((nodebug)) complex() = default;


  __attribute__((nodebug)) complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  __attribute__((nodebug)) complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  const __attribute__((nodebug)) _Tp& real() const { return _M_real; }
  const __attribute__((nodebug)) _Tp& imag() const { return _M_imag; }







  __attribute__((nodebug)) void real(_Tp __val) { _M_real = __val; }

  __attribute__((nodebug)) void imag(_Tp __val) { _M_imag = __val; }



  __attribute__((nodebug)) complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator=(const complex<_Up> &__z) {
    auto tmp1 = __z;
    complex<_Tp> tmp2 = {tmp1.real(), tmp1.imag()};
    *this = tmp2;
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 190 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
class complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > {
 public:
  typedef ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> _Tp;
  typedef _Tp value_type;




  __attribute__((nodebug)) complex() = default;


  __attribute__((nodebug)) complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  __attribute__((nodebug)) complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  const __attribute__((nodebug)) _Tp& real() const { return _M_real; }
  const __attribute__((nodebug)) _Tp& imag() const { return _M_imag; }







  __attribute__((nodebug)) void real(_Tp __val) { _M_real = __val; }

  __attribute__((nodebug)) void imag(_Tp __val) { _M_imag = __val; }



  __attribute__((nodebug)) complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator=(const complex<_Up> &__z) {
    auto tmp1 = __z;
    complex<_Tp> tmp2 = {tmp1.real(), tmp1.imag()};
    *this = tmp2;
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 323 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/etc/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator==(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator==(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator!=(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator!=(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator==(
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator==(
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator!=(
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator!=(
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 370 "/software/common/Xilinx_Vitis/Vitis/2024.2/common/technology/autopilot/ap_fixed.h" 2
# 5 "./cordiccart2pol.h" 2




typedef ap_fixed<7,3> data_t;
# 19 "./cordiccart2pol.h"
__attribute__((sdx_kernel("cordiccart2pol", 0))) void cordiccart2pol(data_t x, data_t y, data_t * r, data_t * theta);
void init_cart2pol_LUTs(data_t my_LUT_th[(1 << (7 << 1))], data_t my_LUT_r[(1 << (7 << 1))]);
# 2 "cordiccart2pol.cpp" 2
# 1 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/math.h" 1 3
# 36 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/math.h" 3
# 1 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 1 3
# 40 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3

# 1 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 1 3
# 236 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 258 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 508 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 3
# 1 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/os_defines.h" 1 3
# 39 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/os_defines.h" 3
# 1 "/usr/include/features.h" 1 3 4
# 394 "/usr/include/features.h" 3 4
# 1 "/usr/include/features-time64.h" 1 3 4
# 20 "/usr/include/features-time64.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 21 "/usr/include/features-time64.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 22 "/usr/include/features-time64.h" 2 3 4
# 395 "/usr/include/features.h" 2 3 4
# 480 "/usr/include/features.h" 3 4
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 481 "/usr/include/features.h" 2 3 4
# 502 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 576 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 577 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 578 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 503 "/usr/include/features.h" 2 3 4
# 526 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 527 "/usr/include/features.h" 2 3 4
# 40 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/os_defines.h" 2 3
# 509 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 2 3


# 1 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/cpu_defines.h" 1 3
# 512 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 2 3
# 42 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 2 3
# 1 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 1 3
# 36 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 3
# 67 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 3
extern "C++" {

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };





  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 261 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 3
template<> struct __is_integer<__int128> { enum { __value = 1 }; typedef __true_type __type; }; template<> struct __is_integer<unsigned __int128> { enum { __value = 1 }; typedef __true_type __type; };
# 278 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 408 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };



  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
    { return __it; }


}
}
# 43 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 2 3
# 1 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/type_traits.h" 1 3
# 33 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/type_traits.h" 3




extern "C++" {

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }


  inline bool
  __is_null_pointer(std::nullptr_t)
  { return true; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
}
# 44 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 2 3

# 1 "/usr/include/math.h" 1 3 4
# 27 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/math.h" 2 3 4






extern "C" {



# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef long int __suseconds64_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 38 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libm-simd-decl-stubs.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 2 3 4
# 41 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 119 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 214 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef float _Float32;
# 251 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float64;
# 268 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float32x;
# 285 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef long double _Float64x;
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 44 "/usr/include/math.h" 2 3 4
# 152 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/flt-eval-method.h" 1 3 4
# 153 "/usr/include/math.h" 2 3 4
# 163 "/usr/include/math.h" 3 4
typedef float float_t;
typedef double double_t;
# 204 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fp-logb.h" 1 3 4
# 205 "/usr/include/math.h" 2 3 4
# 247 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fp-fast.h" 1 3 4
# 248 "/usr/include/math.h" 2 3 4



enum
  {
    FP_INT_UPWARD =

      0,
    FP_INT_DOWNWARD =

      1,
    FP_INT_TOWARDZERO =

      2,
    FP_INT_TONEARESTFROMZERO =

      3,
    FP_INT_TONEAREST =

      4,
  };
# 312 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassify (double __value) noexcept (true)
     __attribute__ ((__const__));


extern int __signbit (double __value) noexcept (true)
     __attribute__ ((__const__));



extern int __isinf (double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __finite (double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __isnan (double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __iseqsig (double __x, double __y) noexcept (true);


extern int __issignaling (double __value) noexcept (true)
     __attribute__ ((__const__));
# 313 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern double acos (double __x) noexcept (true); extern double __acos (double __x) noexcept (true);

 extern double asin (double __x) noexcept (true); extern double __asin (double __x) noexcept (true);

 extern double atan (double __x) noexcept (true); extern double __atan (double __x) noexcept (true);

 extern double atan2 (double __y, double __x) noexcept (true); extern double __atan2 (double __y, double __x) noexcept (true);


 extern double cos (double __x) noexcept (true); extern double __cos (double __x) noexcept (true);

 extern double sin (double __x) noexcept (true); extern double __sin (double __x) noexcept (true);

 extern double tan (double __x) noexcept (true); extern double __tan (double __x) noexcept (true);




 extern double cosh (double __x) noexcept (true); extern double __cosh (double __x) noexcept (true);

 extern double sinh (double __x) noexcept (true); extern double __sinh (double __x) noexcept (true);

 extern double tanh (double __x) noexcept (true); extern double __tanh (double __x) noexcept (true);



 extern void sincos (double __x, double *__sinx, double *__cosx) noexcept (true); extern void __sincos (double __x, double *__sinx, double *__cosx) noexcept (true);





 extern double acosh (double __x) noexcept (true); extern double __acosh (double __x) noexcept (true);

 extern double asinh (double __x) noexcept (true); extern double __asinh (double __x) noexcept (true);

 extern double atanh (double __x) noexcept (true); extern double __atanh (double __x) noexcept (true);





 extern double exp (double __x) noexcept (true); extern double __exp (double __x) noexcept (true);


extern double frexp (double __x, int *__exponent) noexcept (true); extern double __frexp (double __x, int *__exponent) noexcept (true);


extern double ldexp (double __x, int __exponent) noexcept (true); extern double __ldexp (double __x, int __exponent) noexcept (true);


 extern double log (double __x) noexcept (true); extern double __log (double __x) noexcept (true);


 extern double log10 (double __x) noexcept (true); extern double __log10 (double __x) noexcept (true);


extern double modf (double __x, double *__iptr) noexcept (true); extern double __modf (double __x, double *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



 extern double exp10 (double __x) noexcept (true); extern double __exp10 (double __x) noexcept (true);




 extern double expm1 (double __x) noexcept (true); extern double __expm1 (double __x) noexcept (true);


 extern double log1p (double __x) noexcept (true); extern double __log1p (double __x) noexcept (true);


extern double logb (double __x) noexcept (true); extern double __logb (double __x) noexcept (true);




 extern double exp2 (double __x) noexcept (true); extern double __exp2 (double __x) noexcept (true);


 extern double log2 (double __x) noexcept (true); extern double __log2 (double __x) noexcept (true);






 extern double pow (double __x, double __y) noexcept (true); extern double __pow (double __x, double __y) noexcept (true);


extern double sqrt (double __x) noexcept (true); extern double __sqrt (double __x) noexcept (true);



 extern double hypot (double __x, double __y) noexcept (true); extern double __hypot (double __x, double __y) noexcept (true);




 extern double cbrt (double __x) noexcept (true); extern double __cbrt (double __x) noexcept (true);






extern double ceil (double __x) noexcept (true) __attribute__ ((__const__)); extern double __ceil (double __x) noexcept (true) __attribute__ ((__const__));


extern double fabs (double __x) noexcept (true) __attribute__ ((__const__)); extern double __fabs (double __x) noexcept (true) __attribute__ ((__const__));


extern double floor (double __x) noexcept (true) __attribute__ ((__const__)); extern double __floor (double __x) noexcept (true) __attribute__ ((__const__));


extern double fmod (double __x, double __y) noexcept (true); extern double __fmod (double __x, double __y) noexcept (true);
# 183 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int finite (double __value) noexcept (true)
  __attribute__ ((__const__));


extern double drem (double __x, double __y) noexcept (true); extern double __drem (double __x, double __y) noexcept (true);



extern double significand (double __x) noexcept (true); extern double __significand (double __x) noexcept (true);






extern double copysign (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __copysign (double __x, double __y) noexcept (true) __attribute__ ((__const__));




extern double nan (const char *__tagb) noexcept (true); extern double __nan (const char *__tagb) noexcept (true);
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double j0 (double) noexcept (true); extern double __j0 (double) noexcept (true);
extern double j1 (double) noexcept (true); extern double __j1 (double) noexcept (true);
extern double jn (int, double) noexcept (true); extern double __jn (int, double) noexcept (true);
extern double y0 (double) noexcept (true); extern double __y0 (double) noexcept (true);
extern double y1 (double) noexcept (true); extern double __y1 (double) noexcept (true);
extern double yn (int, double) noexcept (true); extern double __yn (int, double) noexcept (true);





 extern double erf (double) noexcept (true); extern double __erf (double) noexcept (true);
 extern double erfc (double) noexcept (true); extern double __erfc (double) noexcept (true);
extern double lgamma (double) noexcept (true); extern double __lgamma (double) noexcept (true);




extern double tgamma (double) noexcept (true); extern double __tgamma (double) noexcept (true);





extern double gamma (double) noexcept (true); extern double __gamma (double) noexcept (true);







extern double lgamma_r (double, int *__signgamp) noexcept (true); extern double __lgamma_r (double, int *__signgamp) noexcept (true);






extern double rint (double __x) noexcept (true); extern double __rint (double __x) noexcept (true);


extern double nextafter (double __x, double __y) noexcept (true); extern double __nextafter (double __x, double __y) noexcept (true);

extern double nexttoward (double __x, long double __y) noexcept (true); extern double __nexttoward (double __x, long double __y) noexcept (true);




extern double nextdown (double __x) noexcept (true); extern double __nextdown (double __x) noexcept (true);

extern double nextup (double __x) noexcept (true); extern double __nextup (double __x) noexcept (true);



extern double remainder (double __x, double __y) noexcept (true); extern double __remainder (double __x, double __y) noexcept (true);



extern double scalbn (double __x, int __n) noexcept (true); extern double __scalbn (double __x, int __n) noexcept (true);



extern int ilogb (double __x) noexcept (true); extern int __ilogb (double __x) noexcept (true);




extern long int llogb (double __x) noexcept (true); extern long int __llogb (double __x) noexcept (true);




extern double scalbln (double __x, long int __n) noexcept (true); extern double __scalbln (double __x, long int __n) noexcept (true);



extern double nearbyint (double __x) noexcept (true); extern double __nearbyint (double __x) noexcept (true);



extern double round (double __x) noexcept (true) __attribute__ ((__const__)); extern double __round (double __x) noexcept (true) __attribute__ ((__const__));



extern double trunc (double __x) noexcept (true) __attribute__ ((__const__)); extern double __trunc (double __x) noexcept (true) __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) noexcept (true); extern double __remquo (double __x, double __y, int *__quo) noexcept (true);






extern long int lrint (double __x) noexcept (true); extern long int __lrint (double __x) noexcept (true);
__extension__
extern long long int llrint (double __x) noexcept (true); extern long long int __llrint (double __x) noexcept (true);



extern long int lround (double __x) noexcept (true); extern long int __lround (double __x) noexcept (true);
__extension__
extern long long int llround (double __x) noexcept (true); extern long long int __llround (double __x) noexcept (true);



extern double fdim (double __x, double __y) noexcept (true); extern double __fdim (double __x, double __y) noexcept (true);



extern double fmax (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmax (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fmin (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmin (double __x, double __y) noexcept (true) __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) noexcept (true); extern double __fma (double __x, double __y, double __z) noexcept (true);




extern double roundeven (double __x) noexcept (true) __attribute__ ((__const__)); extern double __roundeven (double __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfp (double __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfp (double __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfp (double __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfp (double __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpx (double __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpx (double __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpx (double __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpx (double __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalize (double *__cx, const double *__x) noexcept (true);






extern double fmaxmag (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmaxmag (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fminmag (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fminmag (double __x, double __y) noexcept (true) __attribute__ ((__const__));




extern double fmaximum (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmaximum (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fminimum (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fminimum (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fmaximum_num (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmaximum_num (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fminimum_num (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fminimum_num (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fmaximum_mag (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmaximum_mag (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fminimum_mag (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fminimum_mag (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fmaximum_mag_num (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmaximum_mag_num (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fminimum_mag_num (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fminimum_mag_num (double __x, double __y) noexcept (true) __attribute__ ((__const__));




extern int totalorder (const double *__x, const double *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermag (const double *__x, const double *__y) noexcept (true)

     __attribute__ ((__pure__));


extern double getpayload (const double *__x) noexcept (true); extern double __getpayload (const double *__x) noexcept (true);


extern int setpayload (double *__x, double __payload) noexcept (true);


extern int setpayloadsig (double *__x, double __payload) noexcept (true);







extern double scalb (double __x, double __n) noexcept (true); extern double __scalb (double __x, double __n) noexcept (true);
# 314 "/usr/include/math.h" 2 3 4
# 329 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyf (float __value) noexcept (true)
     __attribute__ ((__const__));


extern int __signbitf (float __value) noexcept (true)
     __attribute__ ((__const__));



extern int __isinff (float __value) noexcept (true)
  __attribute__ ((__const__));


extern int __finitef (float __value) noexcept (true)
  __attribute__ ((__const__));


extern int __isnanf (float __value) noexcept (true)
  __attribute__ ((__const__));


extern int __iseqsigf (float __x, float __y) noexcept (true);


extern int __issignalingf (float __value) noexcept (true)
     __attribute__ ((__const__));
# 330 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern float acosf (float __x) noexcept (true); extern float __acosf (float __x) noexcept (true);

 extern float asinf (float __x) noexcept (true); extern float __asinf (float __x) noexcept (true);

 extern float atanf (float __x) noexcept (true); extern float __atanf (float __x) noexcept (true);

 extern float atan2f (float __y, float __x) noexcept (true); extern float __atan2f (float __y, float __x) noexcept (true);


 extern float cosf (float __x) noexcept (true); extern float __cosf (float __x) noexcept (true);

 extern float sinf (float __x) noexcept (true); extern float __sinf (float __x) noexcept (true);

 extern float tanf (float __x) noexcept (true); extern float __tanf (float __x) noexcept (true);




 extern float coshf (float __x) noexcept (true); extern float __coshf (float __x) noexcept (true);

 extern float sinhf (float __x) noexcept (true); extern float __sinhf (float __x) noexcept (true);

 extern float tanhf (float __x) noexcept (true); extern float __tanhf (float __x) noexcept (true);



 extern void sincosf (float __x, float *__sinx, float *__cosx) noexcept (true); extern void __sincosf (float __x, float *__sinx, float *__cosx) noexcept (true);





 extern float acoshf (float __x) noexcept (true); extern float __acoshf (float __x) noexcept (true);

 extern float asinhf (float __x) noexcept (true); extern float __asinhf (float __x) noexcept (true);

 extern float atanhf (float __x) noexcept (true); extern float __atanhf (float __x) noexcept (true);





 extern float expf (float __x) noexcept (true); extern float __expf (float __x) noexcept (true);


extern float frexpf (float __x, int *__exponent) noexcept (true); extern float __frexpf (float __x, int *__exponent) noexcept (true);


extern float ldexpf (float __x, int __exponent) noexcept (true); extern float __ldexpf (float __x, int __exponent) noexcept (true);


 extern float logf (float __x) noexcept (true); extern float __logf (float __x) noexcept (true);


 extern float log10f (float __x) noexcept (true); extern float __log10f (float __x) noexcept (true);


extern float modff (float __x, float *__iptr) noexcept (true); extern float __modff (float __x, float *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



 extern float exp10f (float __x) noexcept (true); extern float __exp10f (float __x) noexcept (true);




 extern float expm1f (float __x) noexcept (true); extern float __expm1f (float __x) noexcept (true);


 extern float log1pf (float __x) noexcept (true); extern float __log1pf (float __x) noexcept (true);


extern float logbf (float __x) noexcept (true); extern float __logbf (float __x) noexcept (true);




 extern float exp2f (float __x) noexcept (true); extern float __exp2f (float __x) noexcept (true);


 extern float log2f (float __x) noexcept (true); extern float __log2f (float __x) noexcept (true);






 extern float powf (float __x, float __y) noexcept (true); extern float __powf (float __x, float __y) noexcept (true);


extern float sqrtf (float __x) noexcept (true); extern float __sqrtf (float __x) noexcept (true);



 extern float hypotf (float __x, float __y) noexcept (true); extern float __hypotf (float __x, float __y) noexcept (true);




 extern float cbrtf (float __x) noexcept (true); extern float __cbrtf (float __x) noexcept (true);






extern float ceilf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __ceilf (float __x) noexcept (true) __attribute__ ((__const__));


extern float fabsf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __fabsf (float __x) noexcept (true) __attribute__ ((__const__));


extern float floorf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __floorf (float __x) noexcept (true) __attribute__ ((__const__));


extern float fmodf (float __x, float __y) noexcept (true); extern float __fmodf (float __x, float __y) noexcept (true);
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinff (float __value) noexcept (true)
  __attribute__ ((__const__));




extern int finitef (float __value) noexcept (true)
  __attribute__ ((__const__));


extern float dremf (float __x, float __y) noexcept (true); extern float __dremf (float __x, float __y) noexcept (true);



extern float significandf (float __x) noexcept (true); extern float __significandf (float __x) noexcept (true);






extern float copysignf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) noexcept (true) __attribute__ ((__const__));




extern float nanf (const char *__tagb) noexcept (true); extern float __nanf (const char *__tagb) noexcept (true);
# 213 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanf (float __value) noexcept (true)
  __attribute__ ((__const__));





extern float j0f (float) noexcept (true); extern float __j0f (float) noexcept (true);
extern float j1f (float) noexcept (true); extern float __j1f (float) noexcept (true);
extern float jnf (int, float) noexcept (true); extern float __jnf (int, float) noexcept (true);
extern float y0f (float) noexcept (true); extern float __y0f (float) noexcept (true);
extern float y1f (float) noexcept (true); extern float __y1f (float) noexcept (true);
extern float ynf (int, float) noexcept (true); extern float __ynf (int, float) noexcept (true);





 extern float erff (float) noexcept (true); extern float __erff (float) noexcept (true);
 extern float erfcf (float) noexcept (true); extern float __erfcf (float) noexcept (true);
extern float lgammaf (float) noexcept (true); extern float __lgammaf (float) noexcept (true);




extern float tgammaf (float) noexcept (true); extern float __tgammaf (float) noexcept (true);





extern float gammaf (float) noexcept (true); extern float __gammaf (float) noexcept (true);







extern float lgammaf_r (float, int *__signgamp) noexcept (true); extern float __lgammaf_r (float, int *__signgamp) noexcept (true);






extern float rintf (float __x) noexcept (true); extern float __rintf (float __x) noexcept (true);


extern float nextafterf (float __x, float __y) noexcept (true); extern float __nextafterf (float __x, float __y) noexcept (true);

extern float nexttowardf (float __x, long double __y) noexcept (true); extern float __nexttowardf (float __x, long double __y) noexcept (true);




extern float nextdownf (float __x) noexcept (true); extern float __nextdownf (float __x) noexcept (true);

extern float nextupf (float __x) noexcept (true); extern float __nextupf (float __x) noexcept (true);



extern float remainderf (float __x, float __y) noexcept (true); extern float __remainderf (float __x, float __y) noexcept (true);



extern float scalbnf (float __x, int __n) noexcept (true); extern float __scalbnf (float __x, int __n) noexcept (true);



extern int ilogbf (float __x) noexcept (true); extern int __ilogbf (float __x) noexcept (true);




extern long int llogbf (float __x) noexcept (true); extern long int __llogbf (float __x) noexcept (true);




extern float scalblnf (float __x, long int __n) noexcept (true); extern float __scalblnf (float __x, long int __n) noexcept (true);



extern float nearbyintf (float __x) noexcept (true); extern float __nearbyintf (float __x) noexcept (true);



extern float roundf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __roundf (float __x) noexcept (true) __attribute__ ((__const__));



extern float truncf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __truncf (float __x) noexcept (true) __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) noexcept (true); extern float __remquof (float __x, float __y, int *__quo) noexcept (true);






extern long int lrintf (float __x) noexcept (true); extern long int __lrintf (float __x) noexcept (true);
__extension__
extern long long int llrintf (float __x) noexcept (true); extern long long int __llrintf (float __x) noexcept (true);



extern long int lroundf (float __x) noexcept (true); extern long int __lroundf (float __x) noexcept (true);
__extension__
extern long long int llroundf (float __x) noexcept (true); extern long long int __llroundf (float __x) noexcept (true);



extern float fdimf (float __x, float __y) noexcept (true); extern float __fdimf (float __x, float __y) noexcept (true);



extern float fmaxf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fminf (float __x, float __y) noexcept (true) __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) noexcept (true); extern float __fmaf (float __x, float __y, float __z) noexcept (true);




extern float roundevenf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __roundevenf (float __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf (float __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf (float __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpf (float __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf (float __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxf (float __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf (float __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxf (float __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf (float __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizef (float *__cx, const float *__x) noexcept (true);






extern float fmaxmagf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fmaxmagf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminmagf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fminmagf (float __x, float __y) noexcept (true) __attribute__ ((__const__));




extern float fmaximumf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fmaximumf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminimumf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fminimumf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fmaximum_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fmaximum_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminimum_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fminimum_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fmaximum_magf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fmaximum_magf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminimum_magf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fminimum_magf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fmaximum_mag_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fmaximum_mag_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminimum_mag_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fminimum_mag_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf (const float *__x, const float *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf (const float *__x, const float *__y) noexcept (true)

     __attribute__ ((__pure__));


extern float getpayloadf (const float *__x) noexcept (true); extern float __getpayloadf (const float *__x) noexcept (true);


extern int setpayloadf (float *__x, float __payload) noexcept (true);


extern int setpayloadsigf (float *__x, float __payload) noexcept (true);







extern float scalbf (float __x, float __n) noexcept (true); extern float __scalbf (float __x, float __n) noexcept (true);
# 331 "/usr/include/math.h" 2 3 4
# 398 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyl (long double __value) noexcept (true)
     __attribute__ ((__const__));


extern int __signbitl (long double __value) noexcept (true)
     __attribute__ ((__const__));



extern int __isinfl (long double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __finitel (long double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __isnanl (long double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __iseqsigl (long double __x, long double __y) noexcept (true);


extern int __issignalingl (long double __value) noexcept (true)
     __attribute__ ((__const__));
# 399 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern long double acosl (long double __x) noexcept (true); extern long double __acosl (long double __x) noexcept (true);

 extern long double asinl (long double __x) noexcept (true); extern long double __asinl (long double __x) noexcept (true);

 extern long double atanl (long double __x) noexcept (true); extern long double __atanl (long double __x) noexcept (true);

 extern long double atan2l (long double __y, long double __x) noexcept (true); extern long double __atan2l (long double __y, long double __x) noexcept (true);


 extern long double cosl (long double __x) noexcept (true); extern long double __cosl (long double __x) noexcept (true);

 extern long double sinl (long double __x) noexcept (true); extern long double __sinl (long double __x) noexcept (true);

 extern long double tanl (long double __x) noexcept (true); extern long double __tanl (long double __x) noexcept (true);




 extern long double coshl (long double __x) noexcept (true); extern long double __coshl (long double __x) noexcept (true);

 extern long double sinhl (long double __x) noexcept (true); extern long double __sinhl (long double __x) noexcept (true);

 extern long double tanhl (long double __x) noexcept (true); extern long double __tanhl (long double __x) noexcept (true);



 extern void sincosl (long double __x, long double *__sinx, long double *__cosx) noexcept (true); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) noexcept (true);





 extern long double acoshl (long double __x) noexcept (true); extern long double __acoshl (long double __x) noexcept (true);

 extern long double asinhl (long double __x) noexcept (true); extern long double __asinhl (long double __x) noexcept (true);

 extern long double atanhl (long double __x) noexcept (true); extern long double __atanhl (long double __x) noexcept (true);





 extern long double expl (long double __x) noexcept (true); extern long double __expl (long double __x) noexcept (true);


extern long double frexpl (long double __x, int *__exponent) noexcept (true); extern long double __frexpl (long double __x, int *__exponent) noexcept (true);


extern long double ldexpl (long double __x, int __exponent) noexcept (true); extern long double __ldexpl (long double __x, int __exponent) noexcept (true);


 extern long double logl (long double __x) noexcept (true); extern long double __logl (long double __x) noexcept (true);


 extern long double log10l (long double __x) noexcept (true); extern long double __log10l (long double __x) noexcept (true);


extern long double modfl (long double __x, long double *__iptr) noexcept (true); extern long double __modfl (long double __x, long double *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



 extern long double exp10l (long double __x) noexcept (true); extern long double __exp10l (long double __x) noexcept (true);




 extern long double expm1l (long double __x) noexcept (true); extern long double __expm1l (long double __x) noexcept (true);


 extern long double log1pl (long double __x) noexcept (true); extern long double __log1pl (long double __x) noexcept (true);


extern long double logbl (long double __x) noexcept (true); extern long double __logbl (long double __x) noexcept (true);




 extern long double exp2l (long double __x) noexcept (true); extern long double __exp2l (long double __x) noexcept (true);


 extern long double log2l (long double __x) noexcept (true); extern long double __log2l (long double __x) noexcept (true);






 extern long double powl (long double __x, long double __y) noexcept (true); extern long double __powl (long double __x, long double __y) noexcept (true);


extern long double sqrtl (long double __x) noexcept (true); extern long double __sqrtl (long double __x) noexcept (true);



 extern long double hypotl (long double __x, long double __y) noexcept (true); extern long double __hypotl (long double __x, long double __y) noexcept (true);




 extern long double cbrtl (long double __x) noexcept (true); extern long double __cbrtl (long double __x) noexcept (true);






extern long double ceill (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __ceill (long double __x) noexcept (true) __attribute__ ((__const__));


extern long double fabsl (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __fabsl (long double __x) noexcept (true) __attribute__ ((__const__));


extern long double floorl (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __floorl (long double __x) noexcept (true) __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) noexcept (true); extern long double __fmodl (long double __x, long double __y) noexcept (true);
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinfl (long double __value) noexcept (true)
  __attribute__ ((__const__));




extern int finitel (long double __value) noexcept (true)
  __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) noexcept (true); extern long double __dreml (long double __x, long double __y) noexcept (true);



extern long double significandl (long double __x) noexcept (true); extern long double __significandl (long double __x) noexcept (true);






extern long double copysignl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));




extern long double nanl (const char *__tagb) noexcept (true); extern long double __nanl (const char *__tagb) noexcept (true);
# 213 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanl (long double __value) noexcept (true)
  __attribute__ ((__const__));





extern long double j0l (long double) noexcept (true); extern long double __j0l (long double) noexcept (true);
extern long double j1l (long double) noexcept (true); extern long double __j1l (long double) noexcept (true);
extern long double jnl (int, long double) noexcept (true); extern long double __jnl (int, long double) noexcept (true);
extern long double y0l (long double) noexcept (true); extern long double __y0l (long double) noexcept (true);
extern long double y1l (long double) noexcept (true); extern long double __y1l (long double) noexcept (true);
extern long double ynl (int, long double) noexcept (true); extern long double __ynl (int, long double) noexcept (true);





 extern long double erfl (long double) noexcept (true); extern long double __erfl (long double) noexcept (true);
 extern long double erfcl (long double) noexcept (true); extern long double __erfcl (long double) noexcept (true);
extern long double lgammal (long double) noexcept (true); extern long double __lgammal (long double) noexcept (true);




extern long double tgammal (long double) noexcept (true); extern long double __tgammal (long double) noexcept (true);





extern long double gammal (long double) noexcept (true); extern long double __gammal (long double) noexcept (true);







extern long double lgammal_r (long double, int *__signgamp) noexcept (true); extern long double __lgammal_r (long double, int *__signgamp) noexcept (true);






extern long double rintl (long double __x) noexcept (true); extern long double __rintl (long double __x) noexcept (true);


extern long double nextafterl (long double __x, long double __y) noexcept (true); extern long double __nextafterl (long double __x, long double __y) noexcept (true);

extern long double nexttowardl (long double __x, long double __y) noexcept (true); extern long double __nexttowardl (long double __x, long double __y) noexcept (true);




extern long double nextdownl (long double __x) noexcept (true); extern long double __nextdownl (long double __x) noexcept (true);

extern long double nextupl (long double __x) noexcept (true); extern long double __nextupl (long double __x) noexcept (true);



extern long double remainderl (long double __x, long double __y) noexcept (true); extern long double __remainderl (long double __x, long double __y) noexcept (true);



extern long double scalbnl (long double __x, int __n) noexcept (true); extern long double __scalbnl (long double __x, int __n) noexcept (true);



extern int ilogbl (long double __x) noexcept (true); extern int __ilogbl (long double __x) noexcept (true);




extern long int llogbl (long double __x) noexcept (true); extern long int __llogbl (long double __x) noexcept (true);




extern long double scalblnl (long double __x, long int __n) noexcept (true); extern long double __scalblnl (long double __x, long int __n) noexcept (true);



extern long double nearbyintl (long double __x) noexcept (true); extern long double __nearbyintl (long double __x) noexcept (true);



extern long double roundl (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __roundl (long double __x) noexcept (true) __attribute__ ((__const__));



extern long double truncl (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __truncl (long double __x) noexcept (true) __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) noexcept (true); extern long double __remquol (long double __x, long double __y, int *__quo) noexcept (true);






extern long int lrintl (long double __x) noexcept (true); extern long int __lrintl (long double __x) noexcept (true);
__extension__
extern long long int llrintl (long double __x) noexcept (true); extern long long int __llrintl (long double __x) noexcept (true);



extern long int lroundl (long double __x) noexcept (true); extern long int __lroundl (long double __x) noexcept (true);
__extension__
extern long long int llroundl (long double __x) noexcept (true); extern long long int __llroundl (long double __x) noexcept (true);



extern long double fdiml (long double __x, long double __y) noexcept (true); extern long double __fdiml (long double __x, long double __y) noexcept (true);



extern long double fmaxl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) noexcept (true); extern long double __fmal (long double __x, long double __y, long double __z) noexcept (true);




extern long double roundevenl (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __roundevenl (long double __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpl (long double __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpl (long double __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpl (long double __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpl (long double __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxl (long double __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxl (long double __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxl (long double __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxl (long double __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizel (long double *__cx, const long double *__x) noexcept (true);






extern long double fmaxmagl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fmaxmagl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminmagl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fminmagl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));




extern long double fmaximuml (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fmaximuml (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminimuml (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fminimuml (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fmaximum_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fmaximum_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminimum_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fminimum_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fmaximum_magl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fmaximum_magl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminimum_magl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fminimum_magl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fmaximum_mag_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fmaximum_mag_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminimum_mag_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fminimum_mag_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderl (const long double *__x, const long double *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagl (const long double *__x, const long double *__y) noexcept (true)

     __attribute__ ((__pure__));


extern long double getpayloadl (const long double *__x) noexcept (true); extern long double __getpayloadl (const long double *__x) noexcept (true);


extern int setpayloadl (long double *__x, long double __payload) noexcept (true);


extern int setpayloadsigl (long double *__x, long double __payload) noexcept (true);







extern long double scalbl (long double __x, long double __n) noexcept (true); extern long double __scalbl (long double __x, long double __n) noexcept (true);
# 400 "/usr/include/math.h" 2 3 4
# 450 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern _Float32 acosf32 (_Float32 __x) noexcept (true); extern _Float32 __acosf32 (_Float32 __x) noexcept (true);

 extern _Float32 asinf32 (_Float32 __x) noexcept (true); extern _Float32 __asinf32 (_Float32 __x) noexcept (true);

 extern _Float32 atanf32 (_Float32 __x) noexcept (true); extern _Float32 __atanf32 (_Float32 __x) noexcept (true);

 extern _Float32 atan2f32 (_Float32 __y, _Float32 __x) noexcept (true); extern _Float32 __atan2f32 (_Float32 __y, _Float32 __x) noexcept (true);


 extern _Float32 cosf32 (_Float32 __x) noexcept (true); extern _Float32 __cosf32 (_Float32 __x) noexcept (true);

 extern _Float32 sinf32 (_Float32 __x) noexcept (true); extern _Float32 __sinf32 (_Float32 __x) noexcept (true);

 extern _Float32 tanf32 (_Float32 __x) noexcept (true); extern _Float32 __tanf32 (_Float32 __x) noexcept (true);




 extern _Float32 coshf32 (_Float32 __x) noexcept (true); extern _Float32 __coshf32 (_Float32 __x) noexcept (true);

 extern _Float32 sinhf32 (_Float32 __x) noexcept (true); extern _Float32 __sinhf32 (_Float32 __x) noexcept (true);

 extern _Float32 tanhf32 (_Float32 __x) noexcept (true); extern _Float32 __tanhf32 (_Float32 __x) noexcept (true);



 extern void sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) noexcept (true); extern void __sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) noexcept (true);





 extern _Float32 acoshf32 (_Float32 __x) noexcept (true); extern _Float32 __acoshf32 (_Float32 __x) noexcept (true);

 extern _Float32 asinhf32 (_Float32 __x) noexcept (true); extern _Float32 __asinhf32 (_Float32 __x) noexcept (true);

 extern _Float32 atanhf32 (_Float32 __x) noexcept (true); extern _Float32 __atanhf32 (_Float32 __x) noexcept (true);





 extern _Float32 expf32 (_Float32 __x) noexcept (true); extern _Float32 __expf32 (_Float32 __x) noexcept (true);


extern _Float32 frexpf32 (_Float32 __x, int *__exponent) noexcept (true); extern _Float32 __frexpf32 (_Float32 __x, int *__exponent) noexcept (true);


extern _Float32 ldexpf32 (_Float32 __x, int __exponent) noexcept (true); extern _Float32 __ldexpf32 (_Float32 __x, int __exponent) noexcept (true);


 extern _Float32 logf32 (_Float32 __x) noexcept (true); extern _Float32 __logf32 (_Float32 __x) noexcept (true);


 extern _Float32 log10f32 (_Float32 __x) noexcept (true); extern _Float32 __log10f32 (_Float32 __x) noexcept (true);


extern _Float32 modff32 (_Float32 __x, _Float32 *__iptr) noexcept (true); extern _Float32 __modff32 (_Float32 __x, _Float32 *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



 extern _Float32 exp10f32 (_Float32 __x) noexcept (true); extern _Float32 __exp10f32 (_Float32 __x) noexcept (true);




 extern _Float32 expm1f32 (_Float32 __x) noexcept (true); extern _Float32 __expm1f32 (_Float32 __x) noexcept (true);


 extern _Float32 log1pf32 (_Float32 __x) noexcept (true); extern _Float32 __log1pf32 (_Float32 __x) noexcept (true);


extern _Float32 logbf32 (_Float32 __x) noexcept (true); extern _Float32 __logbf32 (_Float32 __x) noexcept (true);




 extern _Float32 exp2f32 (_Float32 __x) noexcept (true); extern _Float32 __exp2f32 (_Float32 __x) noexcept (true);


 extern _Float32 log2f32 (_Float32 __x) noexcept (true); extern _Float32 __log2f32 (_Float32 __x) noexcept (true);






 extern _Float32 powf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __powf32 (_Float32 __x, _Float32 __y) noexcept (true);


extern _Float32 sqrtf32 (_Float32 __x) noexcept (true); extern _Float32 __sqrtf32 (_Float32 __x) noexcept (true);



 extern _Float32 hypotf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __hypotf32 (_Float32 __x, _Float32 __y) noexcept (true);




 extern _Float32 cbrtf32 (_Float32 __x) noexcept (true); extern _Float32 __cbrtf32 (_Float32 __x) noexcept (true);






extern _Float32 ceilf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __ceilf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));


extern _Float32 fabsf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fabsf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));


extern _Float32 floorf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __floorf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));


extern _Float32 fmodf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __fmodf32 (_Float32 __x, _Float32 __y) noexcept (true);
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 copysignf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __copysignf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));




extern _Float32 nanf32 (const char *__tagb) noexcept (true); extern _Float32 __nanf32 (const char *__tagb) noexcept (true);
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 j0f32 (_Float32) noexcept (true); extern _Float32 __j0f32 (_Float32) noexcept (true);
extern _Float32 j1f32 (_Float32) noexcept (true); extern _Float32 __j1f32 (_Float32) noexcept (true);
extern _Float32 jnf32 (int, _Float32) noexcept (true); extern _Float32 __jnf32 (int, _Float32) noexcept (true);
extern _Float32 y0f32 (_Float32) noexcept (true); extern _Float32 __y0f32 (_Float32) noexcept (true);
extern _Float32 y1f32 (_Float32) noexcept (true); extern _Float32 __y1f32 (_Float32) noexcept (true);
extern _Float32 ynf32 (int, _Float32) noexcept (true); extern _Float32 __ynf32 (int, _Float32) noexcept (true);





 extern _Float32 erff32 (_Float32) noexcept (true); extern _Float32 __erff32 (_Float32) noexcept (true);
 extern _Float32 erfcf32 (_Float32) noexcept (true); extern _Float32 __erfcf32 (_Float32) noexcept (true);
extern _Float32 lgammaf32 (_Float32) noexcept (true); extern _Float32 __lgammaf32 (_Float32) noexcept (true);




extern _Float32 tgammaf32 (_Float32) noexcept (true); extern _Float32 __tgammaf32 (_Float32) noexcept (true);
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 lgammaf32_r (_Float32, int *__signgamp) noexcept (true); extern _Float32 __lgammaf32_r (_Float32, int *__signgamp) noexcept (true);






extern _Float32 rintf32 (_Float32 __x) noexcept (true); extern _Float32 __rintf32 (_Float32 __x) noexcept (true);


extern _Float32 nextafterf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __nextafterf32 (_Float32 __x, _Float32 __y) noexcept (true);






extern _Float32 nextdownf32 (_Float32 __x) noexcept (true); extern _Float32 __nextdownf32 (_Float32 __x) noexcept (true);

extern _Float32 nextupf32 (_Float32 __x) noexcept (true); extern _Float32 __nextupf32 (_Float32 __x) noexcept (true);



extern _Float32 remainderf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __remainderf32 (_Float32 __x, _Float32 __y) noexcept (true);



extern _Float32 scalbnf32 (_Float32 __x, int __n) noexcept (true); extern _Float32 __scalbnf32 (_Float32 __x, int __n) noexcept (true);



extern int ilogbf32 (_Float32 __x) noexcept (true); extern int __ilogbf32 (_Float32 __x) noexcept (true);




extern long int llogbf32 (_Float32 __x) noexcept (true); extern long int __llogbf32 (_Float32 __x) noexcept (true);




extern _Float32 scalblnf32 (_Float32 __x, long int __n) noexcept (true); extern _Float32 __scalblnf32 (_Float32 __x, long int __n) noexcept (true);



extern _Float32 nearbyintf32 (_Float32 __x) noexcept (true); extern _Float32 __nearbyintf32 (_Float32 __x) noexcept (true);



extern _Float32 roundf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __roundf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));



extern _Float32 truncf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __truncf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));




extern _Float32 remquof32 (_Float32 __x, _Float32 __y, int *__quo) noexcept (true); extern _Float32 __remquof32 (_Float32 __x, _Float32 __y, int *__quo) noexcept (true);






extern long int lrintf32 (_Float32 __x) noexcept (true); extern long int __lrintf32 (_Float32 __x) noexcept (true);
__extension__
extern long long int llrintf32 (_Float32 __x) noexcept (true); extern long long int __llrintf32 (_Float32 __x) noexcept (true);



extern long int lroundf32 (_Float32 __x) noexcept (true); extern long int __lroundf32 (_Float32 __x) noexcept (true);
__extension__
extern long long int llroundf32 (_Float32 __x) noexcept (true); extern long long int __llroundf32 (_Float32 __x) noexcept (true);



extern _Float32 fdimf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __fdimf32 (_Float32 __x, _Float32 __y) noexcept (true);



extern _Float32 fmaxf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fmaxf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fminf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));



extern _Float32 fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) noexcept (true); extern _Float32 __fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) noexcept (true);




extern _Float32 roundevenf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __roundevenf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizef32 (_Float32 *__cx, const _Float32 *__x) noexcept (true);






extern _Float32 fmaxmagf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fmaxmagf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminmagf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fminmagf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));




extern _Float32 fmaximumf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fmaximumf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminimumf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fminimumf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fmaximum_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fmaximum_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminimum_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fminimum_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fmaximum_magf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fmaximum_magf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminimum_magf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fminimum_magf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fmaximum_mag_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fmaximum_mag_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminimum_mag_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fminimum_mag_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf32 (const _Float32 *__x, const _Float32 *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf32 (const _Float32 *__x, const _Float32 *__y) noexcept (true)

     __attribute__ ((__pure__));


extern _Float32 getpayloadf32 (const _Float32 *__x) noexcept (true); extern _Float32 __getpayloadf32 (const _Float32 *__x) noexcept (true);


extern int setpayloadf32 (_Float32 *__x, _Float32 __payload) noexcept (true);


extern int setpayloadsigf32 (_Float32 *__x, _Float32 __payload) noexcept (true);
# 451 "/usr/include/math.h" 2 3 4
# 467 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern _Float64 acosf64 (_Float64 __x) noexcept (true); extern _Float64 __acosf64 (_Float64 __x) noexcept (true);

 extern _Float64 asinf64 (_Float64 __x) noexcept (true); extern _Float64 __asinf64 (_Float64 __x) noexcept (true);

 extern _Float64 atanf64 (_Float64 __x) noexcept (true); extern _Float64 __atanf64 (_Float64 __x) noexcept (true);

 extern _Float64 atan2f64 (_Float64 __y, _Float64 __x) noexcept (true); extern _Float64 __atan2f64 (_Float64 __y, _Float64 __x) noexcept (true);


 extern _Float64 cosf64 (_Float64 __x) noexcept (true); extern _Float64 __cosf64 (_Float64 __x) noexcept (true);

 extern _Float64 sinf64 (_Float64 __x) noexcept (true); extern _Float64 __sinf64 (_Float64 __x) noexcept (true);

 extern _Float64 tanf64 (_Float64 __x) noexcept (true); extern _Float64 __tanf64 (_Float64 __x) noexcept (true);




 extern _Float64 coshf64 (_Float64 __x) noexcept (true); extern _Float64 __coshf64 (_Float64 __x) noexcept (true);

 extern _Float64 sinhf64 (_Float64 __x) noexcept (true); extern _Float64 __sinhf64 (_Float64 __x) noexcept (true);

 extern _Float64 tanhf64 (_Float64 __x) noexcept (true); extern _Float64 __tanhf64 (_Float64 __x) noexcept (true);



 extern void sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) noexcept (true); extern void __sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) noexcept (true);





 extern _Float64 acoshf64 (_Float64 __x) noexcept (true); extern _Float64 __acoshf64 (_Float64 __x) noexcept (true);

 extern _Float64 asinhf64 (_Float64 __x) noexcept (true); extern _Float64 __asinhf64 (_Float64 __x) noexcept (true);

 extern _Float64 atanhf64 (_Float64 __x) noexcept (true); extern _Float64 __atanhf64 (_Float64 __x) noexcept (true);





 extern _Float64 expf64 (_Float64 __x) noexcept (true); extern _Float64 __expf64 (_Float64 __x) noexcept (true);


extern _Float64 frexpf64 (_Float64 __x, int *__exponent) noexcept (true); extern _Float64 __frexpf64 (_Float64 __x, int *__exponent) noexcept (true);


extern _Float64 ldexpf64 (_Float64 __x, int __exponent) noexcept (true); extern _Float64 __ldexpf64 (_Float64 __x, int __exponent) noexcept (true);


 extern _Float64 logf64 (_Float64 __x) noexcept (true); extern _Float64 __logf64 (_Float64 __x) noexcept (true);


 extern _Float64 log10f64 (_Float64 __x) noexcept (true); extern _Float64 __log10f64 (_Float64 __x) noexcept (true);


extern _Float64 modff64 (_Float64 __x, _Float64 *__iptr) noexcept (true); extern _Float64 __modff64 (_Float64 __x, _Float64 *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



 extern _Float64 exp10f64 (_Float64 __x) noexcept (true); extern _Float64 __exp10f64 (_Float64 __x) noexcept (true);




 extern _Float64 expm1f64 (_Float64 __x) noexcept (true); extern _Float64 __expm1f64 (_Float64 __x) noexcept (true);


 extern _Float64 log1pf64 (_Float64 __x) noexcept (true); extern _Float64 __log1pf64 (_Float64 __x) noexcept (true);


extern _Float64 logbf64 (_Float64 __x) noexcept (true); extern _Float64 __logbf64 (_Float64 __x) noexcept (true);




 extern _Float64 exp2f64 (_Float64 __x) noexcept (true); extern _Float64 __exp2f64 (_Float64 __x) noexcept (true);


 extern _Float64 log2f64 (_Float64 __x) noexcept (true); extern _Float64 __log2f64 (_Float64 __x) noexcept (true);






 extern _Float64 powf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __powf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float64 sqrtf64 (_Float64 __x) noexcept (true); extern _Float64 __sqrtf64 (_Float64 __x) noexcept (true);



 extern _Float64 hypotf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __hypotf64 (_Float64 __x, _Float64 __y) noexcept (true);




 extern _Float64 cbrtf64 (_Float64 __x) noexcept (true); extern _Float64 __cbrtf64 (_Float64 __x) noexcept (true);






extern _Float64 ceilf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __ceilf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));


extern _Float64 fabsf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fabsf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));


extern _Float64 floorf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __floorf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));


extern _Float64 fmodf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __fmodf64 (_Float64 __x, _Float64 __y) noexcept (true);
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 copysignf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __copysignf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));




extern _Float64 nanf64 (const char *__tagb) noexcept (true); extern _Float64 __nanf64 (const char *__tagb) noexcept (true);
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 j0f64 (_Float64) noexcept (true); extern _Float64 __j0f64 (_Float64) noexcept (true);
extern _Float64 j1f64 (_Float64) noexcept (true); extern _Float64 __j1f64 (_Float64) noexcept (true);
extern _Float64 jnf64 (int, _Float64) noexcept (true); extern _Float64 __jnf64 (int, _Float64) noexcept (true);
extern _Float64 y0f64 (_Float64) noexcept (true); extern _Float64 __y0f64 (_Float64) noexcept (true);
extern _Float64 y1f64 (_Float64) noexcept (true); extern _Float64 __y1f64 (_Float64) noexcept (true);
extern _Float64 ynf64 (int, _Float64) noexcept (true); extern _Float64 __ynf64 (int, _Float64) noexcept (true);





 extern _Float64 erff64 (_Float64) noexcept (true); extern _Float64 __erff64 (_Float64) noexcept (true);
 extern _Float64 erfcf64 (_Float64) noexcept (true); extern _Float64 __erfcf64 (_Float64) noexcept (true);
extern _Float64 lgammaf64 (_Float64) noexcept (true); extern _Float64 __lgammaf64 (_Float64) noexcept (true);




extern _Float64 tgammaf64 (_Float64) noexcept (true); extern _Float64 __tgammaf64 (_Float64) noexcept (true);
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 lgammaf64_r (_Float64, int *__signgamp) noexcept (true); extern _Float64 __lgammaf64_r (_Float64, int *__signgamp) noexcept (true);






extern _Float64 rintf64 (_Float64 __x) noexcept (true); extern _Float64 __rintf64 (_Float64 __x) noexcept (true);


extern _Float64 nextafterf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __nextafterf64 (_Float64 __x, _Float64 __y) noexcept (true);






extern _Float64 nextdownf64 (_Float64 __x) noexcept (true); extern _Float64 __nextdownf64 (_Float64 __x) noexcept (true);

extern _Float64 nextupf64 (_Float64 __x) noexcept (true); extern _Float64 __nextupf64 (_Float64 __x) noexcept (true);



extern _Float64 remainderf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __remainderf64 (_Float64 __x, _Float64 __y) noexcept (true);



extern _Float64 scalbnf64 (_Float64 __x, int __n) noexcept (true); extern _Float64 __scalbnf64 (_Float64 __x, int __n) noexcept (true);



extern int ilogbf64 (_Float64 __x) noexcept (true); extern int __ilogbf64 (_Float64 __x) noexcept (true);




extern long int llogbf64 (_Float64 __x) noexcept (true); extern long int __llogbf64 (_Float64 __x) noexcept (true);




extern _Float64 scalblnf64 (_Float64 __x, long int __n) noexcept (true); extern _Float64 __scalblnf64 (_Float64 __x, long int __n) noexcept (true);



extern _Float64 nearbyintf64 (_Float64 __x) noexcept (true); extern _Float64 __nearbyintf64 (_Float64 __x) noexcept (true);



extern _Float64 roundf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __roundf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));



extern _Float64 truncf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __truncf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));




extern _Float64 remquof64 (_Float64 __x, _Float64 __y, int *__quo) noexcept (true); extern _Float64 __remquof64 (_Float64 __x, _Float64 __y, int *__quo) noexcept (true);






extern long int lrintf64 (_Float64 __x) noexcept (true); extern long int __lrintf64 (_Float64 __x) noexcept (true);
__extension__
extern long long int llrintf64 (_Float64 __x) noexcept (true); extern long long int __llrintf64 (_Float64 __x) noexcept (true);



extern long int lroundf64 (_Float64 __x) noexcept (true); extern long int __lroundf64 (_Float64 __x) noexcept (true);
__extension__
extern long long int llroundf64 (_Float64 __x) noexcept (true); extern long long int __llroundf64 (_Float64 __x) noexcept (true);



extern _Float64 fdimf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __fdimf64 (_Float64 __x, _Float64 __y) noexcept (true);



extern _Float64 fmaxf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fmaxf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fminf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));



extern _Float64 fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) noexcept (true); extern _Float64 __fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) noexcept (true);




extern _Float64 roundevenf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __roundevenf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizef64 (_Float64 *__cx, const _Float64 *__x) noexcept (true);






extern _Float64 fmaxmagf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fmaxmagf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminmagf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fminmagf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));




extern _Float64 fmaximumf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fmaximumf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminimumf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fminimumf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fmaximum_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fmaximum_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminimum_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fminimum_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fmaximum_magf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fmaximum_magf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminimum_magf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fminimum_magf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fmaximum_mag_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fmaximum_mag_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminimum_mag_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fminimum_mag_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf64 (const _Float64 *__x, const _Float64 *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf64 (const _Float64 *__x, const _Float64 *__y) noexcept (true)

     __attribute__ ((__pure__));


extern _Float64 getpayloadf64 (const _Float64 *__x) noexcept (true); extern _Float64 __getpayloadf64 (const _Float64 *__x) noexcept (true);


extern int setpayloadf64 (_Float64 *__x, _Float64 __payload) noexcept (true);


extern int setpayloadsigf64 (_Float64 *__x, _Float64 __payload) noexcept (true);
# 468 "/usr/include/math.h" 2 3 4
# 501 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern _Float32x acosf32x (_Float32x __x) noexcept (true); extern _Float32x __acosf32x (_Float32x __x) noexcept (true);

 extern _Float32x asinf32x (_Float32x __x) noexcept (true); extern _Float32x __asinf32x (_Float32x __x) noexcept (true);

 extern _Float32x atanf32x (_Float32x __x) noexcept (true); extern _Float32x __atanf32x (_Float32x __x) noexcept (true);

 extern _Float32x atan2f32x (_Float32x __y, _Float32x __x) noexcept (true); extern _Float32x __atan2f32x (_Float32x __y, _Float32x __x) noexcept (true);


 extern _Float32x cosf32x (_Float32x __x) noexcept (true); extern _Float32x __cosf32x (_Float32x __x) noexcept (true);

 extern _Float32x sinf32x (_Float32x __x) noexcept (true); extern _Float32x __sinf32x (_Float32x __x) noexcept (true);

 extern _Float32x tanf32x (_Float32x __x) noexcept (true); extern _Float32x __tanf32x (_Float32x __x) noexcept (true);




 extern _Float32x coshf32x (_Float32x __x) noexcept (true); extern _Float32x __coshf32x (_Float32x __x) noexcept (true);

 extern _Float32x sinhf32x (_Float32x __x) noexcept (true); extern _Float32x __sinhf32x (_Float32x __x) noexcept (true);

 extern _Float32x tanhf32x (_Float32x __x) noexcept (true); extern _Float32x __tanhf32x (_Float32x __x) noexcept (true);



 extern void sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) noexcept (true); extern void __sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) noexcept (true);





 extern _Float32x acoshf32x (_Float32x __x) noexcept (true); extern _Float32x __acoshf32x (_Float32x __x) noexcept (true);

 extern _Float32x asinhf32x (_Float32x __x) noexcept (true); extern _Float32x __asinhf32x (_Float32x __x) noexcept (true);

 extern _Float32x atanhf32x (_Float32x __x) noexcept (true); extern _Float32x __atanhf32x (_Float32x __x) noexcept (true);





 extern _Float32x expf32x (_Float32x __x) noexcept (true); extern _Float32x __expf32x (_Float32x __x) noexcept (true);


extern _Float32x frexpf32x (_Float32x __x, int *__exponent) noexcept (true); extern _Float32x __frexpf32x (_Float32x __x, int *__exponent) noexcept (true);


extern _Float32x ldexpf32x (_Float32x __x, int __exponent) noexcept (true); extern _Float32x __ldexpf32x (_Float32x __x, int __exponent) noexcept (true);


 extern _Float32x logf32x (_Float32x __x) noexcept (true); extern _Float32x __logf32x (_Float32x __x) noexcept (true);


 extern _Float32x log10f32x (_Float32x __x) noexcept (true); extern _Float32x __log10f32x (_Float32x __x) noexcept (true);


extern _Float32x modff32x (_Float32x __x, _Float32x *__iptr) noexcept (true); extern _Float32x __modff32x (_Float32x __x, _Float32x *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



 extern _Float32x exp10f32x (_Float32x __x) noexcept (true); extern _Float32x __exp10f32x (_Float32x __x) noexcept (true);




 extern _Float32x expm1f32x (_Float32x __x) noexcept (true); extern _Float32x __expm1f32x (_Float32x __x) noexcept (true);


 extern _Float32x log1pf32x (_Float32x __x) noexcept (true); extern _Float32x __log1pf32x (_Float32x __x) noexcept (true);


extern _Float32x logbf32x (_Float32x __x) noexcept (true); extern _Float32x __logbf32x (_Float32x __x) noexcept (true);




 extern _Float32x exp2f32x (_Float32x __x) noexcept (true); extern _Float32x __exp2f32x (_Float32x __x) noexcept (true);


 extern _Float32x log2f32x (_Float32x __x) noexcept (true); extern _Float32x __log2f32x (_Float32x __x) noexcept (true);






 extern _Float32x powf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __powf32x (_Float32x __x, _Float32x __y) noexcept (true);


extern _Float32x sqrtf32x (_Float32x __x) noexcept (true); extern _Float32x __sqrtf32x (_Float32x __x) noexcept (true);



 extern _Float32x hypotf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __hypotf32x (_Float32x __x, _Float32x __y) noexcept (true);




 extern _Float32x cbrtf32x (_Float32x __x) noexcept (true); extern _Float32x __cbrtf32x (_Float32x __x) noexcept (true);






extern _Float32x ceilf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __ceilf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));


extern _Float32x fabsf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fabsf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));


extern _Float32x floorf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __floorf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));


extern _Float32x fmodf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __fmodf32x (_Float32x __x, _Float32x __y) noexcept (true);
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x copysignf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __copysignf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));




extern _Float32x nanf32x (const char *__tagb) noexcept (true); extern _Float32x __nanf32x (const char *__tagb) noexcept (true);
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x j0f32x (_Float32x) noexcept (true); extern _Float32x __j0f32x (_Float32x) noexcept (true);
extern _Float32x j1f32x (_Float32x) noexcept (true); extern _Float32x __j1f32x (_Float32x) noexcept (true);
extern _Float32x jnf32x (int, _Float32x) noexcept (true); extern _Float32x __jnf32x (int, _Float32x) noexcept (true);
extern _Float32x y0f32x (_Float32x) noexcept (true); extern _Float32x __y0f32x (_Float32x) noexcept (true);
extern _Float32x y1f32x (_Float32x) noexcept (true); extern _Float32x __y1f32x (_Float32x) noexcept (true);
extern _Float32x ynf32x (int, _Float32x) noexcept (true); extern _Float32x __ynf32x (int, _Float32x) noexcept (true);





 extern _Float32x erff32x (_Float32x) noexcept (true); extern _Float32x __erff32x (_Float32x) noexcept (true);
 extern _Float32x erfcf32x (_Float32x) noexcept (true); extern _Float32x __erfcf32x (_Float32x) noexcept (true);
extern _Float32x lgammaf32x (_Float32x) noexcept (true); extern _Float32x __lgammaf32x (_Float32x) noexcept (true);




extern _Float32x tgammaf32x (_Float32x) noexcept (true); extern _Float32x __tgammaf32x (_Float32x) noexcept (true);
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x lgammaf32x_r (_Float32x, int *__signgamp) noexcept (true); extern _Float32x __lgammaf32x_r (_Float32x, int *__signgamp) noexcept (true);






extern _Float32x rintf32x (_Float32x __x) noexcept (true); extern _Float32x __rintf32x (_Float32x __x) noexcept (true);


extern _Float32x nextafterf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __nextafterf32x (_Float32x __x, _Float32x __y) noexcept (true);






extern _Float32x nextdownf32x (_Float32x __x) noexcept (true); extern _Float32x __nextdownf32x (_Float32x __x) noexcept (true);

extern _Float32x nextupf32x (_Float32x __x) noexcept (true); extern _Float32x __nextupf32x (_Float32x __x) noexcept (true);



extern _Float32x remainderf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __remainderf32x (_Float32x __x, _Float32x __y) noexcept (true);



extern _Float32x scalbnf32x (_Float32x __x, int __n) noexcept (true); extern _Float32x __scalbnf32x (_Float32x __x, int __n) noexcept (true);



extern int ilogbf32x (_Float32x __x) noexcept (true); extern int __ilogbf32x (_Float32x __x) noexcept (true);




extern long int llogbf32x (_Float32x __x) noexcept (true); extern long int __llogbf32x (_Float32x __x) noexcept (true);




extern _Float32x scalblnf32x (_Float32x __x, long int __n) noexcept (true); extern _Float32x __scalblnf32x (_Float32x __x, long int __n) noexcept (true);



extern _Float32x nearbyintf32x (_Float32x __x) noexcept (true); extern _Float32x __nearbyintf32x (_Float32x __x) noexcept (true);



extern _Float32x roundf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __roundf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));



extern _Float32x truncf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __truncf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));




extern _Float32x remquof32x (_Float32x __x, _Float32x __y, int *__quo) noexcept (true); extern _Float32x __remquof32x (_Float32x __x, _Float32x __y, int *__quo) noexcept (true);






extern long int lrintf32x (_Float32x __x) noexcept (true); extern long int __lrintf32x (_Float32x __x) noexcept (true);
__extension__
extern long long int llrintf32x (_Float32x __x) noexcept (true); extern long long int __llrintf32x (_Float32x __x) noexcept (true);



extern long int lroundf32x (_Float32x __x) noexcept (true); extern long int __lroundf32x (_Float32x __x) noexcept (true);
__extension__
extern long long int llroundf32x (_Float32x __x) noexcept (true); extern long long int __llroundf32x (_Float32x __x) noexcept (true);



extern _Float32x fdimf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __fdimf32x (_Float32x __x, _Float32x __y) noexcept (true);



extern _Float32x fmaxf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fmaxf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fminf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));



extern _Float32x fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) noexcept (true); extern _Float32x __fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) noexcept (true);




extern _Float32x roundevenf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __roundevenf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizef32x (_Float32x *__cx, const _Float32x *__x) noexcept (true);






extern _Float32x fmaxmagf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fmaxmagf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminmagf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fminmagf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));




extern _Float32x fmaximumf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fmaximumf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminimumf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fminimumf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fmaximum_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fmaximum_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminimum_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fminimum_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fmaximum_magf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fmaximum_magf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminimum_magf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fminimum_magf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fmaximum_mag_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fmaximum_mag_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminimum_mag_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fminimum_mag_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf32x (const _Float32x *__x, const _Float32x *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf32x (const _Float32x *__x, const _Float32x *__y) noexcept (true)

     __attribute__ ((__pure__));


extern _Float32x getpayloadf32x (const _Float32x *__x) noexcept (true); extern _Float32x __getpayloadf32x (const _Float32x *__x) noexcept (true);


extern int setpayloadf32x (_Float32x *__x, _Float32x __payload) noexcept (true);


extern int setpayloadsigf32x (_Float32x *__x, _Float32x __payload) noexcept (true);
# 502 "/usr/include/math.h" 2 3 4
# 518 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern _Float64x acosf64x (_Float64x __x) noexcept (true); extern _Float64x __acosf64x (_Float64x __x) noexcept (true);

 extern _Float64x asinf64x (_Float64x __x) noexcept (true); extern _Float64x __asinf64x (_Float64x __x) noexcept (true);

 extern _Float64x atanf64x (_Float64x __x) noexcept (true); extern _Float64x __atanf64x (_Float64x __x) noexcept (true);

 extern _Float64x atan2f64x (_Float64x __y, _Float64x __x) noexcept (true); extern _Float64x __atan2f64x (_Float64x __y, _Float64x __x) noexcept (true);


 extern _Float64x cosf64x (_Float64x __x) noexcept (true); extern _Float64x __cosf64x (_Float64x __x) noexcept (true);

 extern _Float64x sinf64x (_Float64x __x) noexcept (true); extern _Float64x __sinf64x (_Float64x __x) noexcept (true);

 extern _Float64x tanf64x (_Float64x __x) noexcept (true); extern _Float64x __tanf64x (_Float64x __x) noexcept (true);




 extern _Float64x coshf64x (_Float64x __x) noexcept (true); extern _Float64x __coshf64x (_Float64x __x) noexcept (true);

 extern _Float64x sinhf64x (_Float64x __x) noexcept (true); extern _Float64x __sinhf64x (_Float64x __x) noexcept (true);

 extern _Float64x tanhf64x (_Float64x __x) noexcept (true); extern _Float64x __tanhf64x (_Float64x __x) noexcept (true);



 extern void sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) noexcept (true); extern void __sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) noexcept (true);





 extern _Float64x acoshf64x (_Float64x __x) noexcept (true); extern _Float64x __acoshf64x (_Float64x __x) noexcept (true);

 extern _Float64x asinhf64x (_Float64x __x) noexcept (true); extern _Float64x __asinhf64x (_Float64x __x) noexcept (true);

 extern _Float64x atanhf64x (_Float64x __x) noexcept (true); extern _Float64x __atanhf64x (_Float64x __x) noexcept (true);





 extern _Float64x expf64x (_Float64x __x) noexcept (true); extern _Float64x __expf64x (_Float64x __x) noexcept (true);


extern _Float64x frexpf64x (_Float64x __x, int *__exponent) noexcept (true); extern _Float64x __frexpf64x (_Float64x __x, int *__exponent) noexcept (true);


extern _Float64x ldexpf64x (_Float64x __x, int __exponent) noexcept (true); extern _Float64x __ldexpf64x (_Float64x __x, int __exponent) noexcept (true);


 extern _Float64x logf64x (_Float64x __x) noexcept (true); extern _Float64x __logf64x (_Float64x __x) noexcept (true);


 extern _Float64x log10f64x (_Float64x __x) noexcept (true); extern _Float64x __log10f64x (_Float64x __x) noexcept (true);


extern _Float64x modff64x (_Float64x __x, _Float64x *__iptr) noexcept (true); extern _Float64x __modff64x (_Float64x __x, _Float64x *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



 extern _Float64x exp10f64x (_Float64x __x) noexcept (true); extern _Float64x __exp10f64x (_Float64x __x) noexcept (true);




 extern _Float64x expm1f64x (_Float64x __x) noexcept (true); extern _Float64x __expm1f64x (_Float64x __x) noexcept (true);


 extern _Float64x log1pf64x (_Float64x __x) noexcept (true); extern _Float64x __log1pf64x (_Float64x __x) noexcept (true);


extern _Float64x logbf64x (_Float64x __x) noexcept (true); extern _Float64x __logbf64x (_Float64x __x) noexcept (true);




 extern _Float64x exp2f64x (_Float64x __x) noexcept (true); extern _Float64x __exp2f64x (_Float64x __x) noexcept (true);


 extern _Float64x log2f64x (_Float64x __x) noexcept (true); extern _Float64x __log2f64x (_Float64x __x) noexcept (true);






 extern _Float64x powf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __powf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float64x sqrtf64x (_Float64x __x) noexcept (true); extern _Float64x __sqrtf64x (_Float64x __x) noexcept (true);



 extern _Float64x hypotf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __hypotf64x (_Float64x __x, _Float64x __y) noexcept (true);




 extern _Float64x cbrtf64x (_Float64x __x) noexcept (true); extern _Float64x __cbrtf64x (_Float64x __x) noexcept (true);






extern _Float64x ceilf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __ceilf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));


extern _Float64x fabsf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fabsf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));


extern _Float64x floorf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __floorf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));


extern _Float64x fmodf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __fmodf64x (_Float64x __x, _Float64x __y) noexcept (true);
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x copysignf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __copysignf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));




extern _Float64x nanf64x (const char *__tagb) noexcept (true); extern _Float64x __nanf64x (const char *__tagb) noexcept (true);
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x j0f64x (_Float64x) noexcept (true); extern _Float64x __j0f64x (_Float64x) noexcept (true);
extern _Float64x j1f64x (_Float64x) noexcept (true); extern _Float64x __j1f64x (_Float64x) noexcept (true);
extern _Float64x jnf64x (int, _Float64x) noexcept (true); extern _Float64x __jnf64x (int, _Float64x) noexcept (true);
extern _Float64x y0f64x (_Float64x) noexcept (true); extern _Float64x __y0f64x (_Float64x) noexcept (true);
extern _Float64x y1f64x (_Float64x) noexcept (true); extern _Float64x __y1f64x (_Float64x) noexcept (true);
extern _Float64x ynf64x (int, _Float64x) noexcept (true); extern _Float64x __ynf64x (int, _Float64x) noexcept (true);





 extern _Float64x erff64x (_Float64x) noexcept (true); extern _Float64x __erff64x (_Float64x) noexcept (true);
 extern _Float64x erfcf64x (_Float64x) noexcept (true); extern _Float64x __erfcf64x (_Float64x) noexcept (true);
extern _Float64x lgammaf64x (_Float64x) noexcept (true); extern _Float64x __lgammaf64x (_Float64x) noexcept (true);




extern _Float64x tgammaf64x (_Float64x) noexcept (true); extern _Float64x __tgammaf64x (_Float64x) noexcept (true);
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x lgammaf64x_r (_Float64x, int *__signgamp) noexcept (true); extern _Float64x __lgammaf64x_r (_Float64x, int *__signgamp) noexcept (true);






extern _Float64x rintf64x (_Float64x __x) noexcept (true); extern _Float64x __rintf64x (_Float64x __x) noexcept (true);


extern _Float64x nextafterf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __nextafterf64x (_Float64x __x, _Float64x __y) noexcept (true);






extern _Float64x nextdownf64x (_Float64x __x) noexcept (true); extern _Float64x __nextdownf64x (_Float64x __x) noexcept (true);

extern _Float64x nextupf64x (_Float64x __x) noexcept (true); extern _Float64x __nextupf64x (_Float64x __x) noexcept (true);



extern _Float64x remainderf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __remainderf64x (_Float64x __x, _Float64x __y) noexcept (true);



extern _Float64x scalbnf64x (_Float64x __x, int __n) noexcept (true); extern _Float64x __scalbnf64x (_Float64x __x, int __n) noexcept (true);



extern int ilogbf64x (_Float64x __x) noexcept (true); extern int __ilogbf64x (_Float64x __x) noexcept (true);




extern long int llogbf64x (_Float64x __x) noexcept (true); extern long int __llogbf64x (_Float64x __x) noexcept (true);




extern _Float64x scalblnf64x (_Float64x __x, long int __n) noexcept (true); extern _Float64x __scalblnf64x (_Float64x __x, long int __n) noexcept (true);



extern _Float64x nearbyintf64x (_Float64x __x) noexcept (true); extern _Float64x __nearbyintf64x (_Float64x __x) noexcept (true);



extern _Float64x roundf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __roundf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));



extern _Float64x truncf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __truncf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));




extern _Float64x remquof64x (_Float64x __x, _Float64x __y, int *__quo) noexcept (true); extern _Float64x __remquof64x (_Float64x __x, _Float64x __y, int *__quo) noexcept (true);






extern long int lrintf64x (_Float64x __x) noexcept (true); extern long int __lrintf64x (_Float64x __x) noexcept (true);
__extension__
extern long long int llrintf64x (_Float64x __x) noexcept (true); extern long long int __llrintf64x (_Float64x __x) noexcept (true);



extern long int lroundf64x (_Float64x __x) noexcept (true); extern long int __lroundf64x (_Float64x __x) noexcept (true);
__extension__
extern long long int llroundf64x (_Float64x __x) noexcept (true); extern long long int __llroundf64x (_Float64x __x) noexcept (true);



extern _Float64x fdimf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __fdimf64x (_Float64x __x, _Float64x __y) noexcept (true);



extern _Float64x fmaxf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fmaxf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fminf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));



extern _Float64x fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) noexcept (true); extern _Float64x __fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) noexcept (true);




extern _Float64x roundevenf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __roundevenf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizef64x (_Float64x *__cx, const _Float64x *__x) noexcept (true);






extern _Float64x fmaxmagf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fmaxmagf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminmagf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fminmagf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));




extern _Float64x fmaximumf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fmaximumf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminimumf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fminimumf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fmaximum_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fmaximum_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminimum_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fminimum_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fmaximum_magf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fmaximum_magf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminimum_magf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fminimum_magf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fmaximum_mag_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fmaximum_mag_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminimum_mag_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fminimum_mag_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf64x (const _Float64x *__x, const _Float64x *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf64x (const _Float64x *__x, const _Float64x *__y) noexcept (true)

     __attribute__ ((__pure__));


extern _Float64x getpayloadf64x (const _Float64x *__x) noexcept (true); extern _Float64x __getpayloadf64x (const _Float64x *__x) noexcept (true);


extern int setpayloadf64x (_Float64x *__x, _Float64x __payload) noexcept (true);


extern int setpayloadsigf64x (_Float64x *__x, _Float64x __payload) noexcept (true);
# 519 "/usr/include/math.h" 2 3 4
# 566 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern float fadd (double __x, double __y) noexcept (true);


extern float fdiv (double __x, double __y) noexcept (true);


extern float ffma (double __x, double __y, double __z) noexcept (true);


extern float fmul (double __x, double __y) noexcept (true);


extern float fsqrt (double __x) noexcept (true);


extern float fsub (double __x, double __y) noexcept (true);
# 567 "/usr/include/math.h" 2 3 4
# 587 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern float faddl (long double __x, long double __y) noexcept (true);


extern float fdivl (long double __x, long double __y) noexcept (true);


extern float ffmal (long double __x, long double __y, long double __z) noexcept (true);


extern float fmull (long double __x, long double __y) noexcept (true);


extern float fsqrtl (long double __x) noexcept (true);


extern float fsubl (long double __x, long double __y) noexcept (true);
# 588 "/usr/include/math.h" 2 3 4
# 616 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern double daddl (long double __x, long double __y) noexcept (true);


extern double ddivl (long double __x, long double __y) noexcept (true);


extern double dfmal (long double __x, long double __y, long double __z) noexcept (true);


extern double dmull (long double __x, long double __y) noexcept (true);


extern double dsqrtl (long double __x) noexcept (true);


extern double dsubl (long double __x, long double __y) noexcept (true);
# 617 "/usr/include/math.h" 2 3 4
# 697 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf32x (_Float32x __x, _Float32x __y) noexcept (true);


extern _Float32 f32divf32x (_Float32x __x, _Float32x __y) noexcept (true);


extern _Float32 f32fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) noexcept (true);


extern _Float32 f32mulf32x (_Float32x __x, _Float32x __y) noexcept (true);


extern _Float32 f32sqrtf32x (_Float32x __x) noexcept (true);


extern _Float32 f32subf32x (_Float32x __x, _Float32x __y) noexcept (true);
# 698 "/usr/include/math.h" 2 3 4
# 707 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32 f32divf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32 f32fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) noexcept (true);


extern _Float32 f32mulf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32 f32sqrtf64 (_Float64 __x) noexcept (true);


extern _Float32 f32subf64 (_Float64 __x, _Float64 __y) noexcept (true);
# 708 "/usr/include/math.h" 2 3 4
# 717 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32 f32divf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32 f32fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) noexcept (true);


extern _Float32 f32mulf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32 f32sqrtf64x (_Float64x __x) noexcept (true);


extern _Float32 f32subf64x (_Float64x __x, _Float64x __y) noexcept (true);
# 718 "/usr/include/math.h" 2 3 4
# 747 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32x f32xdivf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32x f32xfmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) noexcept (true);


extern _Float32x f32xmulf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32x f32xsqrtf64 (_Float64 __x) noexcept (true);


extern _Float32x f32xsubf64 (_Float64 __x, _Float64 __y) noexcept (true);
# 748 "/usr/include/math.h" 2 3 4
# 757 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32x f32xdivf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32x f32xfmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) noexcept (true);


extern _Float32x f32xmulf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32x f32xsqrtf64x (_Float64x __x) noexcept (true);


extern _Float32x f32xsubf64x (_Float64x __x, _Float64x __y) noexcept (true);
# 758 "/usr/include/math.h" 2 3 4
# 787 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float64 f64addf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float64 f64divf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float64 f64fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) noexcept (true);


extern _Float64 f64mulf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float64 f64sqrtf64x (_Float64x __x) noexcept (true);


extern _Float64 f64subf64x (_Float64x __x, _Float64x __y) noexcept (true);
# 788 "/usr/include/math.h" 2 3 4
# 854 "/usr/include/math.h" 3 4
extern int signgam;
# 934 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 1055 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3 4
extern int __iscanonicall (long double __x)
     noexcept (true) __attribute__ ((__const__));
# 46 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3 4
extern "C++" {
inline int iscanonical (float __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (double __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (long double __val) { return __iscanonicall (__val); }



}
# 1056 "/usr/include/math.h" 2 3 4
# 1067 "/usr/include/math.h" 3 4
extern "C++" {
inline int issignaling (float __val) { return __issignalingf (__val); }
inline int issignaling (double __val) { return __issignaling (__val); }
inline int
issignaling (long double __val)
{



  return __issignalingl (__val);

}





}
# 1098 "/usr/include/math.h" 3 4
extern "C++" {
# 1129 "/usr/include/math.h" 3 4
template <class __T> inline bool
iszero (__T __val)
{
  return __val == 0;
}

}
# 1364 "/usr/include/math.h" 3 4
extern "C++" {
template<typename> struct __iseqsig_type;

template<> struct __iseqsig_type<float>
{
  static int __call (float __x, float __y) throw ()
  {
    return __iseqsigf (__x, __y);
  }
};

template<> struct __iseqsig_type<double>
{
  static int __call (double __x, double __y) throw ()
  {
    return __iseqsig (__x, __y);
  }
};

template<> struct __iseqsig_type<long double>
{
  static int __call (long double __x, long double __y) throw ()
  {

    return __iseqsigl (__x, __y);



  }
};
# 1455 "/usr/include/math.h" 3 4
template<typename _T1, typename _T2>
inline int
iseqsig (_T1 __x, _T2 __y) throw ()
{

  typedef decltype (((__x) + (__y) + 0.0f)) _T3;



  return __iseqsig_type<_T3>::__call (__x, __y);
}

}




}
# 46 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 2 3

# 1 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/std_abs.h" 1 3
# 34 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/std_abs.h" 3




# 1 "/usr/include/stdlib.h" 1 3 4
# 26 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdlib.h" 2 3 4





# 1 "/software/common/Xilinx_Vitis/Vitis/2024.2/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 1 3 4
# 62 "/software/common/Xilinx_Vitis/Vitis/2024.2/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 33 "/usr/include/stdlib.h" 2 3 4

extern "C" {






# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 42 "/usr/include/stdlib.h" 2 3 4
# 59 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 98 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) noexcept (true) ;



extern double atof (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) noexcept (true) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 141 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 159 "/usr/include/stdlib.h" 3 4
extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 177 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));






extern long int strtol (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtol")


     __attribute__ ((__nonnull__ (1)));
extern unsigned long int strtoul (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtoul")



     __attribute__ ((__nonnull__ (1)));

__extension__
extern long long int strtoq (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtoll")


     __attribute__ ((__nonnull__ (1)));
__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtoull")



     __attribute__ ((__nonnull__ (1)));

__extension__
extern long long int strtoll (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtoll")


     __attribute__ ((__nonnull__ (1)));
__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtoull")



     __attribute__ ((__nonnull__ (1)));
# 278 "/usr/include/stdlib.h" 3 4
extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));
# 298 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));
# 316 "/usr/include/stdlib.h" 3 4
extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));
# 338 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 339 "/usr/include/stdlib.h" 2 3 4

extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) noexcept (true) __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 4)));





extern long int strtol_l (const char *__restrict __nptr, char **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ ("" "__isoc23_strtol_l")



     __attribute__ ((__nonnull__ (1, 4)));
extern unsigned long int strtoul_l (const char *__restrict __nptr, char **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ ("" "__isoc23_strtoul_l")




     __attribute__ ((__nonnull__ (1, 4)));
__extension__
extern long long int strtoll_l (const char *__restrict __nptr, char **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ ("" "__isoc23_strtoll_l")




     __attribute__ ((__nonnull__ (1, 4)));
__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr, char **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ ("" "__isoc23_strtoull_l")




     __attribute__ ((__nonnull__ (1, 4)));
# 415 "/usr/include/stdlib.h" 3 4
extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 436 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 457 "/usr/include/stdlib.h" 3 4
extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 505 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) noexcept (true) ;


extern long int a64l (const char *__s)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __pid_t pid_t;





typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 127 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 129 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 3 4
typedef __time_t time_t;
# 130 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 131 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;






# 1 "/software/common/Xilinx_Vitis/Vitis/2024.2/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 1 3 4
# 145 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;





# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 156 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 24 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endianness.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/endian.h" 2 3 4
# 25 "/usr/include/endian.h" 2 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{



  return ((__uint16_t) ((((__bsx) >> 8) & 0xff) | (((__bsx) & 0xff) << 8)));

}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{



  return ((((__bsx) & 0xff000000u) >> 24) | (((__bsx) & 0x00ff0000u) >> 8) | (((__bsx) & 0x0000ff00u) << 8) | (((__bsx) & 0x000000ffu) << 24));

}
# 69 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{



  return ((((__bsx) & 0xff00000000000000ull) >> 56) | (((__bsx) & 0x00ff000000000000ull) >> 40) | (((__bsx) & 0x0000ff0000000000ull) >> 24) | (((__bsx) & 0x000000ff00000000ull) >> 8) | (((__bsx) & 0x00000000ff000000ull) << 8) | (((__bsx) & 0x0000000000ff0000ull) << 24) | (((__bsx) & 0x000000000000ff00ull) << 40) | (((__bsx) & 0x00000000000000ffull) << 56));

}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{




  __time_t tv_sec;
  __suseconds_t tv_usec;

};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
struct timespec
{



  __time_t tv_sec;




  __syscall_slong_t tv_nsec;
# 31 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
};
# 40 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 102 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 127 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 153 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
}
# 180 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;






# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 3 4
typedef union
{
  __extension__ unsigned long long int __value64;
  struct
  {
    unsigned int __low;
    unsigned int __high;
  } __value32;
} __atomic_wide_counter;
# 47 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 76 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
};
# 77 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4
# 89 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
};
# 90 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __atomic_wide_counter __wseq;
  __atomic_wide_counter __g1_start;
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};

typedef unsigned int __tss_t;
typedef unsigned long int __thrd_t;

typedef struct
{
  int __data ;
} __once_flag;
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


}
# 515 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) noexcept (true);


extern void srandom (unsigned int __seed) noexcept (true);





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) noexcept (true) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) noexcept (true) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     noexcept (true) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     noexcept (true) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) noexcept (true);

extern void srand (unsigned int __seed) noexcept (true);



extern int rand_r (unsigned int *__seed) noexcept (true);







extern double drand48 (void) noexcept (true);
extern double erand48 (unsigned short int __xsubi[3]) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) noexcept (true);
extern long int nrand48 (unsigned short int __xsubi[3])
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) noexcept (true);
extern long int jrand48 (unsigned short int __xsubi[3])
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) noexcept (true);
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     noexcept (true) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) noexcept (true) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     noexcept (true) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern __uint32_t arc4random (void)
     noexcept (true) ;


extern void arc4random_buf (void *__buf, size_t __size)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern __uint32_t arc4random_uniform (__uint32_t __upper_bound)
     noexcept (true) ;




extern void *malloc (size_t __size) noexcept (true) __attribute__ ((__malloc__))
                                         ;

extern void *calloc (size_t __nmemb, size_t __size)
     noexcept (true) __attribute__ ((__malloc__)) ;






extern void *realloc (void *__ptr, size_t __size)
     noexcept (true) __attribute__ ((__warn_unused_result__)) ;


extern void free (void *__ptr) noexcept (true);







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     noexcept (true) __attribute__ ((__warn_unused_result__))

                       ;


extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     noexcept (true) ;




# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/software/common/Xilinx_Vitis/Vitis/2024.2/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) noexcept (true);





}
# 707 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) noexcept (true) __attribute__ ((__malloc__))
                                         ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     noexcept (true) __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     noexcept (true) __attribute__ ((__malloc__)) __attribute__ ((__alloc_align__ (1)))
                                         ;



extern void abort (void) noexcept (true) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) noexcept (true) __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     noexcept (true) __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 749 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     noexcept (true) __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) noexcept (true) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) noexcept (true) __attribute__ ((__noreturn__));





extern void _Exit (int __status) noexcept (true) __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) noexcept (true) __attribute__ ((__nonnull__ (1))) ;




extern char *secure_getenv (const char *__name)
     noexcept (true) __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) noexcept (true) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     noexcept (true) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) noexcept (true) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) noexcept (true);
# 814 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) noexcept (true) __attribute__ ((__nonnull__ (1)));
# 827 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 837 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 849 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 859 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 870 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) noexcept (true) __attribute__ ((__nonnull__ (1))) ;
# 881 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 891 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 901 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 913 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 923 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;





extern char *canonicalize_file_name (const char *__name)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__malloc__))
                              ;
# 940 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) noexcept (true) ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) noexcept (true) __attribute__ ((__const__)) ;
extern long int labs (long int __x) noexcept (true) __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     noexcept (true) __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     noexcept (true) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     noexcept (true) __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     noexcept (true) __attribute__ ((__const__)) ;
# 1012 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     noexcept (true) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     noexcept (true) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) noexcept (true);


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) noexcept (true);


extern int wctomb (char *__s, wchar_t __wchar) noexcept (true);



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) noexcept (true)
                                      ;

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     noexcept (true)

                                    ;






extern int rpmatch (const char *__response) noexcept (true) __attribute__ ((__nonnull__ (1))) ;
# 1099 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2, 3))) ;







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) noexcept (true);



extern int unlockpt (int __fd) noexcept (true);




extern char *ptsname (int __fd) noexcept (true) ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     noexcept (true) __attribute__ ((__nonnull__ (2))) ;


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 1155 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 1156 "/usr/include/stdlib.h" 2 3 4
# 1167 "/usr/include/stdlib.h" 3 4
}
# 39 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/std_abs.h" 2 3







extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }







  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }



  inline constexpr __int128
  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }
# 100 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/std_abs.h" 3
  inline constexpr
  __float128
  abs(__float128 __x)
  { return __x < 0 ? -__x : __x; }



}
}
# 48 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 2 3
# 77 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::acos;


  inline constexpr float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline constexpr long double
  acos(long double __x)
  { return __builtin_acosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;


  inline constexpr float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline constexpr long double
  asin(long double __x)
  { return __builtin_asinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;


  inline constexpr float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline constexpr long double
  atan(long double __x)
  { return __builtin_atanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;


  inline constexpr float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline constexpr long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;


  inline constexpr float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline constexpr long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;


  inline constexpr float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline constexpr long double
  cos(long double __x)
  { return __builtin_cosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;


  inline constexpr float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline constexpr long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;


  inline constexpr float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline constexpr long double
  exp(long double __x)
  { return __builtin_expl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;


  inline constexpr float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;


  inline constexpr float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline constexpr long double
  floor(long double __x)
  { return __builtin_floorl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;


  inline constexpr float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline constexpr long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
    }

  using ::frexp;


  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;


  inline constexpr float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline constexpr long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }

  using ::log;


  inline constexpr float
  log(float __x)
  { return __builtin_logf(__x); }

  inline constexpr long double
  log(long double __x)
  { return __builtin_logl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;


  inline constexpr float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline constexpr long double
  log10(long double __x)
  { return __builtin_log10l(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;


  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }


  using ::pow;


  inline constexpr float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline constexpr long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }
# 412 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3
  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;


  inline constexpr float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline constexpr long double
  sin(long double __x)
  { return __builtin_sinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;


  inline constexpr float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline constexpr long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;


  inline constexpr float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline constexpr long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;


  inline constexpr float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline constexpr long double
  tan(long double __x)
  { return __builtin_tanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;


  inline constexpr float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline constexpr long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }
# 536 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3
  constexpr int
  fpclassify(float __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(long double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              int>::__type
    fpclassify(_Tp __x)
    { return __x != 0 ? 4 : 2; }



  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(double __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(long double __x)
  { return __builtin_isfinite(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isfinite(_Tp __x)
    { return true; }



  constexpr bool
  isinf(float __x)
  { return __builtin_isinf(__x); }





  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }


  constexpr bool
  isinf(long double __x)
  { return __builtin_isinf(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isinf(_Tp __x)
    { return false; }



  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }





  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }


  constexpr bool
  isnan(long double __x)
  { return __builtin_isnan(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnan(_Tp __x)
    { return false; }



  constexpr bool
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(long double __x)
  { return __builtin_isnormal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnormal(_Tp __x)
    { return __x != 0 ? true : false; }




  constexpr bool
  signbit(float __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(double __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(long double __x)
  { return __builtin_signbit(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    signbit(_Tp __x)
    { return __x < 0 ? true : false; }



  constexpr bool
  isgreater(float __x, float __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(double __x, double __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(long double __x, long double __y)
  { return __builtin_isgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isgreaterequal(float __x, float __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(double __x, double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(long double __x, long double __y)
  { return __builtin_isgreaterequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreaterequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreaterequal(__type(__x), __type(__y));
    }



  constexpr bool
  isless(float __x, float __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(double __x, double __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(long double __x, long double __y)
  { return __builtin_isless(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isless(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isless(__type(__x), __type(__y));
    }



  constexpr bool
  islessequal(float __x, float __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(double __x, double __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(long double __x, long double __y)
  { return __builtin_islessequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessequal(__type(__x), __type(__y));
    }



  constexpr bool
  islessgreater(float __x, float __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(double __x, double __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(long double __x, long double __y)
  { return __builtin_islessgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isunordered(float __x, float __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(double __x, double __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(long double __x, long double __y)
  { return __builtin_isunordered(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isunordered(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isunordered(__type(__x), __type(__y));
    }
# 1065 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3
  using ::double_t;
  using ::float_t;


  using ::acosh;
  using ::acoshf;
  using ::acoshl;

  using ::asinh;
  using ::asinhf;
  using ::asinhl;

  using ::atanh;
  using ::atanhf;
  using ::atanhl;

  using ::cbrt;
  using ::cbrtf;
  using ::cbrtl;

  using ::copysign;
  using ::copysignf;
  using ::copysignl;

  using ::erf;
  using ::erff;
  using ::erfl;

  using ::erfc;
  using ::erfcf;
  using ::erfcl;

  using ::exp2;
  using ::exp2f;
  using ::exp2l;

  using ::expm1;
  using ::expm1f;
  using ::expm1l;

  using ::fdim;
  using ::fdimf;
  using ::fdiml;

  using ::fma;
  using ::fmaf;
  using ::fmal;

  using ::fmax;
  using ::fmaxf;
  using ::fmaxl;

  using ::fmin;
  using ::fminf;
  using ::fminl;

  using ::hypot;
  using ::hypotf;
  using ::hypotl;

  using ::ilogb;
  using ::ilogbf;
  using ::ilogbl;

  using ::lgamma;
  using ::lgammaf;
  using ::lgammal;


  using ::llrint;
  using ::llrintf;
  using ::llrintl;

  using ::llround;
  using ::llroundf;
  using ::llroundl;


  using ::log1p;
  using ::log1pf;
  using ::log1pl;

  using ::log2;
  using ::log2f;
  using ::log2l;

  using ::logb;
  using ::logbf;
  using ::logbl;

  using ::lrint;
  using ::lrintf;
  using ::lrintl;

  using ::lround;
  using ::lroundf;
  using ::lroundl;

  using ::nan;
  using ::nanf;
  using ::nanl;

  using ::nearbyint;
  using ::nearbyintf;
  using ::nearbyintl;

  using ::nextafter;
  using ::nextafterf;
  using ::nextafterl;

  using ::nexttoward;
  using ::nexttowardf;
  using ::nexttowardl;

  using ::remainder;
  using ::remainderf;
  using ::remainderl;

  using ::remquo;
  using ::remquof;
  using ::remquol;

  using ::rint;
  using ::rintf;
  using ::rintl;

  using ::round;
  using ::roundf;
  using ::roundl;

  using ::scalbln;
  using ::scalblnf;
  using ::scalblnl;

  using ::scalbn;
  using ::scalbnf;
  using ::scalbnl;

  using ::tgamma;
  using ::tgammaf;
  using ::tgammal;

  using ::trunc;
  using ::truncf;
  using ::truncl;



  constexpr float
  acosh(float __x)
  { return __builtin_acoshf(__x); }

  constexpr long double
  acosh(long double __x)
  { return __builtin_acoshl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    acosh(_Tp __x)
    { return __builtin_acosh(__x); }



  constexpr float
  asinh(float __x)
  { return __builtin_asinhf(__x); }

  constexpr long double
  asinh(long double __x)
  { return __builtin_asinhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    asinh(_Tp __x)
    { return __builtin_asinh(__x); }



  constexpr float
  atanh(float __x)
  { return __builtin_atanhf(__x); }

  constexpr long double
  atanh(long double __x)
  { return __builtin_atanhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    atanh(_Tp __x)
    { return __builtin_atanh(__x); }



  constexpr float
  cbrt(float __x)
  { return __builtin_cbrtf(__x); }

  constexpr long double
  cbrt(long double __x)
  { return __builtin_cbrtl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    cbrt(_Tp __x)
    { return __builtin_cbrt(__x); }



  constexpr float
  copysign(float __x, float __y)
  { return __builtin_copysignf(__x, __y); }

  constexpr long double
  copysign(long double __x, long double __y)
  { return __builtin_copysignl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    copysign(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return copysign(__type(__x), __type(__y));
    }



  constexpr float
  erf(float __x)
  { return __builtin_erff(__x); }

  constexpr long double
  erf(long double __x)
  { return __builtin_erfl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erf(_Tp __x)
    { return __builtin_erf(__x); }



  constexpr float
  erfc(float __x)
  { return __builtin_erfcf(__x); }

  constexpr long double
  erfc(long double __x)
  { return __builtin_erfcl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erfc(_Tp __x)
    { return __builtin_erfc(__x); }



  constexpr float
  exp2(float __x)
  { return __builtin_exp2f(__x); }

  constexpr long double
  exp2(long double __x)
  { return __builtin_exp2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    exp2(_Tp __x)
    { return __builtin_exp2(__x); }



  constexpr float
  expm1(float __x)
  { return __builtin_expm1f(__x); }

  constexpr long double
  expm1(long double __x)
  { return __builtin_expm1l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    expm1(_Tp __x)
    { return __builtin_expm1(__x); }



  constexpr float
  fdim(float __x, float __y)
  { return __builtin_fdimf(__x, __y); }

  constexpr long double
  fdim(long double __x, long double __y)
  { return __builtin_fdiml(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fdim(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fdim(__type(__x), __type(__y));
    }



  constexpr float
  fma(float __x, float __y, float __z)
  { return __builtin_fmaf(__x, __y, __z); }

  constexpr long double
  fma(long double __x, long double __y, long double __z)
  { return __builtin_fmal(__x, __y, __z); }



  template<typename _Tp, typename _Up, typename _Vp>
    constexpr typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type
    fma(_Tp __x, _Up __y, _Vp __z)
    {
      typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;
      return fma(__type(__x), __type(__y), __type(__z));
    }



  constexpr float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }

  constexpr long double
  fmax(long double __x, long double __y)
  { return __builtin_fmaxl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmax(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmax(__type(__x), __type(__y));
    }



  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }

  constexpr long double
  fmin(long double __x, long double __y)
  { return __builtin_fminl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmin(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmin(__type(__x), __type(__y));
    }



  constexpr float
  hypot(float __x, float __y)
  { return __builtin_hypotf(__x, __y); }

  constexpr long double
  hypot(long double __x, long double __y)
  { return __builtin_hypotl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    hypot(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return hypot(__type(__x), __type(__y));
    }



  constexpr int
  ilogb(float __x)
  { return __builtin_ilogbf(__x); }

  constexpr int
  ilogb(long double __x)
  { return __builtin_ilogbl(__x); }



  template<typename _Tp>
    constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    int>::__type
    ilogb(_Tp __x)
    { return __builtin_ilogb(__x); }



  constexpr float
  lgamma(float __x)
  { return __builtin_lgammaf(__x); }

  constexpr long double
  lgamma(long double __x)
  { return __builtin_lgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    lgamma(_Tp __x)
    { return __builtin_lgamma(__x); }



  constexpr long long
  llrint(float __x)
  { return __builtin_llrintf(__x); }

  constexpr long long
  llrint(long double __x)
  { return __builtin_llrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llrint(_Tp __x)
    { return __builtin_llrint(__x); }



  constexpr long long
  llround(float __x)
  { return __builtin_llroundf(__x); }

  constexpr long long
  llround(long double __x)
  { return __builtin_llroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llround(_Tp __x)
    { return __builtin_llround(__x); }



  constexpr float
  log1p(float __x)
  { return __builtin_log1pf(__x); }

  constexpr long double
  log1p(long double __x)
  { return __builtin_log1pl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log1p(_Tp __x)
    { return __builtin_log1p(__x); }




  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }

  constexpr long double
  log2(long double __x)
  { return __builtin_log2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log2(_Tp __x)
    { return __builtin_log2(__x); }



  constexpr float
  logb(float __x)
  { return __builtin_logbf(__x); }

  constexpr long double
  logb(long double __x)
  { return __builtin_logbl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    logb(_Tp __x)
    { return __builtin_logb(__x); }



  constexpr long
  lrint(float __x)
  { return __builtin_lrintf(__x); }

  constexpr long
  lrint(long double __x)
  { return __builtin_lrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lrint(_Tp __x)
    { return __builtin_lrint(__x); }



  constexpr long
  lround(float __x)
  { return __builtin_lroundf(__x); }

  constexpr long
  lround(long double __x)
  { return __builtin_lroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lround(_Tp __x)
    { return __builtin_lround(__x); }



  constexpr float
  nearbyint(float __x)
  { return __builtin_nearbyintf(__x); }

  constexpr long double
  nearbyint(long double __x)
  { return __builtin_nearbyintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nearbyint(_Tp __x)
    { return __builtin_nearbyint(__x); }



  constexpr float
  nextafter(float __x, float __y)
  { return __builtin_nextafterf(__x, __y); }

  constexpr long double
  nextafter(long double __x, long double __y)
  { return __builtin_nextafterl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    nextafter(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return nextafter(__type(__x), __type(__y));
    }



  constexpr float
  nexttoward(float __x, long double __y)
  { return __builtin_nexttowardf(__x, __y); }

  constexpr long double
  nexttoward(long double __x, long double __y)
  { return __builtin_nexttowardl(__x, __y); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nexttoward(_Tp __x, long double __y)
    { return __builtin_nexttoward(__x, __y); }



  constexpr float
  remainder(float __x, float __y)
  { return __builtin_remainderf(__x, __y); }

  constexpr long double
  remainder(long double __x, long double __y)
  { return __builtin_remainderl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remainder(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remainder(__type(__x), __type(__y));
    }



  inline float
  remquo(float __x, float __y, int* __pquo)
  { return __builtin_remquof(__x, __y, __pquo); }

  inline long double
  remquo(long double __x, long double __y, int* __pquo)
  { return __builtin_remquol(__x, __y, __pquo); }



  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remquo(_Tp __x, _Up __y, int* __pquo)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remquo(__type(__x), __type(__y), __pquo);
    }



  constexpr float
  rint(float __x)
  { return __builtin_rintf(__x); }

  constexpr long double
  rint(long double __x)
  { return __builtin_rintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    rint(_Tp __x)
    { return __builtin_rint(__x); }



  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }

  constexpr long double
  round(long double __x)
  { return __builtin_roundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    round(_Tp __x)
    { return __builtin_round(__x); }



  constexpr float
  scalbln(float __x, long __ex)
  { return __builtin_scalblnf(__x, __ex); }

  constexpr long double
  scalbln(long double __x, long __ex)
  { return __builtin_scalblnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbln(_Tp __x, long __ex)
    { return __builtin_scalbln(__x, __ex); }



  constexpr float
  scalbn(float __x, int __ex)
  { return __builtin_scalbnf(__x, __ex); }

  constexpr long double
  scalbn(long double __x, int __ex)
  { return __builtin_scalbnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbn(_Tp __x, int __ex)
    { return __builtin_scalbn(__x, __ex); }



  constexpr float
  tgamma(float __x)
  { return __builtin_tgammaf(__x); }

  constexpr long double
  tgamma(long double __x)
  { return __builtin_tgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    tgamma(_Tp __x)
    { return __builtin_tgamma(__x); }



  constexpr float
  trunc(float __x)
  { return __builtin_truncf(__x); }

  constexpr long double
  trunc(long double __x)
  { return __builtin_truncl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    trunc(_Tp __x)
    { return __builtin_trunc(__x); }
# 1889 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3
}





}
# 37 "/software/common/Xilinx_Vitis/Vitis/2024.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/math.h" 2 3

using std::abs;
using std::acos;
using std::asin;
using std::atan;
using std::atan2;
using std::cos;
using std::sin;
using std::tan;
using std::cosh;
using std::sinh;
using std::tanh;
using std::exp;
using std::frexp;
using std::ldexp;
using std::log;
using std::log10;
using std::modf;
using std::pow;
using std::sqrt;
using std::ceil;
using std::fabs;
using std::floor;
using std::fmod;


using std::fpclassify;
using std::isfinite;
using std::isinf;
using std::isnan;
using std::isnormal;
using std::signbit;
using std::isgreater;
using std::isgreaterequal;
using std::isless;
using std::islessequal;
using std::islessgreater;
using std::isunordered;



using std::acosh;
using std::asinh;
using std::atanh;
using std::cbrt;
using std::copysign;
using std::erf;
using std::erfc;
using std::exp2;
using std::expm1;
using std::fdim;
using std::fma;
using std::fmax;
using std::fmin;
using std::hypot;
using std::ilogb;
using std::lgamma;
using std::llrint;
using std::llround;
using std::log1p;
using std::log2;
using std::logb;
using std::lrint;
using std::lround;
using std::nearbyint;
using std::nextafter;
using std::nexttoward;
using std::remainder;
using std::remquo;
using std::rint;
using std::round;
using std::scalbln;
using std::scalbn;
using std::tgamma;
using std::trunc;
# 3 "cordiccart2pol.cpp" 2


# 1 "./cordic_LUTs.hpp" 1
# 32 "./cordic_LUTs.hpp"
const data_t my_LUT_th[] = {0.0, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, 0.0, 0.7853981852531433, 1.1071487665176392, 1.249045729637146, 1.3258177042007446, 1.3734008073806763, 1.4056476354599, 1.4288992881774902, 1.4464412927627563, 1.4601391553878784, 1.4711276292800903, 1.4801363945007324, 1.4876550436019897, 1.494024395942688, 1.4994888305664062, 1.504228115081787, 1.5083775520324707, 1.5120404958724976, 1.515297770500183, 1.5182132720947266, 1.5208379030227661, 1.523213267326355, 1.525373101234436, 1.5273454189300537, 1.5291537046432495, 1.5308176279067993, 1.5323537588119507, 1.5337761640548706, 1.5350972414016724, 1.5363272428512573, 1.537475347518921, 1.5385494232177734, 1.5395565032958984, 1.5405025482177734, 1.5413930416107178, 1.542232632637024, 1.5430257320404053, 1.5437759160995483, 1.54448664188385, 1.5451608896255493, 1.5458015203475952, 1.5464109182357788, 1.5469913482666016, 1.5475447177886963, 1.5480729341506958, 1.5485777854919434, 1.549060583114624, 1.5495229959487915, 1.5499659776687622, 1.5503909587860107, 1.550799012184143, 1.551190972328186, 1.5515679121017456, 1.5519306659698486, 1.5522799491882324, 1.5526164770126343, 1.552941083908081, 1.553254246711731, 1.5535566806793213, 1.5538487434387207, 1.5541311502456665, 1.554404377937317, 1.554668664932251, 1.5549246072769165, -1.5551725625991821, -1.5549246072769165, -1.554668664932251, -1.554404377937317, -1.5541311502456665, -1.5538487434387207, -1.5535566806793213, -1.553254246711731, -1.552941083908081, -1.5526164770126343, -1.5522799491882324, -1.5519306659698486, -1.5515679121017456, -1.551190972328186, -1.550799012184143, -1.5503909587860107, -1.5499659776687622, -1.5495229959487915, -1.549060583114624, -1.5485777854919434, -1.5480729341506958, -1.5475447177886963, -1.5469913482666016, -1.5464109182357788, -1.5458015203475952, -1.5451608896255493, -1.54448664188385, -1.5437759160995483, -1.5430257320404053, -1.542232632637024, -1.5413930416107178, -1.5405025482177734, -1.5395565032958984, -1.5385494232177734, -1.537475347518921, -1.5363272428512573, -1.5350972414016724, -1.5337761640548706, -1.5323537588119507, -1.5308176279067993, -1.5291537046432495, -1.5273454189300537, -1.525373101234436, -1.523213267326355, -1.5208379030227661, -1.5182132720947266, -1.515297770500183, -1.5120404958724976, -1.5083775520324707, -1.504228115081787, -1.4994888305664062, -1.494024395942688, -1.4876550436019897, -1.4801363945007324, -1.4711276292800903, -1.4601391553878784, -1.4464412927627563, -1.4288992881774902, -1.4056476354599, -1.3734008073806763, -1.3258177042007446, -1.249045729637146, -1.1071487665176392, -0.7853981852531433, 0.0, 0.46364760398864746, 0.7853981852531433, 0.9827937483787537, 1.1071487665176392, 1.1902899742126465, 1.249045729637146, 1.292496681213379, 1.3258177042007446, 1.3521274328231812, 1.3734008073806763, 1.3909428119659424, 1.4056476354599, 1.4181469678878784, 1.4288992881774902, 1.4382448196411133, 1.4464412927627563, 1.4536875486373901, 1.4601391553878784, 1.4659193754196167, 1.4711276292800903, 1.4758446216583252, 1.4801363945007324, 1.4840580224990845, 1.4876550436019897, 1.4909663200378418, 1.494024395942688, 1.4968572854995728, 1.4994888305664062, 1.5019398927688599, 1.504228115081787, 1.5063694715499878, 1.5083775520324707, 1.510264277458191, 1.5120404958724976, 1.5137155055999756, 1.515297770500183, 1.5167948007583618, 1.5182132720947266, 1.5195591449737549, 1.5208379030227661, 1.5220544338226318, 1.523213267326355, 1.5243182182312012, 1.525373101234436, 1.5263811349868774, 1.5273454189300537, 1.528268814086914, 1.5291537046432495, 1.5300025939941406, 1.5308176279067993, 1.5316007137298584, 1.5323537588119507, 1.5330784320831299, 1.5337761640548706, 1.5344487428665161, 1.5350972414016724, 1.5357229709625244, 1.5363272428512573, 1.5369110107421875, 1.537475347518921, 1.538021206855774, 1.5385494232177734, 1.5390609502792358, -1.5395565032958984, -1.5390609502792358, -1.5385494232177734, -1.538021206855774, -1.537475347518921, -1.5369110107421875, -1.5363272428512573, -1.5357229709625244, -1.5350972414016724, -1.5344487428665161, -1.5337761640548706, -1.5330784320831299, -1.5323537588119507, -1.5316007137298584, -1.5308176279067993, -1.5300025939941406, -1.5291537046432495, -1.528268814086914, -1.5273454189300537, -1.5263811349868774, -1.525373101234436, -1.5243182182312012, -1.523213267326355, -1.5220544338226318, -1.5208379030227661, -1.5195591449737549, -1.5182132720947266, -1.5167948007583618, -1.515297770500183, -1.5137155055999756, -1.5120404958724976, -1.510264277458191, -1.5083775520324707, -1.5063694715499878, -1.504228115081787, -1.5019398927688599, -1.4994888305664062, -1.4968572854995728, -1.494024395942688, -1.4909663200378418, -1.4876550436019897, -1.4840580224990845, -1.4801363945007324, -1.4758446216583252, -1.4711276292800903, -1.4659193754196167, -1.4601391553878784, -1.4536875486373901, -1.4464412927627563, -1.4382448196411133, -1.4288992881774902, -1.4181469678878784, -1.4056476354599, -1.3909428119659424, -1.3734008073806763, -1.3521274328231812, -1.3258177042007446, -1.292496681213379, -1.249045729637146, -1.1902899742126465, -1.1071487665176392, -0.9827937483787537, -0.7853981852531433, -0.46364760398864746, 0.0, 0.32175055146217346, 0.588002622127533, 0.7853981852531433, 0.9272952079772949, 1.0303767919540405, 1.1071487665176392, 1.1659045219421387, 1.2120256423950195, 1.249045729637146, 1.2793395519256592, 1.3045443296432495, 1.3258177042007446, 1.3439974784851074, 1.3597029447555542, 1.3734008073806763, 1.3854483366012573, 1.3961241245269775, 1.4056476354599, 1.4141944646835327, 1.4219063520431519, 1.4288992881774902, 1.4352686405181885, 1.4410938024520874, 1.4464412927627563, 1.4513673782348633, 1.4559197425842285, 1.4601391553878784, 1.464060664176941, 1.4677146673202515, 1.4711276292800903, 1.4743225574493408, 1.477319598197937, 1.4801363945007324, 1.4827889204025269, 1.4852910041809082, 1.4876550436019897, 1.4898922443389893, 1.49201238155365, 1.494024395942688, 1.4959365129470825, 1.497755765914917, 1.4994888305664062, 1.5011417865753174, 1.5027198791503906, 1.504228115081787, 1.5056711435317993, 1.507053017616272, 1.5083775520324707, 1.5096482038497925, 1.5108681917190552, 1.5120404958724976, 1.5131678581237793, 1.5142529010772705, 1.515297770500183, 1.516304850578308, 1.5172760486602783, 1.5182132720947266, 1.5191181898117065, 1.5199925899505615, 1.5208379030227661, 1.521655559539795, 1.5224469900131226, 1.523213267326355, -1.5239555835723877, -1.523213267326355, -1.5224469900131226, -1.521655559539795, -1.5208379030227661, -1.5199925899505615, -1.5191181898117065, -1.5182132720947266, -1.5172760486602783, -1.516304850578308, -1.515297770500183, -1.5142529010772705, -1.5131678581237793, -1.5120404958724976, -1.5108681917190552, -1.5096482038497925, -1.5083775520324707, -1.507053017616272, -1.5056711435317993, -1.504228115081787, -1.5027198791503906, -1.5011417865753174, -1.4994888305664062, -1.497755765914917, -1.4959365129470825, -1.494024395942688, -1.49201238155365, -1.4898922443389893, -1.4876550436019897, -1.4852910041809082, -1.4827889204025269, -1.4801363945007324, -1.477319598197937, -1.4743225574493408, -1.4711276292800903, -1.4677146673202515, -1.464060664176941, -1.4601391553878784, -1.4559197425842285, -1.4513673782348633, -1.4464412927627563, -1.4410938024520874, -1.4352686405181885, -1.4288992881774902, -1.4219063520431519, -1.4141944646835327, -1.4056476354599, -1.3961241245269775, -1.3854483366012573, -1.3734008073806763, -1.3597029447555542, -1.3439974784851074, -1.3258177042007446, -1.3045443296432495, -1.2793395519256592, -1.249045729637146, -1.2120256423950195, -1.1659045219421387, -1.1071487665176392, -1.0303767919540405, -0.9272952079772949, -0.7853981852531433, -0.588002622127533, -0.32175055146217346, 0.0, 0.244978666305542, 0.46364760398864746, 0.6435011029243469, 0.7853981852531433, 0.8960554003715515, 0.9827937483787537, 1.0516501665115356, 1.1071487665176392, 1.1525720357894897, 1.1902899742126465, 1.2220252752304077, 1.249045729637146, 1.2722973823547363, 1.292496681213379, 1.3101938962936401, 1.3258177042007446, 1.3397057056427002, 1.3521274328231812, 1.363300085067749, 1.3734008073806763, 1.3825747966766357, 1.3909428119659424, 1.398605465888977, 1.4056476354599, 1.4121410846710205, 1.4181469678878784, 1.423717975616455, 1.4288992881774902, 1.433730125427246, 1.4382448196411133, 1.44247305393219, 1.4464412927627563, 1.4501726627349854, 1.4536875486373901, 1.4570043087005615, 1.4601391553878784, 1.4631065130233765, 1.4659193754196167, 1.4685896635055542, 1.4711276292800903, 1.4735431671142578, 1.4758446216583252, 1.4780399799346924, 1.4801363945007324, 1.4821404218673706, 1.4840580224990845, 1.4858945608139038, 1.4876550436019897, 1.4893442392349243, 1.4909663200378418, 1.4925252199172974, 1.494024395942688, 1.4954674243927002, 1.4968572854995728, 1.4981968402862549, 1.4994888305664062, 1.5007357597351074, 1.5019398927688599, 1.503103256225586, 1.504228115081787, 1.5053162574768066, 1.5063694715499878, 1.5073894262313843, -1.5083775520324707, -1.5073894262313843, -1.5063694715499878, -1.5053162574768066, -1.504228115081787, -1.503103256225586, -1.5019398927688599, -1.5007357597351074, -1.4994888305664062, -1.4981968402862549, -1.4968572854995728, -1.4954674243927002, -1.494024395942688, -1.4925252199172974, -1.4909663200378418, -1.4893442392349243, -1.4876550436019897, -1.4858945608139038, -1.4840580224990845, -1.4821404218673706, -1.4801363945007324, -1.4780399799346924, -1.4758446216583252, -1.4735431671142578, -1.4711276292800903, -1.4685896635055542, -1.4659193754196167, -1.4631065130233765, -1.4601391553878784, -1.4570043087005615, -1.4536875486373901, -1.4501726627349854, -1.4464412927627563, -1.44247305393219, -1.4382448196411133, -1.433730125427246, -1.4288992881774902, -1.423717975616455, -1.4181469678878784, -1.4121410846710205, -1.4056476354599, -1.398605465888977, -1.3909428119659424, -1.3825747966766357, -1.3734008073806763, -1.363300085067749, -1.3521274328231812, -1.3397057056427002, -1.3258177042007446, -1.3101938962936401, -1.292496681213379, -1.2722973823547363, -1.249045729637146, -1.2220252752304077, -1.1902899742126465, -1.1525720357894897, -1.1071487665176392, -1.0516501665115356, -0.9827937483787537, -0.8960554003715515, -0.7853981852531433, -0.6435011029243469, -0.46364760398864746, -0.244978666305542, 0.0, 0.19739556312561035, 0.38050636649131775, 0.5404195189476013, 0.6747409701347351, 0.7853981852531433, 0.876058042049408, 0.9505468606948853, 1.0121970176696777, 1.0636978149414062, 1.1071487665176392, 1.1441688537597656, 1.176005244255066, 1.2036224603652954, 1.2277723550796509, 1.249045729637146, 1.267911434173584, 1.2847448587417603, 1.299849510192871, 1.3134726285934448, 1.3258177042007446, 1.3370531797409058, 1.3473197221755981, 1.3567355871200562, 1.3654009103775024, 1.3734008073806763, 1.3808079957962036, 1.3876855373382568, 1.3940874338150024, 1.4000611305236816, 1.4056476354599, 1.4108831882476807, 1.415799617767334, 1.4204249382019043, 1.4247840642929077, 1.4288992881774902, 1.4327902793884277, 1.4364749193191528, 1.4399689435958862, 1.4432867765426636, 1.4464412927627563, 1.44944429397583, 1.4523063898086548, 1.4550371170043945, 1.457645297050476, 1.4601391553878784, 1.462525725364685, 1.46481192111969, 1.4670039415359497, 1.4691075086593628, 1.4711276292800903, 1.473069429397583, 1.4749372005462646, 1.4767351150512695, 1.4784669876098633, 1.4801363945007324, 1.481746792793274, 1.483301043510437, 1.484802007675171, 1.4862525463104248, 1.4876550436019897, 1.4890120029449463, 1.4903253316879272, 1.491597294807434, -1.49282968044281, -1.491597294807434, -1.4903253316879272, -1.4890120029449463, -1.4876550436019897, -1.4862525463104248, -1.484802007675171, -1.483301043510437, -1.481746792793274, -1.4801363945007324, -1.4784669876098633, -1.4767351150512695, -1.4749372005462646, -1.473069429397583, -1.4711276292800903, -1.4691075086593628, -1.4670039415359497, -1.46481192111969, -1.462525725364685, -1.4601391553878784, -1.457645297050476, -1.4550371170043945, -1.4523063898086548, -1.44944429397583, -1.4464412927627563, -1.4432867765426636, -1.4399689435958862, -1.4364749193191528, -1.4327902793884277, -1.4288992881774902, -1.4247840642929077, -1.4204249382019043, -1.415799617767334, -1.4108831882476807, -1.4056476354599, -1.4000611305236816, -1.3940874338150024, -1.3876855373382568, -1.3808079957962036, -1.3734008073806763, -1.3654009103775024, -1.3567355871200562, -1.3473197221755981, -1.3370531797409058, -1.3258177042007446, -1.3134726285934448, -1.299849510192871, -1.2847448587417603, -1.267911434173584, -1.249045729637146, -1.2277723550796509, -1.2036224603652954, -1.176005244255066, -1.1441688537597656, -1.1071487665176392, -1.0636978149414062, -1.0121970176696777, -0.9505468606948853, -0.876058042049408, -0.7853981852531433, -0.6747409701347351, -0.5404195189476013, -0.38050636649131775, -0.19739556312561035, 0.0, 0.16514867544174194, 0.32175055146217346, 0.46364760398864746, 0.588002622127533, 0.6947382688522339, 0.7853981852531433, 0.8621700406074524, 0.9272952079772949, 0.9827937483787537, 1.0303767919540405, 1.071449637413025, 1.1071487665176392, 1.1383885145187378, 1.1659045219421387, 1.1902899742126465, 1.2120256423950195, 1.2315037250518799, 1.249045729637146, 1.2649174928665161, 1.2793395519256592, 1.292496681213379, 1.3045443296432495, 1.3156139850616455, 1.3258177042007446, 1.3352513313293457, 1.3439974784851074, 1.3521274328231812, 1.3597029447555542, 1.3667783737182617, 1.3734008073806763, 1.379611849784851, 1.3854483366012573, 1.3909428119659424, 1.3961241245269775, 1.4010180234909058, 1.4056476354599, 1.4100335836410522, 1.4141944646835327, 1.4181469678878784, 1.4219063520431519, 1.4254863262176514, 1.4288992881774902, 1.4321565628051758, 1.4352686405181885, 1.4382448196411133, 1.4410938024520874, 1.4438235759735107, 1.4464412927627563, 1.4489538669586182, 1.4513673782348633, 1.4536875486373901, 1.4559197425842285, 1.4580687284469604, 1.4601391553878784, 1.4621350765228271, 1.464060664176941, 1.4659193754196167, 1.4677146673202515, 1.4694498777389526, 1.4711276292800903, 1.4727510213851929, 1.4743225574493408, 1.4758446216583252, -1.477319598197937, -1.4758446216583252, -1.4743225574493408, -1.4727510213851929, -1.4711276292800903, -1.4694498777389526, -1.4677146673202515, -1.4659193754196167, -1.464060664176941, -1.4621350765228271, -1.4601391553878784, -1.4580687284469604, -1.4559197425842285, -1.4536875486373901, -1.4513673782348633, -1.4489538669586182, -1.4464412927627563, -1.4438235759735107, -1.4410938024520874, -1.4382448196411133, -1.4352686405181885, -1.4321565628051758, -1.4288992881774902, -1.4254863262176514, -1.4219063520431519, -1.4181469678878784, -1.4141944646835327, -1.4100335836410522, -1.4056476354599, -1.4010180234909058, -1.3961241245269775, -1.3909428119659424, -1.3854483366012573, -1.379611849784851, -1.3734008073806763, -1.3667783737182617, -1.3597029447555542, -1.3521274328231812, -1.3439974784851074, -1.3352513313293457, -1.3258177042007446, -1.3156139850616455, -1.3045443296432495, -1.292496681213379, -1.2793395519256592, -1.2649174928665161, -1.249045729637146, -1.2315037250518799, -1.2120256423950195, -1.1902899742126465, -1.1659045219421387, -1.1383885145187378, -1.1071487665176392, -1.071449637413025, -1.0303767919540405, -0.9827937483787537, -0.9272952079772949, -0.8621700406074524, -0.7853981852531433, -0.6947382688522339, -0.588002622127533, -0.46364760398864746, -0.32175055146217346, -0.16514867544174194, 0.0, 0.141897052526474, 0.2782996594905853, 0.4048917889595032, 0.5191460847854614, 0.6202495098114014, 0.7086262702941895, 0.7853981852531433, 0.8519663214683533, 0.909753143787384, 0.9600703716278076, 1.004067063331604, 1.0427218675613403, 1.076854944229126, 1.1071487665176392, 1.1341692209243774, 1.1583858728408813, 1.1801892518997192, 1.1999050378799438, 1.2178059816360474, 1.234121561050415, 1.249045729637146, 1.262743592262268, 1.2753554582595825, 1.2870022058486938, 1.2977876663208008, 1.307801604270935, 1.317122220993042, 1.3258177042007446, 1.3339475393295288, 1.341564416885376, 1.3487144708633423, 1.3554385900497437, 1.3617733716964722, 1.367751121520996, 1.3734008073806763, 1.3787482976913452, 1.3838170766830444, 1.3886280059814453, 1.393200159072876, 1.3975507020950317, 1.4016951322555542, 1.4056476354599, 1.4094212055206299, 1.4130276441574097, 1.4164775609970093, 1.419780969619751, 1.4229469299316406, 1.4259837865829468, 1.4288992881774902, 1.431700348854065, 1.4343937635421753, 1.4369853734970093, 1.4394809007644653, 1.4418855905532837, 1.4442042112350464, 1.4464412927627563, 1.4486011266708374, 1.4506876468658447, 1.4527043104171753, 1.4546546936035156, 1.4565420150756836, 1.458369255065918, 1.4601391553878784, -1.461854338645935, -1.4601391553878784, -1.458369255065918, -1.4565420150756836, -1.4546546936035156, -1.4527043104171753, -1.4506876468658447, -1.4486011266708374, -1.4464412927627563, -1.4442042112350464, -1.4418855905532837, -1.4394809007644653, -1.4369853734970093, -1.4343937635421753, -1.431700348854065, -1.4288992881774902, -1.4259837865829468, -1.4229469299316406, -1.419780969619751, -1.4164775609970093, -1.4130276441574097, -1.4094212055206299, -1.4056476354599, -1.4016951322555542, -1.3975507020950317, -1.393200159072876, -1.3886280059814453, -1.3838170766830444, -1.3787482976913452, -1.3734008073806763, -1.367751121520996, -1.3617733716964722, -1.3554385900497437, -1.3487144708633423, -1.341564416885376, -1.3339475393295288, -1.3258177042007446, -1.317122220993042, -1.307801604270935, -1.2977876663208008, -1.2870022058486938, -1.2753554582595825, -1.262743592262268, -1.249045729637146, -1.234121561050415, -1.2178059816360474, -1.1999050378799438, -1.1801892518997192, -1.1583858728408813, -1.1341692209243774, -1.1071487665176392, -1.076854944229126, -1.0427218675613403, -1.004067063331604, -0.9600703716278076, -0.909753143787384, -0.8519663214683533, -0.7853981852531433, -0.7086262702941895, -0.6202495098114014, -0.5191460847854614, -0.4048917889595032, -0.2782996594905853, -0.141897052526474, 0.0, 0.12435499578714371, 0.244978666305542, 0.3587706685066223, 0.46364760398864746, 0.5585992932319641, 0.6435011029243469, 0.7188299894332886, 0.7853981852531433, 0.8441540002822876, 0.8960554003715515, 0.9420000314712524, 0.9827937483787537, 1.0191413164138794, 1.0516501665115356, 1.0808390378952026, 1.1071487665176392, 1.1309537887573242, 1.1525720357894897, 1.172273874282837, 1.1902899742126465, 1.206817388534546, 1.2220252752304077, 1.236059546470642, 1.249045729637146, 1.2610933780670166, 1.2722973823547363, 1.282740831375122, 1.292496681213379, 1.301628828048706, 1.3101938962936401, 1.318242073059082, 1.3258177042007446, 1.3329603672027588, 1.3397057056427002, 1.3460851907730103, 1.3521274328231812, 1.3578579425811768, 1.363300085067749, 1.3684747219085693, 1.3734008073806763, 1.3780956268310547, 1.3825747966766357, 1.3868528604507446, 1.3909428119659424, 1.3948566913604736, 1.398605465888977, 1.402199387550354, 1.4056476354599, 1.408958911895752, 1.4121410846710205, 1.4152015447616577, 1.4181469678878784, 1.420983910560608, 1.423717975616455, 1.4263547658920288, 1.4288992881774902, 1.4313563108444214, 1.433730125427246, 1.4360250234603882, 1.4382448196411133, 1.4403929710388184, 1.44247305393219, 1.4444881677627563, -1.4464412927627563, -1.4444881677627563, -1.44247305393219, -1.4403929710388184, -1.4382448196411133, -1.4360250234603882, -1.433730125427246, -1.4313563108444214, -1.4288992881774902, -1.4263547658920288, -1.423717975616455, -1.420983910560608, -1.4181469678878784, -1.4152015447616577, -1.4121410846710205, -1.408958911895752, -1.4056476354599, -1.402199387550354, -1.398605465888977, -1.3948566913604736, -1.3909428119659424, -1.3868528604507446, -1.3825747966766357, -1.3780956268310547, -1.3734008073806763, -1.3684747219085693, -1.363300085067749, -1.3578579425811768, -1.3521274328231812, -1.3460851907730103, -1.3397057056427002, -1.3329603672027588, -1.3258177042007446, -1.318242073059082, -1.3101938962936401, -1.301628828048706, -1.292496681213379, -1.282740831375122, -1.2722973823547363, -1.2610933780670166, -1.249045729637146, -1.236059546470642, -1.2220252752304077, -1.206817388534546, -1.1902899742126465, -1.172273874282837, -1.1525720357894897, -1.1309537887573242, -1.1071487665176392, -1.0808390378952026, -1.0516501665115356, -1.0191413164138794, -0.9827937483787537, -0.9420000314712524, -0.8960554003715515, -0.8441540002822876, -0.7853981852531433, -0.7188299894332886, -0.6435011029243469, -0.5585992932319641, -0.46364760398864746, -0.3587706685066223, -0.244978666305542, -0.12435499578714371, 0.0, 0.1106572225689888, 0.21866895258426666, 0.32175055146217346, 0.4182243347167969, 0.5070984959602356, 0.588002622127533, 0.6610431671142578, 0.726642370223999, 0.7853981852531433, 0.8379812240600586, 0.88506680727005, 0.9272952079772949, 0.9652516841888428, 0.9994588494300842, 1.0303767919540405, 1.0584068298339844, 1.0838971138000488, 1.1071487665176392, 1.1284221410751343, 1.1479424238204956, 1.1659045219421387, 1.182477593421936, 1.1978086233139038, 1.2120256423950195, 1.225240707397461, 1.2375520467758179, 1.249045729637146, 1.2597980499267578, 1.2698761224746704, 1.2793395519256592, 1.2882413864135742, 1.2966288328170776, 1.3045443296432495, 1.3120254278182983, 1.3191063404083252, 1.3258177042007446, 1.3321870565414429, 1.3382394313812256, 1.3439974784851074, 1.3494819402694702, 1.3547114133834839, 1.3597029447555542, 1.3644723892211914, 1.369033932685852, 1.3734008073806763, 1.3775848150253296, 1.3815972805023193, 1.3854483366012573, 1.3891475200653076, 1.3927034139633179, 1.3961241245269775, 1.3994171619415283, 1.4025895595550537, 1.4056476354599, 1.408597469329834, 1.4114446640014648, 1.4141944646835327, 1.4168516397476196, 1.419420838356018, 1.4219063520431519, 1.4243121147155762, 1.4266419410705566, 1.4288992881774902, -1.4310874938964844, -1.4288992881774902, -1.4266419410705566, -1.4243121147155762, -1.4219063520431519, -1.419420838356018, -1.4168516397476196, -1.4141944646835327, -1.4114446640014648, -1.408597469329834, -1.4056476354599, -1.4025895595550537, -1.3994171619415283, -1.3961241245269775, -1.3927034139633179, -1.3891475200653076, -1.3854483366012573, -1.3815972805023193, -1.3775848150253296, -1.3734008073806763, -1.369033932685852, -1.3644723892211914, -1.3597029447555542, -1.3547114133834839, -1.3494819402694702, -1.3439974784851074, -1.3382394313812256, -1.3321870565414429, -1.3258177042007446, -1.3191063404083252, -1.3120254278182983, -1.3045443296432495, -1.2966288328170776, -1.2882413864135742, -1.2793395519256592, -1.2698761224746704, -1.2597980499267578, -1.249045729637146, -1.2375520467758179, -1.225240707397461, -1.2120256423950195, -1.1978086233139038, -1.182477593421936, -1.1659045219421387, -1.1479424238204956, -1.1284221410751343, -1.1071487665176392, -1.0838971138000488, -1.0584068298339844, -1.0303767919540405, -0.9994588494300842, -0.9652516841888428, -0.9272952079772949, -0.88506680727005, -0.8379812240600586, -0.7853981852531433, -0.726642370223999, -0.6610431671142578, -0.588002622127533, -0.5070984959602356, -0.4182243347167969, -0.32175055146217346, -0.21866895258426666, -0.1106572225689888, 0.0, 0.09966865181922913, 0.19739556312561035, 0.29145678877830505, 0.38050636649131775, 0.46364760398864746, 0.5404195189476013, 0.6107259392738342, 0.6747409701347351, 0.7328150868415833, 0.7853981852531433, 0.832981288433075, 0.876058042049408, 0.9151006937026978, 0.9505468606948853, 0.9827937483787537, 1.0121970176696777, 1.0390722751617432, 1.0636978149414062, 1.0863183736801147, 1.1071487665176392, 1.1263771057128906, 1.1441688537597656, 1.160668969154358, 1.176005244255066, 1.1902899742126465, 1.2036224603652954, 1.2160906791687012, 1.2277723550796509, 1.238736867904663, 1.249045729637146, 1.2587542533874512, 1.267911434173584, 1.2765617370605469, 1.2847448587417603, 1.292496681213379, 1.299849510192871, 1.3068325519561768, 1.3134726285934448, 1.3197935819625854, 1.3258177042007446, 1.3315647840499878, 1.3370531797409058, 1.3422996997833252, 1.3473197221755981, 1.3521274328231812, 1.3567355871200562, 1.3611564636230469, 1.3654009103775024, 1.3694791793823242, 1.3734008073806763, 1.3771743774414062, 1.3808079957962036, 1.3843094110488892, 1.3876855373382568, 1.3909428119659424, 1.3940874338150024, 1.3971251249313354, 1.4000611305236816, 1.4029004573822021, 1.4056476354599, 1.4083071947097778, 1.4108831882476807, 1.413379430770874, -1.415799617767334, -1.413379430770874, -1.4108831882476807, -1.4083071947097778, -1.4056476354599, -1.4029004573822021, -1.4000611305236816, -1.3971251249313354, -1.3940874338150024, -1.3909428119659424, -1.3876855373382568, -1.3843094110488892, -1.3808079957962036, -1.3771743774414062, -1.3734008073806763, -1.3694791793823242, -1.3654009103775024, -1.3611564636230469, -1.3567355871200562, -1.3521274328231812, -1.3473197221755981, -1.3422996997833252, -1.3370531797409058, -1.3315647840499878, -1.3258177042007446, -1.3197935819625854, -1.3134726285934448, -1.3068325519561768, -1.299849510192871, -1.292496681213379, -1.2847448587417603, -1.2765617370605469, -1.267911434173584, -1.2587542533874512, -1.249045729637146, -1.238736867904663, -1.2277723550796509, -1.2160906791687012, -1.2036224603652954, -1.1902899742126465, -1.176005244255066, -1.160668969154358, -1.1441688537597656, -1.1263771057128906, -1.1071487665176392, -1.0863183736801147, -1.0636978149414062, -1.0390722751617432, -1.0121970176696777, -0.9827937483787537, -0.9505468606948853, -0.9151006937026978, -0.876058042049408, -0.832981288433075, -0.7853981852531433, -0.7328150868415833, -0.6747409701347351, -0.6107259392738342, -0.5404195189476013, -0.46364760398864746, -0.38050636649131775, -0.29145678877830505, -0.19739556312561035, -0.09966865181922913, 0.0, 0.09065988659858704, 0.17985349893569946, 0.2662520408630371, 0.34877100586891174, 0.4266274869441986, 0.4993467330932617, 0.5667291879653931, 0.6287962794303894, 0.6857295036315918, 0.7378150820732117, 0.7853981852531433, 0.8288490772247314, 0.8685393929481506, 0.9048271179199219, 0.938047468662262, 0.9685089588165283, 0.9964914917945862, 1.0222469568252563, 1.046000599861145, 1.067953109741211, 1.0882830619812012, 1.1071487665176392, 1.1246907711029053, 1.1410340070724487, 1.1562894582748413, 1.1705557107925415, 1.1839206218719482, 1.1964627504348755, 1.2082520723342896, 1.2193515300750732, 1.2298173904418945, 1.239700198173523, 1.249045729637146, 1.2578951120376587, 1.2662854194641113, 1.2742505073547363, 1.2818208932876587, 1.2890244722366333, 1.295886516571045, 1.3024301528930664, 1.3086764812469482, 1.3146449327468872, 1.3203532695770264, 1.3258177042007446, 1.3310532569885254, 1.3360737562179565, 1.34089195728302, 1.3455195426940918, 1.3499675989151, 1.3542460203170776, 1.3583643436431885, 1.3623311519622803, 1.3661545515060425, 1.3698420524597168, 1.3734008073806763, 1.376837134361267, 1.380157470703125, 1.3833671808242798, 1.3864718675613403, 1.3894765377044678, 1.3923858404159546, 1.3952041864395142, 1.3979357481002808, -1.4005844593048096, -1.3979357481002808, -1.3952041864395142, -1.3923858404159546, -1.3894765377044678, -1.3864718675613403, -1.3833671808242798, -1.380157470703125, -1.376837134361267, -1.3734008073806763, -1.3698420524597168, -1.3661545515060425, -1.3623311519622803, -1.3583643436431885, -1.3542460203170776, -1.3499675989151, -1.3455195426940918, -1.34089195728302, -1.3360737562179565, -1.3310532569885254, -1.3258177042007446, -1.3203532695770264, -1.3146449327468872, -1.3086764812469482, -1.3024301528930664, -1.295886516571045, -1.2890244722366333, -1.2818208932876587, -1.2742505073547363, -1.2662854194641113, -1.2578951120376587, -1.249045729637146, -1.239700198173523, -1.2298173904418945, -1.2193515300750732, -1.2082520723342896, -1.1964627504348755, -1.1839206218719482, -1.1705557107925415, -1.1562894582748413, -1.1410340070724487, -1.1246907711029053, -1.1071487665176392, -1.0882830619812012, -1.067953109741211, -1.046000599861145, -1.0222469568252563, -0.9964914917945862, -0.9685089588165283, -0.938047468662262, -0.9048271179199219, -0.8685393929481506, -0.8288490772247314, -0.7853981852531433, -0.7378150820732117, -0.6857295036315918, -0.6287962794303894, -0.5667291879653931, -0.4993467330932617, -0.4266274869441986, -0.34877100586891174, -0.2662520408630371, -0.17985349893569946, -0.09065988659858704, 0.0, 0.08314123004674911, 0.16514867544174194, 0.244978666305542, 0.32175055146217346, 0.3947911262512207, 0.46364760398864746, 0.5280744433403015, 0.588002622127533, 0.6435011029243469, 0.6947382688522339, 0.7419472932815552, 0.7853981852531433, 0.8253768682479858, 0.8621700406074524, 0.8960554003715515, 0.9272952079772949, 0.9561333656311035, 0.9827937483787537, 1.0074800252914429, 1.0303767919540405, 1.0516501665115356, 1.071449637413025, 1.0899090766906738, 1.1071487665176392, 1.1232763528823853, 1.1383885145187378, 1.1525720357894897, 1.1659045219421387, 1.17845618724823, 1.1902899742126465, 1.2014626264572144, 1.2120256423950195, 1.2220252752304077, 1.2315037250518799, 1.2404990196228027, 1.249045729637146, 1.2571756839752197, 1.2649174928665161, 1.2722973823547363, 1.2793395519256592, 1.286065936088562, 1.292496681213379, 1.2986503839492798, 1.3045443296432495, 1.3101938962936401, 1.3156139850616455, 1.3208177089691162, 1.3258177042007446, 1.330625295639038, 1.3352513313293457, 1.3397057056427002, 1.3439974784851074, 1.3481353521347046, 1.3521274328231812, 1.3559808731079102, 1.3597029447555542, 1.363300085067749, 1.3667783737182617, 1.3701434135437012, 1.3734008073806763, 1.376555323600769, 1.379611849784851, 1.3825747966766357, -1.3854483366012573, -1.3825747966766357, -1.379611849784851, -1.376555323600769, -1.3734008073806763, -1.3701434135437012, -1.3667783737182617, -1.363300085067749, -1.3597029447555542, -1.3559808731079102, -1.3521274328231812, -1.3481353521347046, -1.3439974784851074, -1.3397057056427002, -1.3352513313293457, -1.330625295639038, -1.3258177042007446, -1.3208177089691162, -1.3156139850616455, -1.3101938962936401, -1.3045443296432495, -1.2986503839492798, -1.292496681213379, -1.286065936088562, -1.2793395519256592, -1.2722973823547363, -1.2649174928665161, -1.2571756839752197, -1.249045729637146, -1.2404990196228027, -1.2315037250518799, -1.2220252752304077, -1.2120256423950195, -1.2014626264572144, -1.1902899742126465, -1.17845618724823, -1.1659045219421387, -1.1525720357894897, -1.1383885145187378, -1.1232763528823853, -1.1071487665176392, -1.0899090766906738, -1.071449637413025, -1.0516501665115356, -1.0303767919540405, -1.0074800252914429, -0.9827937483787537, -0.9561333656311035, -0.9272952079772949, -0.8960554003715515, -0.8621700406074524, -0.8253768682479858, -0.7853981852531433, -0.7419472932815552, -0.6947382688522339, -0.6435011029243469, -0.588002622127533, -0.5280744433403015, -0.46364760398864746, -0.3947911262512207, -0.32175055146217346, -0.244978666305542, -0.16514867544174194, -0.08314123004674911, 0.0, 0.07677189260721207, 0.15264932811260223, 0.22679884731769562, 0.2984989285469055, 0.36717382073402405, 0.43240776658058167, 0.49394136667251587, 0.5516549944877625, 0.6055446863174438, 0.6556956171989441, 0.7022569179534912, 0.7454195022583008, 0.7853981852531433, 0.8224182724952698, 0.8567056059837341, 0.8884797692298889, 0.9179496765136719, 0.9453113079071045, 0.9707460999488831, 0.994421124458313, 1.016488790512085, 1.03708815574646, 1.056344985961914, 1.0743736028671265, 1.091277003288269, 1.1071487665176392, 1.1220729351043701, 1.136126160621643, 1.1493771076202393, 1.1618884801864624, 1.1737169027328491, 1.1849136352539062, 1.1955255270004272, 1.2055948972702026, 1.2151604890823364, 1.224257469177246, 1.2329181432724, 1.241171956062317, 1.249045729637146, 1.2565643787384033, 1.2637505531311035, 1.270625114440918, 1.277207374572754, 1.2835148572921753, 1.2895641326904297, 1.2953702211380005, 1.3009471893310547, 1.3063079118728638, 1.311464548110962, 1.316428303718567, 1.32120943069458, 1.3258177042007446, 1.3302620649337769, 1.3345510959625244, 1.338692545890808, 1.3426936864852905, 1.3465615510940552, 1.3503025770187378, 1.353922724723816, 1.357427716255188, 1.3608227968215942, 1.3641130924224854, 1.3673032522201538, -1.3703978061676025, -1.3673032522201538, -1.3641130924224854, -1.3608227968215942, -1.357427716255188, -1.353922724723816, -1.3503025770187378, -1.3465615510940552, -1.3426936864852905, -1.338692545890808, -1.3345510959625244, -1.3302620649337769, -1.3258177042007446, -1.32120943069458, -1.316428303718567, -1.311464548110962, -1.3063079118728638, -1.3009471893310547, -1.2953702211380005, -1.2895641326904297, -1.2835148572921753, -1.277207374572754, -1.270625114440918, -1.2637505531311035, -1.2565643787384033, -1.249045729637146, -1.241171956062317, -1.2329181432724, -1.224257469177246, -1.2151604890823364, -1.2055948972702026, -1.1955255270004272, -1.1849136352539062, -1.1737169027328491, -1.1618884801864624, -1.1493771076202393, -1.136126160621643, -1.1220729351043701, -1.1071487665176392, -1.091277003288269, -1.0743736028671265, -1.056344985961914, -1.03708815574646, -1.016488790512085, -0.994421124458313, -0.9707460999488831, -0.9453113079071045, -0.9179496765136719, -0.8884797692298889, -0.8567056059837341, -0.8224182724952698, -0.7853981852531433, -0.7454195022583008, -0.7022569179534912, -0.6556956171989441, -0.6055446863174438, -0.5516549944877625, -0.49394136667251587, -0.43240776658058167, -0.36717382073402405, -0.2984989285469055, -0.22679884731769562, -0.15264932811260223, -0.07677189260721207, 0.0, 0.0713074654340744, 0.141897052526474, 0.21109333634376526, 0.2782996594905853, 0.3430239260196686, 0.4048917889595032, 0.46364760398864746, 0.5191460847854614, 0.5713374614715576, 0.6202495098114014, 0.6659692525863647, 0.7086262702941895, 0.7483780384063721, 0.7853981852531433, 0.8198672533035278, 0.8519663214683533, 0.8818719387054443, 0.909753143787384, 0.9357696175575256, 0.9600703716278076, 0.9827937483787537, 1.004067063331604, 1.0240074396133423, 1.0427218675613403, 1.0603079795837402, 1.076854944229126, 1.0924439430236816, 1.1071487665176392, 1.1210367679595947, 1.1341692209243774, 1.146601915359497, 1.1583858728408813, 1.169567584991455, 1.1801892518997192, 1.1902899742126465, 1.1999050378799438, 1.2090671062469482, 1.2178059816360474, 1.2261489629745483, 1.234121561050415, 1.2417466640472412, 1.249045729637146, 1.2560386657714844, 1.262743592262268, 1.2691773176193237, 1.2753554582595825, 1.2812926769256592, 1.2870022058486938, 1.292496681213379, 1.2977876663208008, 1.302885890007019, 1.307801604270935, 1.3125441074371338, 1.317122220993042, 1.3215441703796387, 1.3258177042007446, 1.3299498558044434, 1.3339475393295288, 1.3378170728683472, 1.341564416885376, 1.3451950550079346, 1.3487144708633423, 1.3521274328231812, -1.3554385900497437, -1.3521274328231812, -1.3487144708633423, -1.3451950550079346, -1.341564416885376, -1.3378170728683472, -1.3339475393295288, -1.3299498558044434, -1.3258177042007446, -1.3215441703796387, -1.317122220993042, -1.3125441074371338, -1.307801604270935, -1.302885890007019, -1.2977876663208008, -1.292496681213379, -1.2870022058486938, -1.2812926769256592, -1.2753554582595825, -1.2691773176193237, -1.262743592262268, -1.2560386657714844, -1.249045729637146, -1.2417466640472412, -1.234121561050415, -1.2261489629745483, -1.2178059816360474, -1.2090671062469482, -1.1999050378799438, -1.1902899742126465, -1.1801892518997192, -1.169567584991455, -1.1583858728408813, -1.146601915359497, -1.1341692209243774, -1.1210367679595947, -1.1071487665176392, -1.0924439430236816, -1.076854944229126, -1.0603079795837402, -1.0427218675613403, -1.0240074396133423, -1.004067063331604, -0.9827937483787537, -0.9600703716278076, -0.9357696175575256, -0.909753143787384, -0.8818719387054443, -0.8519663214683533, -0.8198672533035278, -0.7853981852531433, -0.7483780384063721, -0.7086262702941895, -0.6659692525863647, -0.6202495098114014, -0.5713374614715576, -0.5191460847854614, -0.46364760398864746, -0.4048917889595032, -0.3430239260196686, -0.2782996594905853, -0.21109333634376526, -0.141897052526474, -0.0713074654340744, 0.0, 0.06656816601753235, 0.13255153596401215, 0.19739556312561035, 0.2606023848056793, 0.32175055146217346, 0.38050636649131775, 0.4366271495819092, 0.489957332611084, 0.5404195189476013, 0.588002622127533, 0.6327488422393799, 0.6747409701347351, 0.7140907049179077, 0.750929057598114, 0.7853981852531433, 0.8176450729370117, 0.8478169441223145, 0.876058042049408, 0.9025068879127502, 0.9272952079772949, 0.9505468606948853, 0.9723774194717407, 0.9928944110870361, 1.0121970176696777, 1.0303767919540405, 1.047518014907837, 1.0636978149414062, 1.0789871215820312, 1.093450903892517, 1.1071487665176392, 1.120134949684143, 1.1324597597122192, 1.1441688537597656, 1.155304193496704, 1.1659045219421387, 1.176005244255066, 1.1856387853622437, 1.1948354244232178, 1.2036224603652954, 1.2120256423950195, 1.220068335533142, 1.2277723550796509, 1.2351577281951904, 1.2422431707382202, 1.249045729637146, 1.2555816173553467, 1.2618656158447266, 1.267911434173584, 1.27373206615448, 1.2793395519256592, 1.2847448587417603, 1.2899585962295532, 1.2949904203414917, 1.299849510192871, 1.3045443296432495, 1.3090828657150269, 1.3134726285934448, 1.317720651626587, 1.321833610534668, 1.3258177042007446, 1.3296786546707153, 1.333422064781189, 1.3370531797409058, -1.3405767679214478, -1.3370531797409058, -1.333422064781189, -1.3296786546707153, -1.3258177042007446, -1.321833610534668, -1.317720651626587, -1.3134726285934448, -1.3090828657150269, -1.3045443296432495, -1.299849510192871, -1.2949904203414917, -1.2899585962295532, -1.2847448587417603, -1.2793395519256592, -1.27373206615448, -1.267911434173584, -1.2618656158447266, -1.2555816173553467, -1.249045729637146, -1.2422431707382202, -1.2351577281951904, -1.2277723550796509, -1.220068335533142, -1.2120256423950195, -1.2036224603652954, -1.1948354244232178, -1.1856387853622437, -1.176005244255066, -1.1659045219421387, -1.155304193496704, -1.1441688537597656, -1.1324597597122192, -1.120134949684143, -1.1071487665176392, -1.093450903892517, -1.0789871215820312, -1.0636978149414062, -1.047518014907837, -1.0303767919540405, -1.0121970176696777, -0.9928944110870361, -0.9723774194717407, -0.9505468606948853, -0.9272952079772949, -0.9025068879127502, -0.876058042049408, -0.8478169441223145, -0.8176450729370117, -0.7853981852531433, -0.750929057598114, -0.7140907049179077, -0.6747409701347351, -0.6327488422393799, -0.588002622127533, -0.5404195189476013, -0.489957332611084, -0.4366271495819092, -0.38050636649131775, -0.32175055146217346, -0.2606023848056793, -0.19739556312561035, -0.13255153596401215, -0.06656816601753235, 0.0, 0.06241881102323532, 0.12435499578714371, 0.18534794449806213, 0.244978666305542, 0.30288487672805786, 0.3587706685066223, 0.4124104380607605, 0.46364760398864746, 0.5123894810676575, 0.5585992932319641, 0.6022873520851135, 0.6435011029243469, 0.6823165416717529, 0.7188299894332886, 0.7531512975692749, 0.7853981852531433, 0.8156919479370117, 0.8441540002822876, 0.8709034323692322, 0.8960554003715515, 0.9197195768356323, 0.9420000314712524, 0.9629943370819092, 0.9827937483787537, 1.0014830827713013, 1.0191413164138794, 1.0358412265777588, 1.0516501665115356, 1.0666303634643555, 1.0808390378952026, 1.0943288803100586, 1.1071487665176392, 1.1193432807922363, 1.1309537887573242, 1.1420183181762695, 1.1525720357894897, 1.1626472473144531, 1.172273874282837, 1.181479573249817, 1.1902899742126465, 1.1987285614013672, 1.206817388534546, 1.2145767211914062, 1.2220252752304077, 1.2291808128356934, 1.236059546470642, 1.2426763772964478, 1.249045729637146, 1.2551807165145874, 1.2610933780670166, 1.2667953968048096, 1.2722973823547363, 1.2776094675064087, 1.282740831375122, 1.2877005338668823, 1.292496681213379, 1.2971370220184326, 1.301628828048706, 1.3059790134429932, 1.3101938962936401, 1.3142796754837036, 1.318242073059082, 1.3220863342285156, -1.3258177042007446, -1.3220863342285156, -1.318242073059082, -1.3142796754837036, -1.3101938962936401, -1.3059790134429932, -1.301628828048706, -1.2971370220184326, -1.292496681213379, -1.2877005338668823, -1.282740831375122, -1.2776094675064087, -1.2722973823547363, -1.2667953968048096, -1.2610933780670166, -1.2551807165145874, -1.249045729637146, -1.2426763772964478, -1.236059546470642, -1.2291808128356934, -1.2220252752304077, -1.2145767211914062, -1.206817388534546, -1.1987285614013672, -1.1902899742126465, -1.181479573249817, -1.172273874282837, -1.1626472473144531, -1.1525720357894897, -1.1420183181762695, -1.1309537887573242, -1.1193432807922363, -1.1071487665176392, -1.0943288803100586, -1.0808390378952026, -1.0666303634643555, -1.0516501665115356, -1.0358412265777588, -1.0191413164138794, -1.0014830827713013, -0.9827937483787537, -0.9629943370819092, -0.9420000314712524, -0.9197195768356323, -0.8960554003715515, -0.8709034323692322, -0.8441540002822876, -0.8156919479370117, -0.7853981852531433, -0.7531512975692749, -0.7188299894332886, -0.6823165416717529, -0.6435011029243469, -0.6022873520851135, -0.5585992932319641, -0.5123894810676575, -0.46364760398864746, -0.4124104380607605, -0.3587706685066223, -0.30288487672805786, -0.244978666305542, -0.18534794449806213, -0.12435499578714371, -0.06241881102323532, 0.0, 0.058755822479724884, 0.11710874736309052, 0.1746722012758255, 0.23109066486358643, 0.2860514521598816, 0.33929261565208435, 0.3906070291996002, 0.4398425817489624, 0.4868992269039154, 0.5317240953445435, 0.5743048191070557, 0.6146629452705383, 0.65284663438797, 0.6889243721961975, 0.7229793667793274, 0.7551044225692749, 0.7853981852531433, 0.8139618039131165, 0.8408966660499573, 0.8663022518157959, 0.8902751207351685, 0.9129077196121216, 0.9342880845069885, 0.954499363899231, 0.9736196398735046, 0.991722047328949, 1.008874773979187, 1.0251412391662598, 1.0405805110931396, 1.0552473068237305, 1.0691922903060913, 1.0824624300003052, 1.0951011180877686, 1.1071487665176392, 1.1186424493789673, 1.1296168565750122, 1.140103816986084, 1.1501330137252808, 1.1597317457199097, 1.1689256429672241, 1.1777383089065552, 1.1861915588378906, 1.1943060159683228, 1.202100396156311, 1.209592580795288, 1.2167989015579224, 1.223734736442566, 1.2304143905639648, 1.2368512153625488, 1.2430578470230103, 1.249045729637146, 1.2548260688781738, 1.260408878326416, 1.2658039331436157, 1.2710202932357788, 1.2760661840438843, 1.2809498310089111, 1.2856786251068115, 1.2902594804763794, 1.2946993112564087, 1.2990041971206665, 1.3031799793243408, 1.3072324991226196, -1.3111666440963745, -1.3072324991226196, -1.3031799793243408, -1.2990041971206665, -1.2946993112564087, -1.2902594804763794, -1.2856786251068115, -1.2809498310089111, -1.2760661840438843, -1.2710202932357788, -1.2658039331436157, -1.260408878326416, -1.2548260688781738, -1.249045729637146, -1.2430578470230103, -1.2368512153625488, -1.2304143905639648, -1.223734736442566, -1.2167989015579224, -1.209592580795288, -1.202100396156311, -1.1943060159683228, -1.1861915588378906, -1.1777383089065552, -1.1689256429672241, -1.1597317457199097, -1.1501330137252808, -1.140103816986084, -1.1296168565750122, -1.1186424493789673, -1.1071487665176392, -1.0951011180877686, -1.0824624300003052, -1.0691922903060913, -1.0552473068237305, -1.0405805110931396, -1.0251412391662598, -1.008874773979187, -0.991722047328949, -0.9736196398735046, -0.954499363899231, -0.9342880845069885, -0.9129077196121216, -0.8902751207351685, -0.8663022518157959, -0.8408966660499573, -0.8139618039131165, -0.7853981852531433, -0.7551044225692749, -0.7229793667793274, -0.6889243721961975, -0.65284663438797, -0.6146629452705383, -0.5743048191070557, -0.5317240953445435, -0.4868992269039154, -0.4398425817489624, -0.3906070291996002, -0.33929261565208435, -0.2860514521598816, -0.23109066486358643, -0.1746722012758255, -0.11710874736309052, -0.058755822479724884, 0.0, 0.055498506873846054, 0.1106572225689888, 0.16514867544174194, 0.21866895258426666, 0.2709468603134155, 0.32175055146217346, 0.3708913028240204, 0.4182243347167969, 0.46364760398864746, 0.5070984959602356, 0.5485494136810303, 0.588002622127533, 0.6254850625991821, 0.6610431671142578, 0.6947382688522339, 0.726642370223999, 0.7568345069885254, 0.7853981852531433, 0.8124186396598816, 0.8379812240600586, 0.8621700406074524, 0.88506680727005, 0.9067501425743103, 0.9272952079772949, 0.9467732906341553, 0.9652516841888428, 0.9827937483787537, 0.9994588494300842, 1.0153025388717651, 1.0303767919540405, 1.0447299480438232, 1.0584068298339844, 1.071449637413025, 1.0838971138000488, 1.0957856178283691, 1.1071487665176392, 1.1180179119110107, 1.1284221410751343, 1.1383885145187378, 1.1479424238204956, 1.1571071147918701, 1.1659045219421387, 1.1743550300598145, 1.182477593421936, 1.1902899742126465, 1.1978086233139038, 1.2050490379333496, 1.2120256423950195, 1.2187520265579224, 1.225240707397461, 1.2315037250518799, 1.2375520467758179, 1.2433961629867554, 1.249045729637146, 1.2545101642608643, 1.2597980499267578, 1.2649174928665161, 1.2698761224746704, 1.2746812105178833, 1.2793395519256592, 1.2838575839996338, 1.2882413864135742, 1.292496681213379, -1.2966288328170776, -1.292496681213379, -1.2882413864135742, -1.2838575839996338, -1.2793395519256592, -1.2746812105178833, -1.2698761224746704, -1.2649174928665161, -1.2597980499267578, -1.2545101642608643, -1.249045729637146, -1.2433961629867554, -1.2375520467758179, -1.2315037250518799, -1.225240707397461, -1.2187520265579224, -1.2120256423950195, -1.2050490379333496, -1.1978086233139038, -1.1902899742126465, -1.182477593421936, -1.1743550300598145, -1.1659045219421387, -1.1571071147918701, -1.1479424238204956, -1.1383885145187378, -1.1284221410751343, -1.1180179119110107, -1.1071487665176392, -1.0957856178283691, -1.0838971138000488, -1.071449637413025, -1.0584068298339844, -1.0447299480438232, -1.0303767919540405, -1.0153025388717651, -0.9994588494300842, -0.9827937483787537, -0.9652516841888428, -0.9467732906341553, -0.9272952079772949, -0.9067501425743103, -0.88506680727005, -0.8621700406074524, -0.8379812240600586, -0.8124186396598816, -0.7853981852531433, -0.7568345069885254, -0.726642370223999, -0.6947382688522339, -0.6610431671142578, -0.6254850625991821, -0.588002622127533, -0.5485494136810303, -0.5070984959602356, -0.46364760398864746, -0.4182243347167969, -0.3708913028240204, -0.32175055146217346, -0.2709468603134155, -0.21866895258426666, -0.16514867544174194, -0.1106572225689888, -0.055498506873846054, 0.0, 0.052583061158657074, 0.10487693548202515, 0.15660187602043152, 0.20749622583389282, 0.2573237121105194, 0.3058788776397705, 0.35299038887023926, 0.39852243661880493, 0.44237422943115234, 0.4844779372215271, 0.5247957706451416, 0.563316285610199, 0.6000502109527588, 0.635026752948761, 0.6682894229888916, 0.6998928785324097, 0.7298996448516846, 0.758377730846405, 0.7853981852531433, 0.8110335469245911, 0.8353565335273743, 0.8584387302398682, 0.88034987449646, 0.9011573791503906, 0.9209258556365967, 0.9397169351577759, 0.9575889706611633, 0.974597156047821, 0.9907935261726379, 1.006226897239685, 1.0209431648254395, 1.034985065460205, 1.04839289188385, 1.0612040758132935, 1.073453664779663, 1.0851742029190063, 1.0963964462280273, 1.1071487665176392, 1.117457628250122, 1.1273479461669922, 1.136842966079712, 1.1459641456604004, 1.1547318696975708, 1.1631648540496826, 1.171280860900879, 1.1790963411331177, 1.18662691116333, 1.1938871145248413, 1.200890302658081, 1.2076493501663208, 1.2141761779785156, 1.2204821109771729, 1.226577639579773, 1.2324726581573486, 1.2381765842437744, 1.243698239326477, 1.249045729637146, 1.2542270421981812, 1.2592494487762451, 1.2641199827194214, 1.2688452005386353, 1.2734311819076538, 1.2778838872909546, -1.2822089195251465, -1.2778838872909546, -1.2734311819076538, -1.2688452005386353, -1.2641199827194214, -1.2592494487762451, -1.2542270421981812, -1.249045729637146, -1.243698239326477, -1.2381765842437744, -1.2324726581573486, -1.226577639579773, -1.2204821109771729, -1.2141761779785156, -1.2076493501663208, -1.200890302658081, -1.1938871145248413, -1.18662691116333, -1.1790963411331177, -1.171280860900879, -1.1631648540496826, -1.1547318696975708, -1.1459641456604004, -1.136842966079712, -1.1273479461669922, -1.117457628250122, -1.1071487665176392, -1.0963964462280273, -1.0851742029190063, -1.073453664779663, -1.0612040758132935, -1.04839289188385, -1.034985065460205, -1.0209431648254395, -1.006226897239685, -0.9907935261726379, -0.974597156047821, -0.9575889706611633, -0.9397169351577759, -0.9209258556365967, -0.9011573791503906, -0.88034987449646, -0.8584387302398682, -0.8353565335273743, -0.8110335469245911, -0.7853981852531433, -0.758377730846405, -0.7298996448516846, -0.6998928785324097, -0.6682894229888916, -0.635026752948761, -0.6000502109527588, -0.563316285610199, -0.5247957706451416, -0.4844779372215271, -0.44237422943115234, -0.39852243661880493, -0.35299038887023926, -0.3058788776397705, -0.2573237121105194, -0.20749622583389282, -0.15660187602043152, -0.10487693548202515, -0.052583061158657074, 0.0, 0.04995839670300484, 0.09966865181922913, 0.1488899439573288, 0.19739556312561035, 0.244978666305542, 0.29145678877830505, 0.3366748094558716, 0.38050636649131775, 0.42285391688346863, 0.46364760398864746, 0.5028432011604309, 0.5404195189476013, 0.5763752460479736, 0.6107259392738342, 0.6435011029243469, 0.6747409701347351, 0.704494059085846, 0.7328150868415833, 0.7597627639770508, 0.7853981852531433, 0.8097835779190063, 0.832981288433075, 0.8550527095794678, 0.876058042049408, 0.8960554003715515, 0.9151006937026978, 0.9332475066184998, 0.9505468606948853, 0.9670469760894775, 0.9827937483787537, 0.9978302121162415, 1.0121970176696777, 1.0259324312210083, 1.0390722751617432, 1.0516501665115356, 1.0636978149414062, 1.075244665145874, 1.0863183736801147, 1.09694504737854, 1.1071487665176392, 1.1169523000717163, 1.1263771057128906, 1.135443091392517, 1.1441688537597656, 1.1525720357894897, 1.160668969154358, 1.1684752702713013, 1.176005244255066, 1.1832724809646606, 1.1902899742126465, 1.197069525718689, 1.2036224603652954, 1.2099595069885254, 1.2160906791687012, 1.2220252752304077, 1.2277723550796509, 1.2333402633666992, 1.238736867904663, 1.2439696788787842, 1.249045729637146, 1.253971815109253, 1.2587542533874512, 1.2633988857269287, -1.267911434173584, -1.2633988857269287, -1.2587542533874512, -1.253971815109253, -1.249045729637146, -1.2439696788787842, -1.238736867904663, -1.2333402633666992, -1.2277723550796509, -1.2220252752304077, -1.2160906791687012, -1.2099595069885254, -1.2036224603652954, -1.197069525718689, -1.1902899742126465, -1.1832724809646606, -1.176005244255066, -1.1684752702713013, -1.160668969154358, -1.1525720357894897, -1.1441688537597656, -1.135443091392517, -1.1263771057128906, -1.1169523000717163, -1.1071487665176392, -1.09694504737854, -1.0863183736801147, -1.075244665145874, -1.0636978149414062, -1.0516501665115356, -1.0390722751617432, -1.0259324312210083, -1.0121970176696777, -0.9978302121162415, -0.9827937483787537, -0.9670469760894775, -0.9505468606948853, -0.9332475066184998, -0.9151006937026978, -0.8960554003715515, -0.876058042049408, -0.8550527095794678, -0.832981288433075, -0.8097835779190063, -0.7853981852531433, -0.7597627639770508, -0.7328150868415833, -0.704494059085846, -0.6747409701347351, -0.6435011029243469, -0.6107259392738342, -0.5763752460479736, -0.5404195189476013, -0.5028432011604309, -0.46364760398864746, -0.42285391688346863, -0.38050636649131775, -0.3366748094558716, -0.29145678877830505, -0.244978666305542, -0.19739556312561035, -0.1488899439573288, -0.09966865181922913, -0.04995839670300484, 0.0, 0.04758310317993164, 0.09495170414447784, 0.141897052526474, 0.1882214993238449, 0.23374317586421967, 0.2782996594905853, 0.32175055146217346, 0.36397895216941833, 0.4048917889595032, 0.4444192051887512, 0.48251330852508545, 0.5191460847854614, 0.5543075203895569, 0.588002622127533, 0.6202495098114014, 0.6510767340660095, 0.6805212497711182, 0.7086262702941895, 0.7354397773742676, 0.7610127329826355, 0.7853981852531433, 0.8086497783660889, 0.8308214545249939, 0.8519663214683533, 0.8721364736557007, 0.8913825154304504, 0.909753143787384, 0.9272952079772949, 0.9440534114837646, 0.9600703716278076, 0.9753864407539368, 0.9900399446487427, 1.004067063331604, 1.017501950263977, 1.0303767919540405, 1.0427218675613403, 1.054565668106079, 1.0659348964691162, 1.076854944229126, 1.08734929561615, 1.097440242767334, 1.1071487665176392, 1.1164942979812622, 1.1254953145980835, 1.1341692209243774, 1.142532229423523, 1.1505995988845825, 1.1583858728408813, 1.1659045219421387, 1.1731683015823364, 1.1801892518997192, 1.1869786977767944, 1.193547248840332, 1.1999050378799438, 1.2060614824295044, 1.2120256423950195, 1.2178059816360474, 1.2234103679656982, 1.228846549987793, 1.234121561050415, 1.2392421960830688, 1.2442148923873901, 1.249045729637146, -1.2537405490875244, -1.249045729637146, -1.2442148923873901, -1.2392421960830688, -1.234121561050415, -1.228846549987793, -1.2234103679656982, -1.2178059816360474, -1.2120256423950195, -1.2060614824295044, -1.1999050378799438, -1.193547248840332, -1.1869786977767944, -1.1801892518997192, -1.1731683015823364, -1.1659045219421387, -1.1583858728408813, -1.1505995988845825, -1.142532229423523, -1.1341692209243774, -1.1254953145980835, -1.1164942979812622, -1.1071487665176392, -1.097440242767334, -1.08734929561615, -1.076854944229126, -1.0659348964691162, -1.054565668106079, -1.0427218675613403, -1.0303767919540405, -1.017501950263977, -1.004067063331604, -0.9900399446487427, -0.9753864407539368, -0.9600703716278076, -0.9440534114837646, -0.9272952079772949, -0.909753143787384, -0.8913825154304504, -0.8721364736557007, -0.8519663214683533, -0.8308214545249939, -0.8086497783660889, -0.7853981852531433, -0.7610127329826355, -0.7354397773742676, -0.7086262702941895, -0.6805212497711182, -0.6510767340660095, -0.6202495098114014, -0.588002622127533, -0.5543075203895569, -0.5191460847854614, -0.48251330852508545, -0.4444192051887512, -0.4048917889595032, -0.36397895216941833, -0.32175055146217346, -0.2782996594905853, -0.23374317586421967, -0.1882214993238449, -0.141897052526474, -0.09495170414447784, -0.04758310317993164, 0.0, 0.04542328044772148, 0.09065988659858704, 0.13552771508693695, 0.17985349893569946, 0.2234766036272049, 0.2662520408630371, 0.30805277824401855, 0.34877100586891174, 0.3883187174797058, 0.4266274869441986, 0.46364760398864746, 0.4993467330932617, 0.5337082147598267, 0.5667291879653931, 0.5984188914299011, 0.6287962794303894, 0.6578885912895203, 0.6857295036315918, 0.7123575806617737, 0.7378150820732117, 0.762146532535553, 0.7853981852531433, 0.8076167106628418, 0.8288490772247314, 0.8491414785385132, 0.8685393929481506, 0.8870869874954224, 0.9048271179199219, 0.9218007922172546, 0.938047468662262, 0.9536049365997314, 0.9685089588165283, 0.9827937483787537, 0.9964914917945862, 1.00963294506073, 1.0222469568252563, 1.0343608856201172, 1.046000599861145, 1.0571902990341187, 1.067953109741211, 1.0783106088638306, 1.0882830619812012, 1.09788978099823, 1.1071487665176392, 1.1160770654678345, 1.1246907711029053, 1.1330050230026245, 1.1410340070724487, 1.1487913131713867, 1.1562894582748413, 1.1635404825210571, 1.1705557107925415, 1.177345633506775, 1.1839206218719482, 1.1902899742126465, 1.1964627504348755, 1.2024474143981934, 1.2082520723342896, 1.2138843536376953, 1.2193515300750732, 1.2246603965759277, 1.2298173904418945, 1.2348287105560303, -1.239700198173523, -1.2348287105560303, -1.2298173904418945, -1.2246603965759277, -1.2193515300750732, -1.2138843536376953, -1.2082520723342896, -1.2024474143981934, -1.1964627504348755, -1.1902899742126465, -1.1839206218719482, -1.177345633506775, -1.1705557107925415, -1.1635404825210571, -1.1562894582748413, -1.1487913131713867, -1.1410340070724487, -1.1330050230026245, -1.1246907711029053, -1.1160770654678345, -1.1071487665176392, -1.09788978099823, -1.0882830619812012, -1.0783106088638306, -1.067953109741211, -1.0571902990341187, -1.046000599861145, -1.0343608856201172, -1.0222469568252563, -1.00963294506073, -0.9964914917945862, -0.9827937483787537, -0.9685089588165283, -0.9536049365997314, -0.938047468662262, -0.9218007922172546, -0.9048271179199219, -0.8870869874954224, -0.8685393929481506, -0.8491414785385132, -0.8288490772247314, -0.8076167106628418, -0.7853981852531433, -0.762146532535553, -0.7378150820732117, -0.7123575806617737, -0.6857295036315918, -0.6578885912895203, -0.6287962794303894, -0.5984188914299011, -0.5667291879653931, -0.5337082147598267, -0.4993467330932617, -0.46364760398864746, -0.4266274869441986, -0.3883187174797058, -0.34877100586891174, -0.30805277824401855, -0.2662520408630371, -0.2234766036272049, -0.17985349893569946, -0.13552771508693695, -0.09065988659858704, -0.04542328044772148, 0.0, 0.04345089569687843, 0.08673834055662155, 0.12970253825187683, 0.1721908152103424, 0.2140606790781021, 0.2551823854446411, 0.29544082283973694, 0.33473682403564453, 0.3729877173900604, 0.41012734174728394, 0.4461055397987366, 0.4808872938156128, 0.5144513249397278, 0.5467888116836548, 0.5779019594192505, 0.6078019738197327, 0.6365082263946533, 0.6640461683273315, 0.6904464364051819, 0.7157436013221741, 0.739974856376648, 0.7631796002388, 0.7853981852531433, 0.8066715598106384, 0.8270407319068909, 0.8465463519096375, 0.8652281761169434, 0.8831250667572021, 0.9002747535705566, 0.9167135953903198, 0.9324765205383301, 0.9475969672203064, 0.9621070027351379, 0.9760370850563049, 0.9894161224365234, 1.0022717714309692, 1.0146300792694092, 1.0265158414840698, 1.0379524230957031, 1.0489619970321655, 1.0595656633377075, 1.0697829723358154, 1.0796327590942383, 1.0891326665878296, 1.0982993841171265, 1.1071487665176392, 1.1156954765319824, 1.1239538192749023, 1.131937026977539, 1.1396576166152954, 1.147127389907837, 1.154357671737671, 1.1613590717315674, 1.1681417226791382, 1.1747149229049683, 1.1810877323150635, 1.187268853187561, 1.1932661533355713, 1.199087381362915, 1.2047398090362549, 1.2102303504943848, 1.2155654430389404, 1.220751404762268, -1.2257941961288452, -1.220751404762268, -1.2155654430389404, -1.2102303504943848, -1.2047398090362549, -1.199087381362915, -1.1932661533355713, -1.187268853187561, -1.1810877323150635, -1.1747149229049683, -1.1681417226791382, -1.1613590717315674, -1.154357671737671, -1.147127389907837, -1.1396576166152954, -1.131937026977539, -1.1239538192749023, -1.1156954765319824, -1.1071487665176392, -1.0982993841171265, -1.0891326665878296, -1.0796327590942383, -1.0697829723358154, -1.0595656633377075, -1.0489619970321655, -1.0379524230957031, -1.0265158414840698, -1.0146300792694092, -1.0022717714309692, -0.9894161224365234, -0.9760370850563049, -0.9621070027351379, -0.9475969672203064, -0.9324765205383301, -0.9167135953903198, -0.9002747535705566, -0.8831250667572021, -0.8652281761169434, -0.8465463519096375, -0.8270407319068909, -0.8066715598106384, -0.7853981852531433, -0.7631796002388, -0.739974856376648, -0.7157436013221741, -0.6904464364051819, -0.6640461683273315, -0.6365082263946533, -0.6078019738197327, -0.5779019594192505, -0.5467888116836548, -0.5144513249397278, -0.4808872938156128, -0.4461055397987366, -0.41012734174728394, -0.3729877173900604, -0.33473682403564453, -0.29544082283973694, -0.2551823854446411, -0.2140606790781021, -0.1721908152103424, -0.12970253825187683, -0.08673834055662155, -0.04345089569687843, 0.0, 0.041642580181360245, 0.08314123004674911, 0.12435499578714371, 0.16514867544174194, 0.2053953856229782, 0.244978666305542, 0.283794105052948, 0.32175055146217346, 0.3587706685066223, 0.3947911262512207, 0.4297622740268707, 0.46364760398864746, 0.49642276763916016, 0.5280744433403015, 0.5585992932319641, 0.588002622127533, 0.6162969470024109, 0.6435011029243469, 0.6696389317512512, 0.6947382688522339, 0.7188299894332886, 0.7419472932815552, 0.7641247510910034, 0.7853981852531433, 0.8058034777641296, 0.8253768682479858, 0.8441540002822876, 0.8621700406074524, 0.8794593811035156, 0.8960554003715515, 0.9119902849197388, 0.9272952079772949, 0.9420000314712524, 0.9561333656311035, 0.9697225689888, 0.9827937483787537, 0.9953716993331909, 1.0074800252914429, 1.0191413164138794, 1.0303767919540405, 1.04120671749115, 1.0516501665115356, 1.0617254972457886, 1.071449637413025, 1.0808390378952026, 1.0899090766906738, 1.0986742973327637, 1.1071487665176392, 1.1153452396392822, 1.1232763528823853, 1.1309537887573242, 1.1383885145187378, 1.1455912590026855, 1.1525720357894897, 1.1593400239944458, 1.1659045219421387, 1.172273874282837, 1.17845618724823, 1.1844590902328491, 1.1902899742126465, 1.1959556341171265, 1.2014626264572144, 1.206817388534546, -1.2120256423950195, -1.206817388534546, -1.2014626264572144, -1.1959556341171265, -1.1902899742126465, -1.1844590902328491, -1.17845618724823, -1.172273874282837, -1.1659045219421387, -1.1593400239944458, -1.1525720357894897, -1.1455912590026855, -1.1383885145187378, -1.1309537887573242, -1.1232763528823853, -1.1153452396392822, -1.1071487665176392, -1.0986742973327637, -1.0899090766906738, -1.0808390378952026, -1.071449637413025, -1.0617254972457886, -1.0516501665115356, -1.04120671749115, -1.0303767919540405, -1.0191413164138794, -1.0074800252914429, -0.9953716993331909, -0.9827937483787537, -0.9697225689888, -0.9561333656311035, -0.9420000314712524, -0.9272952079772949, -0.9119902849197388, -0.8960554003715515, -0.8794593811035156, -0.8621700406074524, -0.8441540002822876, -0.8253768682479858, -0.8058034777641296, -0.7853981852531433, -0.7641247510910034, -0.7419472932815552, -0.7188299894332886, -0.6947382688522339, -0.6696389317512512, -0.6435011029243469, -0.6162969470024109, -0.588002622127533, -0.5585992932319641, -0.5280744433403015, -0.49642276763916016, -0.46364760398864746, -0.4297622740268707, -0.3947911262512207, -0.3587706685066223, -0.32175055146217346, -0.283794105052948, -0.244978666305542, -0.2053953856229782, -0.16514867544174194, -0.12435499578714371, -0.08314123004674911, -0.041642580181360245, 0.0, 0.03997868672013283, 0.07982998341321945, 0.11942892521619797, 0.15865525603294373, 0.19739556312561035, 0.23554497957229614, 0.27300870418548584, 0.30970293283462524, 0.3455555737018585, 0.38050636649131775, 0.4145068824291229, 0.447519987821579, 0.4795192778110504, 0.5104883313179016, 0.5404195189476013, 0.5693131685256958, 0.5971766710281372, 0.6240230798721313, 0.6498704552650452, 0.6747409701347351, 0.6986598372459412, 0.7216548323631287, 0.743755578994751, 0.7649928331375122, 0.7853981852531433, 0.8050035238265991, 0.8238407373428345, 0.8419415950775146, 0.8593372106552124, 0.876058042049408, 0.8921338319778442, 0.907593309879303, 0.9224643111228943, 0.9367735981941223, 0.9505468606948853, 0.9638086557388306, 0.9765826463699341, 0.9888911843299866, 1.0007559061050415, 1.0121970176696777, 1.0232341289520264, 1.0338855981826782, 1.0441690683364868, 1.0541012287139893, 1.0636978149414062, 1.0729739665985107, 1.0819439888000488, 1.0906213521957397, 1.0990188121795654, 1.1071487665176392, 1.1150225400924683, 1.1226513385772705, 1.1300455331802368, 1.1372148990631104, 1.1441688537597656, 1.150916337966919, 1.157465934753418, 1.163825511932373, 1.1700029373168945, 1.176005244255066, 1.1818394660949707, 1.1875121593475342, 1.1930296421051025, -1.1983978748321533, -1.1930296421051025, -1.1875121593475342, -1.1818394660949707, -1.176005244255066, -1.1700029373168945, -1.163825511932373, -1.157465934753418, -1.150916337966919, -1.1441688537597656, -1.1372148990631104, -1.1300455331802368, -1.1226513385772705, -1.1150225400924683, -1.1071487665176392, -1.0990188121795654, -1.0906213521957397, -1.0819439888000488, -1.0729739665985107, -1.0636978149414062, -1.0541012287139893, -1.0441690683364868, -1.0338855981826782, -1.0232341289520264, -1.0121970176696777, -1.0007559061050415, -0.9888911843299866, -0.9765826463699341, -0.9638086557388306, -0.9505468606948853, -0.9367735981941223, -0.9224643111228943, -0.907593309879303, -0.8921338319778442, -0.876058042049408, -0.8593372106552124, -0.8419415950775146, -0.8238407373428345, -0.8050035238265991, -0.7853981852531433, -0.7649928331375122, -0.743755578994751, -0.7216548323631287, -0.6986598372459412, -0.6747409701347351, -0.6498704552650452, -0.6240230798721313, -0.5971766710281372, -0.5693131685256958, -0.5404195189476013, -0.5104883313179016, -0.4795192778110504, -0.447519987821579, -0.4145068824291229, -0.38050636649131775, -0.3455555737018585, -0.30970293283462524, -0.27300870418548584, -0.23554497957229614, -0.19739556312561035, -0.15865525603294373, -0.11942892521619797, -0.07982998341321945, -0.03997868672013283, 0.0, 0.03844258934259415, 0.07677189260721207, 0.11487660557031631, 0.15264932811260223, 0.18998828530311584, 0.22679884731769562, 0.2629947364330292, 0.2984989285469055, 0.33324429392814636, 0.36717382073402405, 0.4002406597137451, 0.43240776658058167, 0.46364760398864746, 0.49394136667251587, 0.5232782959938049, 0.5516549944877625, 0.5790742635726929, 0.6055446863174438, 0.631079375743866, 0.6556956171989441, 0.6794137954711914, 0.7022569179534912, 0.7242500185966492, 0.7454195022583008, 0.7657928466796875, 0.7853981852531433, 0.8042638301849365, 0.8224182724952698, 0.839889645576477, 0.8567056059837341, 0.8728935122489929, 0.8884797692298889, 0.9034901857376099, 0.9179496765136719, 0.9318823218345642, 0.9453113079071045, 0.9582587480545044, 0.9707460999488831, 0.9827937483787537, 0.994421124458313, 1.0056469440460205, 1.016488790512085, 1.0269638299942017, 1.03708815574646, 1.0468770265579224, 1.056344985961914, 1.065506100654602, 1.0743736028671265, 1.0829598903656006, 1.091277003288269, 1.0993363857269287, 1.1071487665176392, 1.1147242784500122, 1.1220729351043701, 1.1292039155960083, 1.136126160621643, 1.1428477764129639, 1.1493771076202393, 1.1557215452194214, 1.1618884801864624, 1.1678847074508667, 1.1737169027328491, 1.1793911457061768, -1.1849136352539062, -1.1793911457061768, -1.1737169027328491, -1.1678847074508667, -1.1618884801864624, -1.1557215452194214, -1.1493771076202393, -1.1428477764129639, -1.136126160621643, -1.1292039155960083, -1.1220729351043701, -1.1147242784500122, -1.1071487665176392, -1.0993363857269287, -1.091277003288269, -1.0829598903656006, -1.0743736028671265, -1.065506100654602, -1.056344985961914, -1.0468770265579224, -1.03708815574646, -1.0269638299942017, -1.016488790512085, -1.0056469440460205, -0.994421124458313, -0.9827937483787537, -0.9707460999488831, -0.9582587480545044, -0.9453113079071045, -0.9318823218345642, -0.9179496765136719, -0.9034901857376099, -0.8884797692298889, -0.8728935122489929, -0.8567056059837341, -0.839889645576477, -0.8224182724952698, -0.8042638301849365, -0.7853981852531433, -0.7657928466796875, -0.7454195022583008, -0.7242500185966492, -0.7022569179534912, -0.6794137954711914, -0.6556956171989441, -0.631079375743866, -0.6055446863174438, -0.5790742635726929, -0.5516549944877625, -0.5232782959938049, -0.49394136667251587, -0.46364760398864746, -0.43240776658058167, -0.4002406597137451, -0.36717382073402405, -0.33324429392814636, -0.2984989285469055, -0.2629947364330292, -0.22679884731769562, -0.18998828530311584, -0.15264932811260223, -0.11487660557031631, -0.07677189260721207, -0.03844258934259415, 0.0, 0.03702011704444885, 0.07393904030323029, 0.1106572225689888, 0.14707835018634796, 0.1831108182668686, 0.21866895258426666, 0.25367408990859985, 0.2880554497241974, 0.32175055146217346, 0.35470566153526306, 0.386875718832016, 0.4182243347167969, 0.44872334599494934, 0.478352427482605, 0.5070984959602356, 0.5349550843238831, 0.5619215369224548, 0.588002622127533, 0.6132073402404785, 0.6375488042831421, 0.6610431671142578, 0.6837093234062195, 0.7055681943893433, 0.726642370223999, 0.7469555735588074, 0.7665324807167053, 0.7853981852531433, 0.8035779595375061, 0.8210972547531128, 0.8379812240600586, 0.8542546629905701, 0.8699418902397156, 0.88506680727005, 0.8996524810791016, 0.9137213826179504, 0.9272952079772949, 0.9403948783874512, 0.953040599822998, 0.9652516841888428, 0.9770466685295105, 0.9884433746337891, 0.9994588494300842, 1.010109305381775, 1.020410418510437, 1.0303767919540405, 1.040022850036621, 1.0493619441986084, 1.0584068298339844, 1.0671700239181519, 1.0756630897521973, 1.0838971138000488, 1.0918827056884766, 1.0996301174163818, 1.1071487665176392, 1.114447832107544, 1.1215362548828125, 1.1284221410751343, 1.1351134777069092, 1.141617774963379, 1.1479424238204956, 1.1540940999984741, 1.1600793600082397, 1.1659045219421387, -1.1715755462646484, -1.1659045219421387, -1.1600793600082397, -1.1540940999984741, -1.1479424238204956, -1.141617774963379, -1.1351134777069092, -1.1284221410751343, -1.1215362548828125, -1.114447832107544, -1.1071487665176392, -1.0996301174163818, -1.0918827056884766, -1.0838971138000488, -1.0756630897521973, -1.0671700239181519, -1.0584068298339844, -1.0493619441986084, -1.040022850036621, -1.0303767919540405, -1.020410418510437, -1.010109305381775, -0.9994588494300842, -0.9884433746337891, -0.9770466685295105, -0.9652516841888428, -0.953040599822998, -0.9403948783874512, -0.9272952079772949, -0.9137213826179504, -0.8996524810791016, -0.88506680727005, -0.8699418902397156, -0.8542546629905701, -0.8379812240600586, -0.8210972547531128, -0.8035779595375061, -0.7853981852531433, -0.7665324807167053, -0.7469555735588074, -0.726642370223999, -0.7055681943893433, -0.6837093234062195, -0.6610431671142578, -0.6375488042831421, -0.6132073402404785, -0.588002622127533, -0.5619215369224548, -0.5349550843238831, -0.5070984959602356, -0.478352427482605, -0.44872334599494934, -0.4182243347167969, -0.386875718832016, -0.35470566153526306, -0.32175055146217346, -0.2880554497241974, -0.25367408990859985, -0.21866895258426666, -0.1831108182668686, -0.14707835018634796, -0.1106572225689888, -0.07393904030323029, -0.03702011704444885, 0.0, 0.035699114203453064, 0.0713074654340744, 0.10673566907644272, 0.141897052526474, 0.1767088621854782, 0.21109333634376526, 0.244978666305542, 0.2782996594905853, 0.3109982907772064, 0.3430239260196686, 0.37433362007141113, 0.4048917889595032, 0.43467020988464355, 0.46364760398864746, 0.4918091893196106, 0.5191460847854614, 0.5456550717353821, 0.5713374614715576, 0.5961991548538208, 0.6202495098114014, 0.6435011029243469, 0.6659692525863647, 0.6876712441444397, 0.7086262702941895, 0.7288547158241272, 0.7483780384063721, 0.7672183513641357, 0.7853981852531433, 0.8029402494430542, 0.8198672533035278, 0.8362018465995789, 0.8519663214683533, 0.8671825528144836, 0.8818719387054443, 0.8960554003715515, 0.909753143787384, 0.9229848980903625, 0.9357696175575256, 0.9481255412101746, 0.9600703716278076, 0.9716209769248962, 0.9827937483787537, 0.9936041235923767, 1.004067063331604, 1.0141969919204712, 1.0240074396133423, 1.0335116386413574, 1.0427218675613403, 1.0516501665115356, 1.0603079795837402, 1.0687061548233032, 1.076854944229126, 1.0847643613815308, 1.0924439430236816, 1.0999025106430054, 1.1071487665176392, 1.1141908168792725, 1.1210367679595947, 1.127693772315979, 1.1341692209243774, 1.1404696702957153, 1.146601915359497, 1.1525720357894897, -1.1583858728408813, -1.1525720357894897, -1.146601915359497, -1.1404696702957153, -1.1341692209243774, -1.127693772315979, -1.1210367679595947, -1.1141908168792725, -1.1071487665176392, -1.0999025106430054, -1.0924439430236816, -1.0847643613815308, -1.076854944229126, -1.0687061548233032, -1.0603079795837402, -1.0516501665115356, -1.0427218675613403, -1.0335116386413574, -1.0240074396133423, -1.0141969919204712, -1.004067063331604, -0.9936041235923767, -0.9827937483787537, -0.9716209769248962, -0.9600703716278076, -0.9481255412101746, -0.9357696175575256, -0.9229848980903625, -0.909753143787384, -0.8960554003715515, -0.8818719387054443, -0.8671825528144836, -0.8519663214683533, -0.8362018465995789, -0.8198672533035278, -0.8029402494430542, -0.7853981852531433, -0.7672183513641357, -0.7483780384063721, -0.7288547158241272, -0.7086262702941895, -0.6876712441444397, -0.6659692525863647, -0.6435011029243469, -0.6202495098114014, -0.5961991548538208, -0.5713374614715576, -0.5456550717353821, -0.5191460847854614, -0.4918091893196106, -0.46364760398864746, -0.43467020988464355, -0.4048917889595032, -0.37433362007141113, -0.3430239260196686, -0.3109982907772064, -0.2782996594905853, -0.244978666305542, -0.21109333634376526, -0.1767088621854782, -0.141897052526474, -0.10673566907644272, -0.0713074654340744, -0.035699114203453064, 0.0, 0.03446910157799721, 0.06885649263858795, 0.1030816063284874, 0.13706617057323456, 0.1707352101802826, 0.2040179818868637, 0.23684875667095184, 0.2691674828529358, 0.3009202480316162, 0.33205947279930115, 0.3625442385673523, 0.39234015345573425, 0.4214192032814026, 0.4497596025466919, 0.47734537720680237, 0.5041659474372864, 0.5302157998085022, 0.5554937124252319, 0.5800027847290039, 0.6037493348121643, 0.6267428994178772, 0.648995578289032, 0.6705215573310852, 0.6913369297981262, 0.7114591002464294, 0.7309067249298096, 0.749699056148529, 0.7678561210632324, 0.7853981852531433, 0.8023456931114197, 0.8187191486358643, 0.8345388770103455, 0.8498250246047974, 0.8645972609519958, 0.8788749575614929, 0.8926770091056824, 0.9060218334197998, 0.9189271926879883, 0.9314104318618774, 0.9434881210327148, 0.9551764130592346, 0.9664908051490784, 0.9774461984634399, 0.9880568385124207, 0.9983364939689636, 1.008298397064209, 1.0179550647735596, 1.0273187160491943, 1.0364007949829102, 1.0452125072479248, 1.0537643432617188, 1.0620665550231934, 1.0701285600662231, 1.0779598951339722, 1.0855693817138672, 1.0929652452468872, 1.1001558303833008, 1.1071487665176392, 1.113951325416565, 1.1205707788467407, 1.1270136833190918, 1.1332865953445435, 1.1393955945968628, -1.1453466415405273, -1.1393955945968628, -1.1332865953445435, -1.1270136833190918, -1.1205707788467407, -1.113951325416565, -1.1071487665176392, -1.1001558303833008, -1.0929652452468872, -1.0855693817138672, -1.0779598951339722, -1.0701285600662231, -1.0620665550231934, -1.0537643432617188, -1.0452125072479248, -1.0364007949829102, -1.0273187160491943, -1.0179550647735596, -1.008298397064209, -0.9983364939689636, -0.9880568385124207, -0.9774461984634399, -0.9664908051490784, -0.9551764130592346, -0.9434881210327148, -0.9314104318618774, -0.9189271926879883, -0.9060218334197998, -0.8926770091056824, -0.8788749575614929, -0.8645972609519958, -0.8498250246047974, -0.8345388770103455, -0.8187191486358643, -0.8023456931114197, -0.7853981852531433, -0.7678561210632324, -0.749699056148529, -0.7309067249298096, -0.7114591002464294, -0.6913369297981262, -0.6705215573310852, -0.648995578289032, -0.6267428994178772, -0.6037493348121643, -0.5800027847290039, -0.5554937124252319, -0.5302157998085022, -0.5041659474372864, -0.47734537720680237, -0.4497596025466919, -0.4214192032814026, -0.39234015345573425, -0.3625442385673523, -0.33205947279930115, -0.3009202480316162, -0.2691674828529358, -0.23684875667095184, -0.2040179818868637, -0.1707352101802826, -0.13706617057323456, -0.1030816063284874, -0.06885649263858795, -0.03446910157799721, 0.0, 0.03332099691033363, 0.06656816601753235, 0.09966865181922913, 0.13255153596401215, 0.16514867544174194, 0.19739556312561035, 0.22923193871974945, 0.2606023848056793, 0.29145678877830505, 0.32175055146217346, 0.3514447808265686, 0.38050636649131775, 0.40890783071517944, 0.4366271495819092, 0.46364760398864746, 0.489957332611084, 0.5155490040779114, 0.5404195189476013, 0.5645694136619568, 0.588002622127533, 0.6107259392738342, 0.6327488422393799, 0.654082715511322, 0.6747409701347351, 0.6947382688522339, 0.7140907049179077, 0.7328150868415833, 0.750929057598114, 0.7684506177902222, 0.7853981852531433, 0.8017901182174683, 0.8176450729370117, 0.832981288433075, 0.8478169441223145, 0.8621700406074524, 0.876058042049408, 0.8894981145858765, 0.9025068879127502, 0.9151006937026978, 0.9272952079772949, 0.9391056895256042, 0.9505468606948853, 0.9616328477859497, 0.9723774194717407, 0.9827937483787537, 0.9928944110870361, 1.002691626548767, 1.0121970176696777, 1.0214217901229858, 1.0303767919540405, 1.0390722751617432, 1.047518014907837, 1.0557235479354858, 1.0636978149414062, 1.071449637413025, 1.0789871215820312, 1.0863183736801147, 1.093450903892517, 1.1003921031951904, 1.1071487665176392, 1.1137275695800781, 1.120134949684143, 1.1263771057128906, -1.1324597597122192, -1.1263771057128906, -1.120134949684143, -1.1137275695800781, -1.1071487665176392, -1.1003921031951904, -1.093450903892517, -1.0863183736801147, -1.0789871215820312, -1.071449637413025, -1.0636978149414062, -1.0557235479354858, -1.047518014907837, -1.0390722751617432, -1.0303767919540405, -1.0214217901229858, -1.0121970176696777, -1.002691626548767, -0.9928944110870361, -0.9827937483787537, -0.9723774194717407, -0.9616328477859497, -0.9505468606948853, -0.9391056895256042, -0.9272952079772949, -0.9151006937026978, -0.9025068879127502, -0.8894981145858765, -0.876058042049408, -0.8621700406074524, -0.8478169441223145, -0.832981288433075, -0.8176450729370117, -0.8017901182174683, -0.7853981852531433, -0.7684506177902222, -0.750929057598114, -0.7328150868415833, -0.7140907049179077, -0.6947382688522339, -0.6747409701347351, -0.654082715511322, -0.6327488422393799, -0.6107259392738342, -0.588002622127533, -0.5645694136619568, -0.5404195189476013, -0.5155490040779114, -0.489957332611084, -0.46364760398864746, -0.4366271495819092, -0.40890783071517944, -0.38050636649131775, -0.3514447808265686, -0.32175055146217346, -0.29145678877830505, -0.2606023848056793, -0.22923193871974945, -0.19739556312561035, -0.16514867544174194, -0.13255153596401215, -0.09966865181922913, -0.06656816601753235, -0.03332099691033363, 0.0, 0.03224688395857811, 0.06442683935165405, 0.09647377580404282, 0.12832322716712952, 0.15991312265396118, 0.19118446111679077, 0.22208189964294434, 0.2525542676448822, 0.28255495429039, 0.31204211711883545, 0.3409789502620697, 0.3693336546421051, 0.3970794379711151, 0.4241943955421448, 0.4506613314151764, 0.47646743059158325, 0.5016040802001953, 0.5260664224624634, 0.5498532056808472, 0.5729661583900452, 0.5954098701477051, 0.6171913743019104, 0.6383197903633118, 0.6588060259819031, 0.6786624789237976, 0.6979027986526489, 0.7165416479110718, 0.734594464302063, 0.7520771622657776, 0.7690061926841736, 0.7853981852531433, 0.8012698292732239, 0.8166379928588867, 0.8315193057060242, 0.8459301590919495, 0.8598869442939758, 0.8734055161476135, 0.8865015506744385, 0.8991901874542236, 0.9114862680435181, 0.9234042167663574, 0.9349579215049744, 0.9461609125137329, 0.9570262432098389, 0.9675664901733398, 0.9777937531471252, 0.9877197742462158, 0.9973558187484741, 1.006712555885315, 1.0158005952835083, 1.0246297121047974, 1.0332096815109253, 1.041549563407898, 1.049658179283142, 1.0575441122055054, 1.0652152299880981, 1.0726796388626099, 1.0799444913864136, 1.0870171785354614, 1.0939044952392578, 1.1006128787994385, 1.1071487665176392, 1.1135179996490479, -1.1197266578674316, -1.1135179996490479, -1.1071487665176392, -1.1006128787994385, -1.0939044952392578, -1.0870171785354614, -1.0799444913864136, -1.0726796388626099, -1.0652152299880981, -1.0575441122055054, -1.049658179283142, -1.041549563407898, -1.0332096815109253, -1.0246297121047974, -1.0158005952835083, -1.006712555885315, -0.9973558187484741, -0.9877197742462158, -0.9777937531471252, -0.9675664901733398, -0.9570262432098389, -0.9461609125137329, -0.9349579215049744, -0.9234042167663574, -0.9114862680435181, -0.8991901874542236, -0.8865015506744385, -0.8734055161476135, -0.8598869442939758, -0.8459301590919495, -0.8315193057060242, -0.8166379928588867, -0.8012698292732239, -0.7853981852531433, -0.7690061926841736, -0.7520771622657776, -0.734594464302063, -0.7165416479110718, -0.6979027986526489, -0.6786624789237976, -0.6588060259819031, -0.6383197903633118, -0.6171913743019104, -0.5954098701477051, -0.5729661583900452, -0.5498532056808472, -0.5260664224624634, -0.5016040802001953, -0.47646743059158325, -0.4506613314151764, -0.4241943955421448, -0.3970794379711151, -0.3693336546421051, -0.3409789502620697, -0.31204211711883545, -0.28255495429039, -0.2525542676448822, -0.22208189964294434, -0.19118446111679077, -0.15991312265396118, -0.12832322716712952, -0.09647377580404282, -0.06442683935165405, -0.03224688395857811, 0.0, 0.031239833682775497, 0.06241881102323532, 0.0934767797589302, 0.12435499578714371, 0.15499673783779144, 0.18534794449806213, 0.215357705950737, 0.244978666305542, 0.2741674482822418, 0.30288487672805786, 0.3310960829257965, 0.3587706685066223, 0.3858826756477356, 0.4124104380607605, 0.4383365511894226, 0.46364760398864746, 0.48833394050598145, 0.5123894810676575, 0.5358112454414368, 0.5585992932319641, 0.5807563662528992, 0.6022873520851135, 0.6231993436813354, 0.6435011029243469, 0.6632030010223389, 0.6823165416717529, 0.7008544206619263, 0.7188299894332886, 0.7362574338912964, 0.7531512975692749, 0.769526481628418, 0.7853981852531433, 0.8007815480232239, 0.8156919479370117, 0.8301444053649902, 0.8441540002822876, 0.8577355146408081, 0.8709034323692322, 0.8836721181869507, 0.8960554003715515, 0.9080668091773987, 0.9197195768356323, 0.9310265183448792, 0.9420000314712524, 0.952652096748352, 0.9629943370819092, 0.9730379581451416, 0.9827937483787537, 0.992272138595581, 1.0014830827713013, 1.0104364156723022, 1.0191413164138794, 1.027606725692749, 1.0358412265777588, 1.0438530445098877, 1.0516501665115356, 1.0592402219772339, 1.0666303634643555, 1.0738277435302734, 1.0808390378952026, 1.0876706838607788, 1.0943288803100586, 1.100819706916809, -1.1071487665176392, -1.100819706916809, -1.0943288803100586, -1.0876706838607788, -1.0808390378952026, -1.0738277435302734, -1.0666303634643555, -1.0592402219772339, -1.0516501665115356, -1.0438530445098877, -1.0358412265777588, -1.027606725692749, -1.0191413164138794, -1.0104364156723022, -1.0014830827713013, -0.992272138595581, -0.9827937483787537, -0.9730379581451416, -0.9629943370819092, -0.952652096748352, -0.9420000314712524, -0.9310265183448792, -0.9197195768356323, -0.9080668091773987, -0.8960554003715515, -0.8836721181869507, -0.8709034323692322, -0.8577355146408081, -0.8441540002822876, -0.8301444053649902, -0.8156919479370117, -0.8007815480232239, -0.7853981852531433, -0.769526481628418, -0.7531512975692749, -0.7362574338912964, -0.7188299894332886, -0.7008544206619263, -0.6823165416717529, -0.6632030010223389, -0.6435011029243469, -0.6231993436813354, -0.6022873520851135, -0.5807563662528992, -0.5585992932319641, -0.5358112454414368, -0.5123894810676575, -0.48833394050598145, -0.46364760398864746, -0.4383365511894226, -0.4124104380607605, -0.3858826756477356, -0.3587706685066223, -0.3310960829257965, -0.30288487672805786, -0.2741674482822418, -0.244978666305542, -0.215357705950737, -0.18534794449806213, -0.15499673783779144, -0.12435499578714371, -0.0934767797589302, -0.06241881102323532, -0.031239833682775497, 0.0, 0.03029376082122326, 0.060532018542289734, 0.09065988659858704, 0.12062367051839828, 0.15037143230438232, 0.17985349893569946, 0.20902293920516968, 0.23783592879772186, 0.2662520408630371, 0.29423457384109497, 0.32175055146217346, 0.34877100586891174, 0.375270813703537, 0.40122878551483154, 0.4266274869441986, 0.4514530897140503, 0.4756952226161957, 0.4993467330932617, 0.5224034190177917, 0.5448639392852783, 0.5667291879653931, 0.588002622127533, 0.6086893081665039, 0.6287962794303894, 0.6483319997787476, 0.667306125164032, 0.6857295036315918, 0.7036137580871582, 0.7209713459014893, 0.7378150820732117, 0.7541583180427551, 0.770014762878418, 0.7853981852531433, 0.800322413444519, 0.8148014545440674, 0.8288490772247314, 0.8424789309501648, 0.8557046055793762, 0.8685393929481506, 0.8809962868690491, 0.8930880427360535, 0.9048271179199219, 0.9162255525588989, 0.9272952079772949, 0.938047468662262, 0.948493480682373, 0.9586438536643982, 0.9685089588165283, 0.9780989289283752, 0.987423300743103, 0.9964914917945862, 1.005312442779541, 1.01389479637146, 1.0222469568252563, 1.0303767919540405, 1.0382921695709229, 1.046000599861145, 1.053508996963501, 1.0608242750167847, 1.067953109741211, 1.074901819229126, 1.0816764831542969, 1.0882830619812012, -1.0947270393371582, -1.0882830619812012, -1.0816764831542969, -1.074901819229126, -1.067953109741211, -1.0608242750167847, -1.053508996963501, -1.046000599861145, -1.0382921695709229, -1.0303767919540405, -1.0222469568252563, -1.01389479637146, -1.005312442779541, -0.9964914917945862, -0.987423300743103, -0.9780989289283752, -0.9685089588165283, -0.9586438536643982, -0.948493480682373, -0.938047468662262, -0.9272952079772949, -0.9162255525588989, -0.9048271179199219, -0.8930880427360535, -0.8809962868690491, -0.8685393929481506, -0.8557046055793762, -0.8424789309501648, -0.8288490772247314, -0.8148014545440674, -0.800322413444519, -0.7853981852531433, -0.770014762878418, -0.7541583180427551, -0.7378150820732117, -0.7209713459014893, -0.7036137580871582, -0.6857295036315918, -0.667306125164032, -0.6483319997787476, -0.6287962794303894, -0.6086893081665039, -0.588002622127533, -0.5667291879653931, -0.5448639392852783, -0.5224034190177917, -0.4993467330932617, -0.4756952226161957, -0.4514530897140503, -0.4266274869441986, -0.40122878551483154, -0.375270813703537, -0.34877100586891174, -0.32175055146217346, -0.29423457384109497, -0.2662520408630371, -0.23783592879772186, -0.20902293920516968, -0.17985349893569946, -0.15037143230438232, -0.12062367051839828, -0.09065988659858704, -0.060532018542289734, -0.03029376082122326, 0.0, 0.029403287917375565, 0.058755822479724884, 0.0880073755979538, 0.11710874736309052, 0.14601226150989532, 0.1746722012758255, 0.20304521918296814, 0.23109066486358643, 0.2587708830833435, 0.2860514521598816, 0.31290122866630554, 0.33929261565208435, 0.3652014434337616, 0.3906070291996002, 0.41549208760261536, 0.4398425817489624, 0.46364760398864746, 0.4868992269039154, 0.5095922350883484, 0.5317240953445435, 0.55329430103302, 0.5743048191070557, 0.5947592854499817, 0.6146629452705383, 0.6340227127075195, 0.65284663438797, 0.6711438298225403, 0.6889243721961975, 0.7061991095542908, 0.7229793667793274, 0.7392770648002625, 0.7551044225692749, 0.7704738974571228, 0.7853981852531433, 0.7998899221420288, 0.8139618039131165, 0.8276265859603882, 0.8408966660499573, 0.8537845015525818, 0.8663022518157959, 0.8784618973731995, 0.8902751207351685, 0.901753306388855, 0.9129077196121216, 0.9237491488456726, 0.9342880845069885, 0.9445348978042603, 0.954499363899231, 0.964191198348999, 0.9736196398735046, 0.9827937483787537, 0.991722047328949, 1.0004130601882935, 1.008874773979187, 1.0171149969100952, 1.0251412391662598, 1.0329607725143433, 1.0405805110931396, 1.0480072498321533, 1.0552473068237305, 1.0623070001602173, 1.0691922903060913, 1.075908899307251, -1.0824624300003052, -1.075908899307251, -1.0691922903060913, -1.0623070001602173, -1.0552473068237305, -1.0480072498321533, -1.0405805110931396, -1.0329607725143433, -1.0251412391662598, -1.0171149969100952, -1.008874773979187, -1.0004130601882935, -0.991722047328949, -0.9827937483787537, -0.9736196398735046, -0.964191198348999, -0.954499363899231, -0.9445348978042603, -0.9342880845069885, -0.9237491488456726, -0.9129077196121216, -0.901753306388855, -0.8902751207351685, -0.8784618973731995, -0.8663022518157959, -0.8537845015525818, -0.8408966660499573, -0.8276265859603882, -0.8139618039131165, -0.7998899221420288, -0.7853981852531433, -0.7704738974571228, -0.7551044225692749, -0.7392770648002625, -0.7229793667793274, -0.7061991095542908, -0.6889243721961975, -0.6711438298225403, -0.65284663438797, -0.6340227127075195, -0.6146629452705383, -0.5947592854499817, -0.5743048191070557, -0.55329430103302, -0.5317240953445435, -0.5095922350883484, -0.4868992269039154, -0.46364760398864746, -0.4398425817489624, -0.41549208760261536, -0.3906070291996002, -0.3652014434337616, -0.33929261565208435, -0.31290122866630554, -0.2860514521598816, -0.2587708830833435, -0.23109066486358643, -0.20304521918296814, -0.1746722012758255, -0.14601226150989532, -0.11710874736309052, -0.0880073755979538, -0.058755822479724884, -0.029403287917375565, 0.0, 0.02856365777552128, 0.05708078294992447, 0.08550529181957245, 0.11379200965166092, 0.141897052526474, 0.1697782725095749, 0.19739556312561035, 0.22471116483211517, 0.25168997049331665, 0.2782996594905853, 0.3045108914375305, 0.3302973508834839, 0.3556358814239502, 0.38050636649131775, 0.4048917889595032, 0.4287780225276947, 0.45215386152267456, 0.4750107526779175, 0.49734270572662354, 0.5191460847854614, 0.5404195189476013, 0.5611634254455566, 0.5813801884651184, 0.6010737419128418, 0.6202495098114014, 0.6389139890670776, 0.6570749282836914, 0.6747409701347351, 0.6919213533401489, 0.7086262702941895, 0.7248661518096924, 0.7406519055366516, 0.7559948563575745, 0.7709064483642578, 0.7853981852531433, 0.7994817495346069, 0.8131688237190247, 0.8264709711074829, 0.8393996357917786, 0.8519663214683533, 0.8641821146011353, 0.876058042049408, 0.8876048922538757, 0.898833155632019, 0.909753143787384, 0.9203749299049377, 0.9307081699371338, 0.9407624006271362, 0.9505468606948853, 0.9600703716278076, 0.9693416357040405, 0.9783689975738525, 0.9871605038642883, 0.9957240223884583, 1.004067063331604, 1.0121970176696777, 1.0201207399368286, 1.0278451442718506, 1.035376787185669, 1.0427218675613403, 1.0498865842819214, 1.0568766593933105, 1.0636978149414062, -1.0703555345535278, -1.0636978149414062, -1.0568766593933105, -1.0498865842819214, -1.0427218675613403, -1.035376787185669, -1.0278451442718506, -1.0201207399368286, -1.0121970176696777, -1.004067063331604, -0.9957240223884583, -0.9871605038642883, -0.9783689975738525, -0.9693416357040405, -0.9600703716278076, -0.9505468606948853, -0.9407624006271362, -0.9307081699371338, -0.9203749299049377, -0.909753143787384, -0.898833155632019, -0.8876048922538757, -0.876058042049408, -0.8641821146011353, -0.8519663214683533, -0.8393996357917786, -0.8264709711074829, -0.8131688237190247, -0.7994817495346069, -0.7853981852531433, -0.7709064483642578, -0.7559948563575745, -0.7406519055366516, -0.7248661518096924, -0.7086262702941895, -0.6919213533401489, -0.6747409701347351, -0.6570749282836914, -0.6389139890670776, -0.6202495098114014, -0.6010737419128418, -0.5813801884651184, -0.5611634254455566, -0.5404195189476013, -0.5191460847854614, -0.49734270572662354, -0.4750107526779175, -0.45215386152267456, -0.4287780225276947, -0.4048917889595032, -0.38050636649131775, -0.3556358814239502, -0.3302973508834839, -0.3045108914375305, -0.2782996594905853, -0.25168997049331665, -0.22471116483211517, -0.19739556312561035, -0.1697782725095749, -0.141897052526474, -0.11379200965166092, -0.08550529181957245, -0.05708078294992447, -0.02856365777552128, 0.0, 0.0277706366032362, 0.055498506873846054, 0.08314123004674911, 0.1106572225689888, 0.13800601661205292, 0.16514867544174194, 0.19204801321029663, 0.21866895258426666, 0.244978666305542, 0.2709468603134155, 0.2965458035469055, 0.32175055146217346, 0.34653887152671814, 0.3708913028240204, 0.3947911262512207, 0.4182243347167969, 0.441179484128952, 0.46364760398864746, 0.4856221079826355, 0.5070984959602356, 0.5280744433403015, 0.5485494136810303, 0.5685245394706726, 0.588002622127533, 0.6069876551628113, 0.6254850625991821, 0.6435011029243469, 0.6610431671142578, 0.6781193017959595, 0.6947382688522339, 0.710909366607666, 0.726642370223999, 0.7419472932815552, 0.7568345069885254, 0.7713145613670349, 0.7853981852531433, 0.7990959286689758, 0.8124186396598816, 0.8253768682479858, 0.8379812240600586, 0.8502421975135803, 0.8621700406074524, 0.8737749457359314, 0.88506680727005, 0.8960554003715515, 0.9067501425743103, 0.9171604514122009, 0.9272952079772949, 0.9371632933616638, 0.9467732906341553, 0.9561333656311035, 0.9652516841888428, 0.9741359353065491, 0.9827937483787537, 0.9912323355674744, 0.9994588494300842, 1.0074800252914429, 1.0153025388717651, 1.022932767868042, 1.0303767919540405, 1.0376405715942383, 1.0447299480438232, 1.0516501665115356, -1.0584068298339844, -1.0516501665115356, -1.0447299480438232, -1.0376405715942383, -1.0303767919540405, -1.022932767868042, -1.0153025388717651, -1.0074800252914429, -0.9994588494300842, -0.9912323355674744, -0.9827937483787537, -0.9741359353065491, -0.9652516841888428, -0.9561333656311035, -0.9467732906341553, -0.9371632933616638, -0.9272952079772949, -0.9171604514122009, -0.9067501425743103, -0.8960554003715515, -0.88506680727005, -0.8737749457359314, -0.8621700406074524, -0.8502421975135803, -0.8379812240600586, -0.8253768682479858, -0.8124186396598816, -0.7990959286689758, -0.7853981852531433, -0.7713145613670349, -0.7568345069885254, -0.7419472932815552, -0.726642370223999, -0.710909366607666, -0.6947382688522339, -0.6781193017959595, -0.6610431671142578, -0.6435011029243469, -0.6254850625991821, -0.6069876551628113, -0.588002622127533, -0.5685245394706726, -0.5485494136810303, -0.5280744433403015, -0.5070984959602356, -0.4856221079826355, -0.46364760398864746, -0.441179484128952, -0.4182243347167969, -0.3947911262512207, -0.3708913028240204, -0.34653887152671814, -0.32175055146217346, -0.2965458035469055, -0.2709468603134155, -0.244978666305542, -0.21866895258426666, -0.19204801321029663, -0.16514867544174194, -0.13800601661205292, -0.1106572225689888, -0.08314123004674911, -0.055498506873846054, -0.0277706366032362, 0.0, 0.027020448818802834, 0.054001498967409134, 0.08090409636497498, 0.10768987238407135, 0.1343214362859726, 0.1607627421617508, 0.1869792640209198, 0.2129383534193039, 0.23860932886600494, 0.2639637291431427, 0.28897541761398315, 0.3136206567287445, 0.33787819743156433, 0.361729234457016, 0.3851574957370758, 0.4081490933895111, 0.43069252371788025, 0.4527784585952759, 0.4743998944759369, 0.4955516755580902, 0.5162306427955627, 0.5364354848861694, 0.5561662316322327, 0.5754246711730957, 0.5942137241363525, 0.6125375628471375, 0.6304014325141907, 0.6478114128112793, 0.664774477481842, 0.6812981963157654, 0.6973907947540283, 0.7130608558654785, 0.728317379951477, 0.7431697845458984, 0.757627546787262, 0.771700382232666, 0.7853981852531433, 0.798730731010437, 0.8117078542709351, 0.8243395090103149, 0.8366353511810303, 0.8486049771308899, 0.8602579832077026, 0.8716037273406982, 0.8826513886451721, 0.8934099078178406, 0.9038881063461304, 0.9140946865081787, 0.9240378737449646, 0.9337260127067566, 0.9431669116020203, 0.9523683190345764, 0.9613378047943115, 0.9700825214385986, 0.9786096215248108, 0.9869259595870972, 0.9950380325317383, 1.0029523372650146, 1.0106749534606934, 1.0182119607925415, 1.025569200515747, 1.0327521562576294, 1.0397661924362183, -1.0466166734695435, -1.0397661924362183, -1.0327521562576294, -1.025569200515747, -1.0182119607925415, -1.0106749534606934, -1.0029523372650146, -0.9950380325317383, -0.9869259595870972, -0.9786096215248108, -0.9700825214385986, -0.9613378047943115, -0.9523683190345764, -0.9431669116020203, -0.9337260127067566, -0.9240378737449646, -0.9140946865081787, -0.9038881063461304, -0.8934099078178406, -0.8826513886451721, -0.8716037273406982, -0.8602579832077026, -0.8486049771308899, -0.8366353511810303, -0.8243395090103149, -0.8117078542709351, -0.798730731010437, -0.7853981852531433, -0.771700382232666, -0.757627546787262, -0.7431697845458984, -0.728317379951477, -0.7130608558654785, -0.6973907947540283, -0.6812981963157654, -0.664774477481842, -0.6478114128112793, -0.6304014325141907, -0.6125375628471375, -0.5942137241363525, -0.5754246711730957, -0.5561662316322327, -0.5364354848861694, -0.5162306427955627, -0.4955516755580902, -0.4743998944759369, -0.4527784585952759, -0.43069252371788025, -0.4081490933895111, -0.3851574957370758, -0.361729234457016, -0.33787819743156433, -0.3136206567287445, -0.28897541761398315, -0.2639637291431427, -0.23860932886600494, -0.2129383534193039, -0.1869792640209198, -0.1607627421617508, -0.1343214362859726, -0.10768987238407135, -0.08090409636497498, -0.054001498967409134, -0.027020448818802834, 0.0, 0.026309717446565628, 0.052583061158657074, 0.07878395915031433, 0.10487693548202515, 0.130827397108078, 0.15660187602043152, 0.18216830492019653, 0.20749622583389282, 0.23255693912506104, 0.2573237121105194, 0.28177186846733093, 0.3058788776397705, 0.3296244144439697, 0.35299038887023926, 0.37596094608306885, 0.39852243661880493, 0.42066335678100586, 0.44237422943115234, 0.46364760398864746, 0.4844779372215271, 0.5048613548278809, 0.5247957706451416, 0.544280469417572, 0.563316285610199, 0.5819051265716553, 0.6000502109527588, 0.6177557110786438, 0.635026752948761, 0.6518691182136536, 0.6682894229888916, 0.6842948198318481, 0.6998928785324097, 0.7150917053222656, 0.7298996448516846, 0.7443253993988037, 0.758377730846405, 0.7720656394958496, 0.7853981852531433, 0.798384428024292, 0.8110335469245911, 0.8233546018600464, 0.8353565335273743, 0.8470483422279358, 0.8584387302398682, 0.8695363998413086, 0.88034987449646, 0.8908874988555908, 0.9011573791503906, 0.911167562007904, 0.9209258556365967, 0.9304398894309998, 0.9397169351577759, 0.9487643241882324, 0.9575889706611633, 0.9661977291107178, 0.974597156047821, 0.9827937483787537, 0.9907935261726379, 0.9986026883125305, 1.006226897239685, 1.0136719942092896, 1.0209431648254395, 1.0280457735061646, -1.034985065460205, -1.0280457735061646, -1.0209431648254395, -1.0136719942092896, -1.006226897239685, -0.9986026883125305, -0.9907935261726379, -0.9827937483787537, -0.974597156047821, -0.9661977291107178, -0.9575889706611633, -0.9487643241882324, -0.9397169351577759, -0.9304398894309998, -0.9209258556365967, -0.911167562007904, -0.9011573791503906, -0.8908874988555908, -0.88034987449646, -0.8695363998413086, -0.8584387302398682, -0.8470483422279358, -0.8353565335273743, -0.8233546018600464, -0.8110335469245911, -0.798384428024292, -0.7853981852531433, -0.7720656394958496, -0.758377730846405, -0.7443253993988037, -0.7298996448516846, -0.7150917053222656, -0.6998928785324097, -0.6842948198318481, -0.6682894229888916, -0.6518691182136536, -0.635026752948761, -0.6177557110786438, -0.6000502109527588, -0.5819051265716553, -0.563316285610199, -0.544280469417572, -0.5247957706451416, -0.5048613548278809, -0.4844779372215271, -0.46364760398864746, -0.44237422943115234, -0.42066335678100586, -0.39852243661880493, -0.37596094608306885, -0.35299038887023926, -0.3296244144439697, -0.3058788776397705, -0.28177186846733093, -0.2573237121105194, -0.23255693912506104, -0.20749622583389282, -0.18216830492019653, -0.15660187602043152, -0.130827397108078, -0.10487693548202515, -0.07878395915031433, -0.052583061158657074, -0.026309717446565628, 0.0, 0.025635408237576485, 0.05123716592788696, 0.07677189260721207, 0.10220671445131302, 0.12750956416130066, 0.15264932811260223, 0.17759616672992706, 0.2023216336965561, 0.22679884731769562, 0.251002699136734, 0.2749098539352417, 0.2984989285469055, 0.32175055146217346, 0.3446473181247711, 0.36717382073402405, 0.38931670784950256, 0.4110645353794098, 0.43240776658058167, 0.4533386826515198, 0.4738513231277466, 0.49394136667251587, 0.5136060118675232, 0.5328438878059387, 0.5516549944877625, 0.5700404644012451, 0.588002622127533, 0.6055446863174438, 0.6226707696914673, 0.6393858790397644, 0.6556956171989441, 0.671606183052063, 0.6871241927146912, 0.7022569179534912, 0.7170118093490601, 0.7313966751098633, 0.7454195022583008, 0.7590884566307068, 0.7724118828773499, 0.7853981852531433, 0.7980557084083557, 0.8103929758071899, 0.8224182724952698, 0.8341400027275085, 0.8455663919448853, 0.8567056059837341, 0.8675656914710999, 0.878154456615448, 0.8884797692298889, 0.8985491394996643, 0.9083700180053711, 0.9179496765136719, 0.9272952079772949, 0.9364135265350342, 0.9453113079071045, 0.9539951086044312, 0.9624713063240051, 0.9707460999488831, 0.9788255095481873, 0.9867152571678162, 0.994421124458313, 1.0019484758377075, 1.0093026161193848, 1.016488790512085, -1.0235118865966797, -1.016488790512085, -1.0093026161193848, -1.0019484758377075, -0.994421124458313, -0.9867152571678162, -0.9788255095481873, -0.9707460999488831, -0.9624713063240051, -0.9539951086044312, -0.9453113079071045, -0.9364135265350342, -0.9272952079772949, -0.9179496765136719, -0.9083700180053711, -0.8985491394996643, -0.8884797692298889, -0.878154456615448, -0.8675656914710999, -0.8567056059837341, -0.8455663919448853, -0.8341400027275085, -0.8224182724952698, -0.8103929758071899, -0.7980557084083557, -0.7853981852531433, -0.7724118828773499, -0.7590884566307068, -0.7454195022583008, -0.7313966751098633, -0.7170118093490601, -0.7022569179534912, -0.6871241927146912, -0.671606183052063, -0.6556956171989441, -0.6393858790397644, -0.6226707696914673, -0.6055446863174438, -0.588002622127533, -0.5700404644012451, -0.5516549944877625, -0.5328438878059387, -0.5136060118675232, -0.49394136667251587, -0.4738513231277466, -0.4533386826515198, -0.43240776658058167, -0.4110645353794098, -0.38931670784950256, -0.36717382073402405, -0.3446473181247711, -0.32175055146217346, -0.2984989285469055, -0.2749098539352417, -0.251002699136734, -0.22679884731769562, -0.2023216336965561, -0.17759616672992706, -0.15264932811260223, -0.12750956416130066, -0.10220671445131302, -0.07677189260721207, -0.05123716592788696, -0.025635408237576485, 0.0, 0.02499479427933693, 0.04995839670300484, 0.0748598501086235, 0.09966865181922913, 0.12435499578714371, 0.1488899439573288, 0.17324566841125488, 0.19739556312561035, 0.2213144451379776, 0.244978666305542, 0.2683662176132202, 0.29145678877830505, 0.31423190236091614, 0.3366748094558716, 0.3587706685066223, 0.38050636649131775, 0.40187063813209534, 0.42285391688346863, 0.44344833493232727, 0.46364760398864746, 0.48344701528549194, 0.5028432011604309, 0.5218342542648315, 0.5404195189476013, 0.5585992932319641, 0.5763752460479736, 0.5937496423721313, 0.6107259392738342, 0.627308189868927, 0.6435011029243469, 0.6593100428581238, 0.6747409701347351, 0.6898000240325928, 0.704494059085846, 0.7188299894332886, 0.7328150868415833, 0.7464568018913269, 0.7597627639770508, 0.7727406024932861, 0.7853981852531433, 0.7977432012557983, 0.8097835779190063, 0.8215270042419434, 0.832981288433075, 0.8441540002822876, 0.8550527095794678, 0.865684986114502, 0.876058042049408, 0.8861791491508484, 0.8960554003715515, 0.9056936502456665, 0.9151006937026978, 0.9242832064628601, 0.9332475066184998, 0.9420000314712524, 0.9505468606948853, 0.958893895149231, 0.9670469760894775, 0.9750117659568787, 0.9827937483787537, 0.9903981685638428, 0.9978302121162415, 1.0050948858261108, -1.0121970176696777, -1.0050948858261108, -0.9978302121162415, -0.9903981685638428, -0.9827937483787537, -0.9750117659568787, -0.9670469760894775, -0.958893895149231, -0.9505468606948853, -0.9420000314712524, -0.9332475066184998, -0.9242832064628601, -0.9151006937026978, -0.9056936502456665, -0.8960554003715515, -0.8861791491508484, -0.876058042049408, -0.865684986114502, -0.8550527095794678, -0.8441540002822876, -0.832981288433075, -0.8215270042419434, -0.8097835779190063, -0.7977432012557983, -0.7853981852531433, -0.7727406024932861, -0.7597627639770508, -0.7464568018913269, -0.7328150868415833, -0.7188299894332886, -0.704494059085846, -0.6898000240325928, -0.6747409701347351, -0.6593100428581238, -0.6435011029243469, -0.627308189868927, -0.6107259392738342, -0.5937496423721313, -0.5763752460479736, -0.5585992932319641, -0.5404195189476013, -0.5218342542648315, -0.5028432011604309, -0.48344701528549194, -0.46364760398864746, -0.44344833493232727, -0.42285391688346863, -0.40187063813209534, -0.38050636649131775, -0.3587706685066223, -0.3366748094558716, -0.31423190236091614, -0.29145678877830505, -0.2683662176132202, -0.244978666305542, -0.2213144451379776, -0.19739556312561035, -0.17324566841125488, -0.1488899439573288, -0.12435499578714371, -0.09966865181922913, -0.0748598501086235, -0.04995839670300484, -0.02499479427933693, 0.0, 0.02438540942966938, 0.04874185100197792, 0.07304056733846664, 0.09725319594144821, 0.12135200202465057, 0.14531001448631287, 0.16910122334957123, 0.19270075857639313, 0.21608497202396393, 0.23923160135746002, 0.2621198296546936, 0.2847304344177246, 0.30704572796821594, 0.3290497064590454, 0.35072794556617737, 0.37206774950027466, 0.39305803179740906, 0.4136892259120941, 0.4339533746242523, 0.45384401082992554, 0.4733560383319855, 0.49248576164245605, 0.5112307071685791, 0.5295895934104919, 0.5475622415542603, 0.5651494264602661, 0.5823529362678528, 0.5991753339767456, 0.6156198978424072, 0.6316906213760376, 0.6473921537399292, 0.6627295017242432, 0.6777082681655884, 0.6923344135284424, 0.7066141963005066, 0.7205541133880615, 0.7341610193252563, 0.7474417090415955, 0.7604033946990967, 0.7730531096458435, 0.7853981852531433, 0.7974457740783691, 0.8092032074928284, 0.820677638053894, 0.831876277923584, 0.8428062796592712, 0.8534746170043945, 0.8638882637023926, 0.8740540742874146, 0.8839786648750305, 0.8936687707901001, 0.9031307101249695, 0.9123709797859192, 0.9213955998420715, 0.9302106499671936, 0.9388220906257629, 0.9472355842590332, 0.9554567933082581, 0.9634910821914673, 0.9713438153266907, 0.9790201783180237, 0.9865250587463379, 0.9938634037971497, -1.0010398626327515, -0.9938634037971497, -0.9865250587463379, -0.9790201783180237, -0.9713438153266907, -0.9634910821914673, -0.9554567933082581, -0.9472355842590332, -0.9388220906257629, -0.9302106499671936, -0.9213955998420715, -0.9123709797859192, -0.9031307101249695, -0.8936687707901001, -0.8839786648750305, -0.8740540742874146, -0.8638882637023926, -0.8534746170043945, -0.8428062796592712, -0.831876277923584, -0.820677638053894, -0.8092032074928284, -0.7974457740783691, -0.7853981852531433, -0.7730531096458435, -0.7604033946990967, -0.7474417090415955, -0.7341610193252563, -0.7205541133880615, -0.7066141963005066, -0.6923344135284424, -0.6777082681655884, -0.6627295017242432, -0.6473921537399292, -0.6316906213760376, -0.6156198978424072, -0.5991753339767456, -0.5823529362678528, -0.5651494264602661, -0.5475622415542603, -0.5295895934104919, -0.5112307071685791, -0.49248576164245605, -0.4733560383319855, -0.45384401082992554, -0.4339533746242523, -0.4136892259120941, -0.39305803179740906, -0.37206774950027466, -0.35072794556617737, -0.3290497064590454, -0.30704572796821594, -0.2847304344177246, -0.2621198296546936, -0.23923160135746002, -0.21608497202396393, -0.19270075857639313, -0.16910122334957123, -0.14531001448631287, -0.12135200202465057, -0.09725319594144821, -0.07304056733846664, -0.04874185100197792, -0.02438540942966938, 0.0, 0.023805025964975357, 0.04758310317993164, 0.0713074654340744, 0.09495170414447784, 0.11848995834589005, 0.141897052526474, 0.16514867544174194, 0.1882214993238449, 0.21109333634376526, 0.23374317586421967, 0.25615137815475464, 0.2782996594905853, 0.3001711666584015, 0.32175055146217346, 0.3430239260196686, 0.36397895216941833, 0.38460472226142883, 0.4048917889595032, 0.42483216524124146, 0.4444192051887512, 0.46364760398864746, 0.48251330852508545, 0.5010133981704712, 0.5191460847854614, 0.5369107723236084, 0.5543075203895569, 0.5713374614715576, 0.588002622127533, 0.6043055057525635, 0.6202495098114014, 0.6358384490013123, 0.6510767340660095, 0.6659692525863647, 0.6805212497711182, 0.6947382688522339, 0.7086262702941895, 0.722191333770752, 0.7354397773742676, 0.7483780384063721, 0.7610127329826355, 0.7733505368232727, 0.7853981852531433, 0.7971623539924622, 0.8086497783660889, 0.8198672533035278, 0.8308214545249939, 0.8415189385414124, 0.8519663214683533, 0.8621700406074524, 0.8721364736557007, 0.8818719387054443, 0.8913825154304504, 0.9006742835044861, 0.909753143787384, 0.9186249375343323, 0.9272952079772949, 0.9357696175575256, 0.9440534114837646, 0.9521519541740417, 0.9600703716278076, 0.9678135514259338, 0.9753864407539368, 0.9827937483787537, -0.9900399446487427, -0.9827937483787537, -0.9753864407539368, -0.9678135514259338, -0.9600703716278076, -0.9521519541740417, -0.9440534114837646, -0.9357696175575256, -0.9272952079772949, -0.9186249375343323, -0.909753143787384, -0.9006742835044861, -0.8913825154304504, -0.8818719387054443, -0.8721364736557007, -0.8621700406074524, -0.8519663214683533, -0.8415189385414124, -0.8308214545249939, -0.8198672533035278, -0.8086497783660889, -0.7971623539924622, -0.7853981852531433, -0.7733505368232727, -0.7610127329826355, -0.7483780384063721, -0.7354397773742676, -0.722191333770752, -0.7086262702941895, -0.6947382688522339, -0.6805212497711182, -0.6659692525863647, -0.6510767340660095, -0.6358384490013123, -0.6202495098114014, -0.6043055057525635, -0.588002622127533, -0.5713374614715576, -0.5543075203895569, -0.5369107723236084, -0.5191460847854614, -0.5010133981704712, -0.48251330852508545, -0.46364760398864746, -0.4444192051887512, -0.42483216524124146, -0.4048917889595032, -0.38460472226142883, -0.36397895216941833, -0.3430239260196686, -0.32175055146217346, -0.3001711666584015, -0.2782996594905853, -0.25615137815475464, -0.23374317586421967, -0.21109333634376526, -0.1882214993238449, -0.16514867544174194, -0.141897052526474, -0.11848995834589005, -0.09495170414447784, -0.0713074654340744, -0.04758310317993164, -0.023805025964975357, 0.0, 0.023251622915267944, 0.04647812992334366, 0.06965457648038864, 0.09275632351636887, 0.1157592162489891, 0.13863973319530487, 0.16137510538101196, 0.18394345045089722, 0.20632389187812805, 0.22849664092063904, 0.25044310092926025, 0.2721458971500397, 0.2935889959335327, 0.31475767493247986, 0.33563855290412903, 0.35621964931488037, 0.3764903247356415, 0.3964412808418274, 0.4160645008087158, 0.43535327911376953, 0.4543020725250244, 0.47290658950805664, 0.49116361141204834, 0.509070873260498, 0.526627242565155, 0.5438324809074402, 0.5606870055198669, 0.5771921873092651, 0.5933501720428467, 0.6091634631156921, 0.6246353983879089, 0.6397697925567627, 0.6545707583427429, 0.6690430045127869, 0.6831914186477661, 0.6970213651657104, 0.7105383276939392, 0.723747968673706, 0.7366563081741333, 0.7492693066596985, 0.7615931630134583, 0.7736340165138245, 0.7853981852531433, 0.7968919277191162, 0.8081215023994446, 0.8190932869911194, 0.8298133611679077, 0.8402880430221558, 0.8505233526229858, 0.8605253100395203, 0.8702999353408813, 0.8798530697822571, 0.8891904950141907, 0.898317813873291, 0.907240629196167, 0.9159642457962036, 0.9244940876960754, 0.9328353404998779, 0.9409930109977722, 0.9489720463752747, 0.9567772746086121, 0.9644134640693665, 0.971885085105896, -0.9791966080665588, -0.971885085105896, -0.9644134640693665, -0.9567772746086121, -0.9489720463752747, -0.9409930109977722, -0.9328353404998779, -0.9244940876960754, -0.9159642457962036, -0.907240629196167, -0.898317813873291, -0.8891904950141907, -0.8798530697822571, -0.8702999353408813, -0.8605253100395203, -0.8505233526229858, -0.8402880430221558, -0.8298133611679077, -0.8190932869911194, -0.8081215023994446, -0.7968919277191162, -0.7853981852531433, -0.7736340165138245, -0.7615931630134583, -0.7492693066596985, -0.7366563081741333, -0.723747968673706, -0.7105383276939392, -0.6970213651657104, -0.6831914186477661, -0.6690430045127869, -0.6545707583427429, -0.6397697925567627, -0.6246353983879089, -0.6091634631156921, -0.5933501720428467, -0.5771921873092651, -0.5606870055198669, -0.5438324809074402, -0.526627242565155, -0.509070873260498, -0.49116361141204834, -0.47290658950805664, -0.4543020725250244, -0.43535327911376953, -0.4160645008087158, -0.3964412808418274, -0.3764903247356415, -0.35621964931488037, -0.33563855290412903, -0.31475767493247986, -0.2935889959335327, -0.2721458971500397, -0.25044310092926025, -0.22849664092063904, -0.20632389187812805, -0.18394345045089722, -0.16137510538101196, -0.13863973319530487, -0.1157592162489891, -0.09275632351636887, -0.06965457648038864, -0.04647812992334366, -0.023251622915267944, 0.0, 0.022723359987139702, 0.04542328044772148, 0.06807646155357361, 0.09065988659858704, 0.11315098404884338, 0.13552771508693695, 0.15776874125003815, 0.17985349893569946, 0.2017623484134674, 0.2234766036272049, 0.244978666305542, 0.2662520408630371, 0.28728145360946655, 0.30805277824401855, 0.328553169965744, 0.34877100586891174, 0.3686959147453308, 0.3883187174797058, 0.407631516456604, 0.4266274869441986, 0.4453010559082031, 0.46364760398864746, 0.48166367411613464, 0.4993467330932617, 0.5166951417922974, 0.5337082147598267, 0.5503859519958496, 0.5667291879653931, 0.5827394723892212, 0.5984188914299011, 0.613770067691803, 0.6287962794303894, 0.6435011029243469, 0.6578885912895203, 0.6719631552696228, 0.6857295036315918, 0.6991925835609436, 0.7123575806617737, 0.7252299189567566, 0.7378150820732117, 0.7501186728477478, 0.762146532535553, 0.7739044427871704, 0.7853981852531433, 0.7966336607933044, 0.8076167106628418, 0.8183532357215881, 0.8288490772247314, 0.8391098976135254, 0.8491414785385132, 0.8589494824409485, 0.8685393929481506, 0.8779168128967285, 0.8870869874954224, 0.8960554003715515, 0.9048271179199219, 0.9134072065353394, 0.9218007922172546, 0.930012583732605, 0.938047468662262, 0.9459100961685181, 0.9536049365997314, 0.9611364603042603, -0.9685089588165283, -0.9611364603042603, -0.9536049365997314, -0.9459100961685181, -0.938047468662262, -0.930012583732605, -0.9218007922172546, -0.9134072065353394, -0.9048271179199219, -0.8960554003715515, -0.8870869874954224, -0.8779168128967285, -0.8685393929481506, -0.8589494824409485, -0.8491414785385132, -0.8391098976135254, -0.8288490772247314, -0.8183532357215881, -0.8076167106628418, -0.7966336607933044, -0.7853981852531433, -0.7739044427871704, -0.762146532535553, -0.7501186728477478, -0.7378150820732117, -0.7252299189567566, -0.7123575806617737, -0.6991925835609436, -0.6857295036315918, -0.6719631552696228, -0.6578885912895203, -0.6435011029243469, -0.6287962794303894, -0.613770067691803, -0.5984188914299011, -0.5827394723892212, -0.5667291879653931, -0.5503859519958496, -0.5337082147598267, -0.5166951417922974, -0.4993467330932617, -0.48166367411613464, -0.46364760398864746, -0.4453010559082031, -0.4266274869441986, -0.407631516456604, -0.3883187174797058, -0.3686959147453308, -0.34877100586891174, -0.328553169965744, -0.30805277824401855, -0.28728145360946655, -0.2662520408630371, -0.244978666305542, -0.2234766036272049, -0.2017623484134674, -0.17985349893569946, -0.15776874125003815, -0.13552771508693695, -0.11315098404884338, -0.09065988659858704, -0.06807646155357361, -0.04542328044772148, -0.022723359987139702, 0.0, 0.02221856452524662, 0.04441521689295769, 0.06656816601753235, 0.08865588158369064, 0.1106572225689888, 0.13255153596401215, 0.15431877970695496, 0.1759396195411682, 0.19739556312561035, 0.21866895258426666, 0.23974311351776123, 0.2606023848056793, 0.28123220801353455, 0.3016190528869629, 0.32175055146217346, 0.3416154980659485, 0.36120375990867615, 0.38050636649131775, 0.3995154798030853, 0.4182243347167969, 0.4366271495819092, 0.45471927523612976, 0.4724969267845154, 0.489957332611084, 0.5070984959602356, 0.5239193439483643, 0.5404195189476013, 0.5565993189811707, 0.5724598169326782, 0.588002622127533, 0.6032298803329468, 0.6181442141532898, 0.6327488422393799, 0.647047221660614, 0.6610431671142578, 0.6747409701347351, 0.6881449818611145, 0.7012599110603333, 0.7140907049179077, 0.726642370223999, 0.7389200329780579, 0.750929057598114, 0.7626748085021973, 0.7741627097129822, 0.7853981852531433, 0.79638671875, 0.8071338534355164, 0.8176450729370117, 0.8279256820678711, 0.8379812240600586, 0.8478169441223145, 0.8574382066726685, 0.8668501973152161, 0.876058042049408, 0.88506680727005, 0.8938814997673035, 0.9025068879127502, 0.9109479188919067, 0.9192091226577759, 0.9272952079772949, 0.935210645198822, 0.942959725856781, 0.9505468606948853, -0.9579761028289795, -0.9505468606948853, -0.942959725856781, -0.935210645198822, -0.9272952079772949, -0.9192091226577759, -0.9109479188919067, -0.9025068879127502, -0.8938814997673035, -0.88506680727005, -0.876058042049408, -0.8668501973152161, -0.8574382066726685, -0.8478169441223145, -0.8379812240600586, -0.8279256820678711, -0.8176450729370117, -0.8071338534355164, -0.79638671875, -0.7853981852531433, -0.7741627097129822, -0.7626748085021973, -0.750929057598114, -0.7389200329780579, -0.726642370223999, -0.7140907049179077, -0.7012599110603333, -0.6881449818611145, -0.6747409701347351, -0.6610431671142578, -0.647047221660614, -0.6327488422393799, -0.6181442141532898, -0.6032298803329468, -0.588002622127533, -0.5724598169326782, -0.5565993189811707, -0.5404195189476013, -0.5239193439483643, -0.5070984959602356, -0.489957332611084, -0.4724969267845154, -0.45471927523612976, -0.4366271495819092, -0.4182243347167969, -0.3995154798030853, -0.38050636649131775, -0.36120375990867615, -0.3416154980659485, -0.32175055146217346, -0.3016190528869629, -0.28123220801353455, -0.2606023848056793, -0.23974311351776123, -0.21866895258426666, -0.19739556312561035, -0.1759396195411682, -0.15431877970695496, -0.13255153596401215, -0.1106572225689888, -0.08865588158369064, -0.06656816601753235, -0.04441521689295769, -0.02221856452524662, 0.0, 0.02173570729792118, 0.04345089569687843, 0.06512515991926193, 0.08673834055662155, 0.10827059298753738, 0.12970253825187683, 0.15101534128189087, 0.1721908152103424, 0.19321148097515106, 0.2140606790781021, 0.23472261428833008, 0.2551823854446411, 0.27542608976364136, 0.29544082283973694, 0.31521469354629517, 0.33473682403564453, 0.35399743914604187, 0.3729877173900604, 0.3916999399662018, 0.41012734174728394, 0.42826414108276367, 0.4461055397987366, 0.46364760398864746, 0.4808872938156128, 0.4978223443031311, 0.5144513249397278, 0.5307735204696655, 0.5467888116836548, 0.5624979138374329, 0.5779019594192505, 0.5930025577545166, 0.6078019738197327, 0.6223028898239136, 0.6365082263946533, 0.6504214406013489, 0.6640461683273315, 0.677386462688446, 0.6904464364051819, 0.703230619430542, 0.7157436013221741, 0.7279900312423706, 0.739974856376648, 0.7517030835151672, 0.7631796002388, 0.7744095921516418, 0.7853981852531433, 0.7961504459381104, 0.8066715598106384, 0.8169665932655334, 0.8270407319068909, 0.8368989825248718, 0.8465463519096375, 0.8559877276420593, 0.8652281761169434, 0.874272346496582, 0.8831250667572021, 0.891791045665741, 0.9002747535705566, 0.9085808396339417, 0.9167135953903198, 0.9246774315834045, 0.9324765205383301, 0.9401150345802307, -0.9475969672203064, -0.9401150345802307, -0.9324765205383301, -0.9246774315834045, -0.9167135953903198, -0.9085808396339417, -0.9002747535705566, -0.891791045665741, -0.8831250667572021, -0.874272346496582, -0.8652281761169434, -0.8559877276420593, -0.8465463519096375, -0.8368989825248718, -0.8270407319068909, -0.8169665932655334, -0.8066715598106384, -0.7961504459381104, -0.7853981852531433, -0.7744095921516418, -0.7631796002388, -0.7517030835151672, -0.739974856376648, -0.7279900312423706, -0.7157436013221741, -0.703230619430542, -0.6904464364051819, -0.677386462688446, -0.6640461683273315, -0.6504214406013489, -0.6365082263946533, -0.6223028898239136, -0.6078019738197327, -0.5930025577545166, -0.5779019594192505, -0.5624979138374329, -0.5467888116836548, -0.5307735204696655, -0.5144513249397278, -0.4978223443031311, -0.4808872938156128, -0.46364760398864746, -0.4461055397987366, -0.42826414108276367, -0.41012734174728394, -0.3916999399662018, -0.3729877173900604, -0.35399743914604187, -0.33473682403564453, -0.31521469354629517, -0.29544082283973694, -0.27542608976364136, -0.2551823854446411, -0.23472261428833008, -0.2140606790781021, -0.19321148097515106, -0.1721908152103424, -0.15101534128189087, -0.12970253825187683, -0.10827059298753738, -0.08673834055662155, -0.06512515991926193, -0.04345089569687843, -0.02173570729792118, 0.0, 0.021273385733366013, 0.04252753406763077, 0.06374331563711166, 0.08490179479122162, 0.10598435997962952, 0.12697279453277588, 0.14784936606884003, 0.16859693825244904, 0.18919901549816132, 0.20963984727859497, 0.2299044281244278, 0.24997861683368683, 0.26984915137290955, 0.28950366377830505, 0.30893075466156006, 0.3281199038028717, 0.3470616042613983, 0.3657473027706146, 0.3841693699359894, 0.40232110023498535, 0.4201967120170593, 0.4377913177013397, 0.45510080456733704, 0.4721219837665558, 0.4888523519039154, 0.5052902102470398, 0.5214344263076782, 0.5372847318649292, 0.5528412461280823, 0.5681047439575195, 0.583076536655426, 0.597758412361145, 0.6121525168418884, 0.6262614130973816, 0.6400881409645081, 0.6536359190940857, 0.6669082045555115, 0.6799088716506958, 0.6926418542861938, 0.7051113247871399, 0.7173216938972473, 0.7292773723602295, 0.7409829497337341, 0.7524430751800537, 0.7636624574661255, 0.7746458649635315, 0.7853981852531433, 0.7959240674972534, 0.8062284588813782, 0.8163161277770996, 0.8261918425559998, 0.8358603119850159, 0.84532630443573, 0.8545944690704346, 0.8636692762374878, 0.8725554347038269, 0.8812572956085205, 0.8897793292999268, 0.8981257677078247, 0.9063009023666382, 0.9143089056015015, 0.922153890132904, 0.9298397302627563, -0.9373704195022583, -0.9298397302627563, -0.922153890132904, -0.9143089056015015, -0.9063009023666382, -0.8981257677078247, -0.8897793292999268, -0.8812572956085205, -0.8725554347038269, -0.8636692762374878, -0.8545944690704346, -0.84532630443573, -0.8358603119850159, -0.8261918425559998, -0.8163161277770996, -0.8062284588813782, -0.7959240674972534, -0.7853981852531433, -0.7746458649635315, -0.7636624574661255, -0.7524430751800537, -0.7409829497337341, -0.7292773723602295, -0.7173216938972473, -0.7051113247871399, -0.6926418542861938, -0.6799088716506958, -0.6669082045555115, -0.6536359190940857, -0.6400881409645081, -0.6262614130973816, -0.6121525168418884, -0.597758412361145, -0.583076536655426, -0.5681047439575195, -0.5528412461280823, -0.5372847318649292, -0.5214344263076782, -0.5052902102470398, -0.4888523519039154, -0.4721219837665558, -0.45510080456733704, -0.4377913177013397, -0.4201967120170593, -0.40232110023498535, -0.3841693699359894, -0.3657473027706146, -0.3470616042613983, -0.3281199038028717, -0.30893075466156006, -0.28950366377830505, -0.26984915137290955, -0.24997861683368683, -0.2299044281244278, -0.20963984727859497, -0.18919901549816132, -0.16859693825244904, -0.14784936606884003, -0.12697279453277588, -0.10598435997962952, -0.08490179479122162, -0.06374331563711166, -0.04252753406763077, -0.021273385733366013, 0.0, 0.020830320194363594, 0.041642580181360245, 0.06241881102323532, 0.08314123004674911, 0.10379233956336975, 0.12435499578714371, 0.14481249451637268, 0.16514867544174194, 0.18534794449806213, 0.2053953856229782, 0.22527678310871124, 0.244978666305542, 0.2644883692264557, 0.283794105052948, 0.30288487672805786, 0.32175055146217346, 0.3403819501399994, 0.3587706685066223, 0.3769092559814453, 0.3947911262512207, 0.4124104380607605, 0.4297622740268707, 0.4468424618244171, 0.46364760398864746, 0.4801750183105469, 0.49642276763916016, 0.5123894810676575, 0.5280744433403015, 0.5434775948524475, 0.5585992932319641, 0.5734405517578125, 0.588002622127533, 0.6022873520851135, 0.6162969470024109, 0.6300339102745056, 0.6435011029243469, 0.6567016839981079, 0.6696389317512512, 0.6823165416717529, 0.6947382688522339, 0.7069080471992493, 0.7188299894332886, 0.7305083274841309, 0.7419472932815552, 0.7531512975692749, 0.7641247510910034, 0.7748722434043884, 0.7853981852531433, 0.7957070469856262, 0.8058034777641296, 0.8156919479370117, 0.8253768682479858, 0.8348627090454102, 0.8441540002822876, 0.8532549738883972, 0.8621700406074524, 0.8709034323692322, 0.8794593811035156, 0.8878419995307922, 0.8960554003715515, 0.9041035175323486, 0.9119902849197388, 0.9197195768356323, -0.9272952079772949, -0.9197195768356323, -0.9119902849197388, -0.9041035175323486, -0.8960554003715515, -0.8878419995307922, -0.8794593811035156, -0.8709034323692322, -0.8621700406074524, -0.8532549738883972, -0.8441540002822876, -0.8348627090454102, -0.8253768682479858, -0.8156919479370117, -0.8058034777641296, -0.7957070469856262, -0.7853981852531433, -0.7748722434043884, -0.7641247510910034, -0.7531512975692749, -0.7419472932815552, -0.7305083274841309, -0.7188299894332886, -0.7069080471992493, -0.6947382688522339, -0.6823165416717529, -0.6696389317512512, -0.6567016839981079, -0.6435011029243469, -0.6300339102745056, -0.6162969470024109, -0.6022873520851135, -0.588002622127533, -0.5734405517578125, -0.5585992932319641, -0.5434775948524475, -0.5280744433403015, -0.5123894810676575, -0.49642276763916016, -0.4801750183105469, -0.46364760398864746, -0.4468424618244171, -0.4297622740268707, -0.4124104380607605, -0.3947911262512207, -0.3769092559814453, -0.3587706685066223, -0.3403819501399994, -0.32175055146217346, -0.30288487672805786, -0.283794105052948, -0.2644883692264557, -0.244978666305542, -0.22527678310871124, -0.2053953856229782, -0.18534794449806213, -0.16514867544174194, -0.14481249451637268, -0.12435499578714371, -0.10379233956336975, -0.08314123004674911, -0.06241881102323532, -0.041642580181360245, -0.020830320194363594, 0.0, 0.020405329763889313, 0.040793683379888535, 0.06114816293120384, 0.08145204186439514, 0.10168885439634323, 0.12184243649244308, 0.141897052526474, 0.16183742880821228, 0.1816488355398178, 0.20131710171699524, 0.22082877159118652, 0.24017101526260376, 0.25933173298835754, 0.2782996594905853, 0.2970642149448395, 0.3156156539916992, 0.33394506573677063, 0.35204431414604187, 0.36990606784820557, 0.3875238001346588, 0.4048917889595032, 0.4220050275325775, 0.43885931372642517, 0.4554510712623596, 0.4717774987220764, 0.48783645033836365, 0.50362628698349, 0.5191460847854614, 0.5343954563140869, 0.5493744611740112, 0.5640836954116821, 0.5785242319107056, 0.5926973819732666, 0.6066051125526428, 0.6202495098114014, 0.633633017539978, 0.6467584371566772, 0.6596287488937378, 0.6722471714019775, 0.6846171617507935, 0.6967422962188721, 0.7086262702941895, 0.7202730178833008, 0.7316864132881165, 0.7428706288337708, 0.7538297176361084, 0.7645678520202637, 0.7750892639160156, 0.7853981852531433, 0.7954988479614258, 0.8053954839706421, 0.8150923848152161, 0.8245937824249268, 0.8339037895202637, 0.8430265784263611, 0.8519663214683533, 0.860727071762085, 0.8693127632141113, 0.8777275085449219, 0.8859750628471375, 0.8940593600273132, 0.9019841551780701, 0.909753143787384, -0.9173699617385864, -0.909753143787384, -0.9019841551780701, -0.8940593600273132, -0.8859750628471375, -0.8777275085449219, -0.8693127632141113, -0.860727071762085, -0.8519663214683533, -0.8430265784263611, -0.8339037895202637, -0.8245937824249268, -0.8150923848152161, -0.8053954839706421, -0.7954988479614258, -0.7853981852531433, -0.7750892639160156, -0.7645678520202637, -0.7538297176361084, -0.7428706288337708, -0.7316864132881165, -0.7202730178833008, -0.7086262702941895, -0.6967422962188721, -0.6846171617507935, -0.6722471714019775, -0.6596287488937378, -0.6467584371566772, -0.633633017539978, -0.6202495098114014, -0.6066051125526428, -0.5926973819732666, -0.5785242319107056, -0.5640836954116821, -0.5493744611740112, -0.5343954563140869, -0.5191460847854614, -0.50362628698349, -0.48783645033836365, -0.4717774987220764, -0.4554510712623596, -0.43885931372642517, -0.4220050275325775, -0.4048917889595032, -0.3875238001346588, -0.36990606784820557, -0.35204431414604187, -0.33394506573677063, -0.3156156539916992, -0.2970642149448395, -0.2782996594905853, -0.25933173298835754, -0.24017101526260376, -0.22082877159118652, -0.20131710171699524, -0.1816488355398178, -0.16183742880821228, -0.141897052526474, -0.12184243649244308, -0.10168885439634323, -0.08145204186439514, -0.06114816293120384, -0.040793683379888535, -0.020405329763889313, 0.0, 0.019997334107756615, 0.03997868672013283, 0.059928156435489655, 0.07982998341321945, 0.09966865181922913, 0.11942892521619797, 0.1390959471464157, 0.15865525603294373, 0.17809294164180756, 0.19739556312561035, 0.2165503054857254, 0.23554497957229614, 0.2543680667877197, 0.27300870418548584, 0.29145678877830505, 0.30970293283462524, 0.327738493680954, 0.3455555737018585, 0.3631470203399658, 0.38050636649131775, 0.39762797951698303, 0.4145068824291229, 0.4311387538909912, 0.447519987821579, 0.46364760398864746, 0.4795192778110504, 0.49513325095176697, 0.5104883313179016, 0.525583803653717, 0.5404195189476013, 0.5549957156181335, 0.5693131685256958, 0.5833730101585388, 0.5971766710281372, 0.6107259392738342, 0.6240230798721313, 0.63707035779953, 0.6498704552650452, 0.6624262928962708, 0.6747409701347351, 0.6868176460266113, 0.6986598372459412, 0.7102710008621216, 0.7216548323631287, 0.7328150868415833, 0.743755578994751, 0.7544801831245422, 0.7649928331375122, 0.7752975225448608, 0.7853981852531433, 0.7952988147735596, 0.8050035238265991, 0.8145161271095276, 0.8238407373428345, 0.832981288433075, 0.8419415950775146, 0.8507256507873535, 0.8593372106552124, 0.8677800893783569, 0.876058042049408, 0.8841747641563416, 0.8921338319778442, 0.8999388813972473, -0.907593309879303, -0.8999388813972473, -0.8921338319778442, -0.8841747641563416, -0.876058042049408, -0.8677800893783569, -0.8593372106552124, -0.8507256507873535, -0.8419415950775146, -0.832981288433075, -0.8238407373428345, -0.8145161271095276, -0.8050035238265991, -0.7952988147735596, -0.7853981852531433, -0.7752975225448608, -0.7649928331375122, -0.7544801831245422, -0.743755578994751, -0.7328150868415833, -0.7216548323631287, -0.7102710008621216, -0.6986598372459412, -0.6868176460266113, -0.6747409701347351, -0.6624262928962708, -0.6498704552650452, -0.63707035779953, -0.6240230798721313, -0.6107259392738342, -0.5971766710281372, -0.5833730101585388, -0.5693131685256958, -0.5549957156181335, -0.5404195189476013, -0.525583803653717, -0.5104883313179016, -0.49513325095176697, -0.4795192778110504, -0.46364760398864746, -0.447519987821579, -0.4311387538909912, -0.4145068824291229, -0.39762797951698303, -0.38050636649131775, -0.3631470203399658, -0.3455555737018585, -0.327738493680954, -0.30970293283462524, -0.29145678877830505, -0.27300870418548584, -0.2543680667877197, -0.23554497957229614, -0.2165503054857254, -0.19739556312561035, -0.17809294164180756, -0.15865525603294373, -0.1390959471464157, -0.11942892521619797, -0.09966865181922913, -0.07982998341321945, -0.059928156435489655, -0.03997868672013283, -0.019997334107756615, 0.0, 0.019605331122875214, 0.039195600897073746, 0.058755822479724884, 0.07827114313840866, 0.09772690385580063, 0.11710874736309052, 0.13640260696411133, 0.1555948257446289, 0.1746722012758255, 0.19362199306488037, 0.21243202686309814, 0.23109066486358643, 0.24958692491054535, 0.2679104208946228, 0.2860514521598816, 0.30400094389915466, 0.32175055146217346, 0.33929261565208435, 0.3566201329231262, 0.37372681498527527, 0.3906070291996002, 0.4072558581829071, 0.42366892099380493, 0.4398425817489624, 0.4557737708091736, 0.4714599549770355, 0.4868992269039154, 0.5020902156829834, 0.5170319676399231, 0.5317240953445435, 0.5461665391921997, 0.5603598952293396, 0.5743048191070557, 0.588002622127533, 0.6014547348022461, 0.6146629452705383, 0.6276293992996216, 0.6403564810752869, 0.65284663438797, 0.6651026606559753, 0.6771275997161865, 0.6889243721961975, 0.7004963755607605, 0.7118468880653381, 0.7229793667793274, 0.73389732837677, 0.7446044683456421, 0.7551044225692749, 0.7654008269309998, 0.7754974961280823, 0.7853981852531433, 0.7951065897941589, 0.8046265840530396, 0.8139618039131165, 0.8231161236763, 0.8320931792259216, 0.8408966660499573, 0.8495302796363831, 0.8579975962638855, 0.8663022518157959, 0.874447762966156, 0.882437527179718, 0.8902751207351685, -0.8979637622833252, -0.8902751207351685, -0.882437527179718, -0.874447762966156, -0.8663022518157959, -0.8579975962638855, -0.8495302796363831, -0.8408966660499573, -0.8320931792259216, -0.8231161236763, -0.8139618039131165, -0.8046265840530396, -0.7951065897941589, -0.7853981852531433, -0.7754974961280823, -0.7654008269309998, -0.7551044225692749, -0.7446044683456421, -0.73389732837677, -0.7229793667793274, -0.7118468880653381, -0.7004963755607605, -0.6889243721961975, -0.6771275997161865, -0.6651026606559753, -0.65284663438797, -0.6403564810752869, -0.6276293992996216, -0.6146629452705383, -0.6014547348022461, -0.588002622127533, -0.5743048191070557, -0.5603598952293396, -0.5461665391921997, -0.5317240953445435, -0.5170319676399231, -0.5020902156829834, -0.4868992269039154, -0.4714599549770355, -0.4557737708091736, -0.4398425817489624, -0.42366892099380493, -0.4072558581829071, -0.3906070291996002, -0.37372681498527527, -0.3566201329231262, -0.33929261565208435, -0.32175055146217346, -0.30400094389915466, -0.2860514521598816, -0.2679104208946228, -0.24958692491054535, -0.23109066486358643, -0.21243202686309814, -0.19362199306488037, -0.1746722012758255, -0.1555948257446289, -0.13640260696411133, -0.11710874736309052, -0.09772690385580063, -0.07827114313840866, -0.058755822479724884, -0.039195600897073746, -0.019605331122875214, 0.0, 0.01922839879989624, 0.03844258934259415, 0.05762842670083046, 0.07677189260721207, 0.09585914760828018, 0.11487660557031631, 0.13381098210811615, 0.15264932811260223, 0.17137911915779114, 0.18998828530311584, 0.20846521854400635, 0.22679884731769562, 0.244978666305542, 0.2629947364330292, 0.2808377146720886, 0.2984989285469055, 0.3159702718257904, 0.33324429392814636, 0.350314199924469, 0.36717382073402405, 0.3838176131248474, 0.4002406597137451, 0.41643860936164856, 0.43240776658058167, 0.44814497232437134, 0.46364760398864746, 0.4789136052131653, 0.49394136667251587, 0.5087298154830933, 0.5232782959938049, 0.5375866293907166, 0.5516549944877625, 0.5654838681221008, 0.5790742635726929, 0.5924273729324341, 0.6055446863174438, 0.6184279918670654, 0.631079375743866, 0.6435011029243469, 0.6556956171989441, 0.6676656007766724, 0.6794137954711914, 0.6909432411193848, 0.7022569179534912, 0.7133581042289734, 0.7242500185966492, 0.734935998916626, 0.7454195022583008, 0.7557039260864258, 0.7657928466796875, 0.7756897211074829, 0.7853981852531433, 0.7949216961860657, 0.8042638301849365, 0.8134282231330872, 0.8224182724952698, 0.8312376141548157, 0.839889645576477, 0.8483778238296509, 0.8567056059837341, 0.864876389503479, 0.8728935122489929, 0.8807601928710938, -0.8884797692298889, -0.8807601928710938, -0.8728935122489929, -0.864876389503479, -0.8567056059837341, -0.8483778238296509, -0.839889645576477, -0.8312376141548157, -0.8224182724952698, -0.8134282231330872, -0.8042638301849365, -0.7949216961860657, -0.7853981852531433, -0.7756897211074829, -0.7657928466796875, -0.7557039260864258, -0.7454195022583008, -0.734935998916626, -0.7242500185966492, -0.7133581042289734, -0.7022569179534912, -0.6909432411193848, -0.6794137954711914, -0.6676656007766724, -0.6556956171989441, -0.6435011029243469, -0.631079375743866, -0.6184279918670654, -0.6055446863174438, -0.5924273729324341, -0.5790742635726929, -0.5654838681221008, -0.5516549944877625, -0.5375866293907166, -0.5232782959938049, -0.5087298154830933, -0.49394136667251587, -0.4789136052131653, -0.46364760398864746, -0.44814497232437134, -0.43240776658058167, -0.41643860936164856, -0.4002406597137451, -0.3838176131248474, -0.36717382073402405, -0.350314199924469, -0.33324429392814636, -0.3159702718257904, -0.2984989285469055, -0.2808377146720886, -0.2629947364330292, -0.244978666305542, -0.22679884731769562, -0.20846521854400635, -0.18998828530311584, -0.17137911915779114, -0.15264932811260223, -0.13381098210811615, -0.11487660557031631, -0.09585914760828018, -0.07677189260721207, -0.05762842670083046, -0.03844258934259415, -0.01922839879989624, 0.0, 0.018865685909986496, 0.03771795332431793, 0.05654343590140343, 0.07532889395952225, 0.0940612331032753, 0.11272761225700378, 0.1313154399394989, 0.1498124599456787, 0.16820676624774933, 0.18648689985275269, 0.20464180409908295, 0.22266094386577606, 0.240534245967865, 0.25825223326683044, 0.27580589056015015, 0.29318690299987793, 0.31038740277290344, 0.32740020751953125, 0.3442186713218689, 0.36083677411079407, 0.3772490620613098, 0.39345064759254456, 0.4094372093677521, 0.4252050220966339, 0.4407508373260498, 0.45607200264930725, 0.4711662530899048, 0.4860319197177887, 0.5006677508354187, 0.5150728225708008, 0.5292468070983887, 0.5431895852088928, 0.5569015145301819, 0.5703833103179932, 0.5836358070373535, 0.5966603755950928, 0.6094585657119751, 0.6220319867134094, 0.6343828439712524, 0.6465131640434265, 0.6584253907203674, 0.6701220273971558, 0.6816058158874512, 0.6928795576095581, 0.7039461135864258, 0.7148085832595825, 0.7254700064659119, 0.7359336018562317, 0.7462025880813599, 0.7562801837921143, 0.7661697864532471, 0.7758746147155762, 0.7853981852531433, 0.7947436571121216, 0.8039145469665527, 0.8129141330718994, 0.8217458128929138, 0.8304128050804138, 0.8389184474945068, 0.8472660183906555, 0.8554587364196777, 0.8634998202323914, 0.8713924288749695, -0.8791397213935852, -0.8713924288749695, -0.8634998202323914, -0.8554587364196777, -0.8472660183906555, -0.8389184474945068, -0.8304128050804138, -0.8217458128929138, -0.8129141330718994, -0.8039145469665527, -0.7947436571121216, -0.7853981852531433, -0.7758746147155762, -0.7661697864532471, -0.7562801837921143, -0.7462025880813599, -0.7359336018562317, -0.7254700064659119, -0.7148085832595825, -0.7039461135864258, -0.6928795576095581, -0.6816058158874512, -0.6701220273971558, -0.6584253907203674, -0.6465131640434265, -0.6343828439712524, -0.6220319867134094, -0.6094585657119751, -0.5966603755950928, -0.5836358070373535, -0.5703833103179932, -0.5569015145301819, -0.5431895852088928, -0.5292468070983887, -0.5150728225708008, -0.5006677508354187, -0.4860319197177887, -0.4711662530899048, -0.45607200264930725, -0.4407508373260498, -0.4252050220966339, -0.4094372093677521, -0.39345064759254456, -0.3772490620613098, -0.36083677411079407, -0.3442186713218689, -0.32740020751953125, -0.31038740277290344, -0.29318690299987793, -0.27580589056015015, -0.25825223326683044, -0.240534245967865, -0.22266094386577606, -0.20464180409908295, -0.18648689985275269, -0.16820676624774933, -0.1498124599456787, -0.1313154399394989, -0.11272761225700378, -0.0940612331032753, -0.07532889395952225, -0.05654343590140343, -0.03771795332431793, -0.018865685909986496, 0.0, 0.018516402691602707, 0.03702011704444885, 0.055498506873846054, 0.07393904030323029, 0.09232933819293976, 0.1106572225689888, 0.12891076505184174, 0.14707835018634796, 0.16514867544174194, 0.1831108182668686, 0.20095425844192505, 0.21866895258426666, 0.236245259642601, 0.25367408990859985, 0.2709468603134155, 0.2880554497241974, 0.30499234795570374, 0.32175055146217346, 0.3383236229419708, 0.35470566153526306, 0.3708913028240204, 0.386875718832016, 0.40265464782714844, 0.4182243347167969, 0.43358147144317627, 0.44872334599494934, 0.46364760398864746, 0.478352427482605, 0.4928363859653473, 0.5070984959602356, 0.5211381316184998, 0.5349550843238831, 0.5485494136810303, 0.5619215369224548, 0.5750722885131836, 0.588002622127533, 0.6007137894630432, 0.6132073402404785, 0.6254850625991821, 0.6375488042831421, 0.6494007706642151, 0.6610431671142578, 0.6724784970283508, 0.6837093234062195, 0.6947382688522339, 0.7055681943893433, 0.716201901435852, 0.726642370223999, 0.7368925213813782, 0.7469555735588074, 0.7568345069885254, 0.7665324807167053, 0.7760526537895203, 0.7853981852531433, 0.7945722341537476, 0.8035779595375061, 0.8124186396598816, 0.8210972547531128, 0.8296170830726624, 0.8379812240600586, 0.8461927175521851, 0.8542546629905701, 0.8621700406074524, -0.8699418902397156, -0.8621700406074524, -0.8542546629905701, -0.8461927175521851, -0.8379812240600586, -0.8296170830726624, -0.8210972547531128, -0.8124186396598816, -0.8035779595375061, -0.7945722341537476, -0.7853981852531433, -0.7760526537895203, -0.7665324807167053, -0.7568345069885254, -0.7469555735588074, -0.7368925213813782, -0.726642370223999, -0.716201901435852, -0.7055681943893433, -0.6947382688522339, -0.6837093234062195, -0.6724784970283508, -0.6610431671142578, -0.6494007706642151, -0.6375488042831421, -0.6254850625991821, -0.6132073402404785, -0.6007137894630432, -0.588002622127533, -0.5750722885131836, -0.5619215369224548, -0.5485494136810303, -0.5349550843238831, -0.5211381316184998, -0.5070984959602356, -0.4928363859653473, -0.478352427482605, -0.46364760398864746, -0.44872334599494934, -0.43358147144317627, -0.4182243347167969, -0.40265464782714844, -0.386875718832016, -0.3708913028240204, -0.35470566153526306, -0.3383236229419708, -0.32175055146217346, -0.30499234795570374, -0.2880554497241974, -0.2709468603134155, -0.25367408990859985, -0.236245259642601, -0.21866895258426666, -0.20095425844192505, -0.1831108182668686, -0.16514867544174194, -0.14707835018634796, -0.12891076505184174, -0.1106572225689888, -0.09232933819293976, -0.07393904030323029, -0.055498506873846054, -0.03702011704444885, -0.018516402691602707, 0.0, 0.018179815262556076, 0.03634762018918991, 0.05449145659804344, 0.07259945571422577, 0.09065988659858704, 0.1086612194776535, 0.12659212946891785, 0.14444157481193542, 0.16219882667064667, 0.17985349893569946, 0.19739556312561035, 0.2148153930902481, 0.2321038395166397, 0.24925214052200317, 0.2662520408630371, 0.2830957770347595, 0.2997760772705078, 0.3162861168384552, 0.33261969685554504, 0.34877100586891174, 0.36473482847213745, 0.38050636649131775, 0.39608144760131836, 0.41145625710487366, 0.4266274869441986, 0.44159236550331116, 0.4563484787940979, 0.47089385986328125, 0.48522698879241943, 0.4993467330932617, 0.5132522583007812, 0.5269432067871094, 0.5404195189476013, 0.5536813139915466, 0.5667291879653931, 0.5795639753341675, 0.592186689376831, 0.6045985817909241, 0.6168012022972107, 0.6287962794303894, 0.6405856609344482, 0.6521714329719543, 0.6635557413101196, 0.6747409701347351, 0.6857295036315918, 0.6965239644050598, 0.707127034664154, 0.7175413370132446, 0.7277697324752808, 0.7378150820732117, 0.7476801872253418, 0.7573681473731995, 0.7668817639350891, 0.7762241363525391, 0.7853981852531433, 0.7944069504737854, 0.8032534122467041, 0.811940610408783, 0.820471465587616, 0.8288490772247314, 0.8370762467384338, 0.8451560139656067, 0.8530911803245544, -0.8608847260475159, -0.8530911803245544, -0.8451560139656067, -0.8370762467384338, -0.8288490772247314, -0.820471465587616, -0.811940610408783, -0.8032534122467041, -0.7944069504737854, -0.7853981852531433, -0.7762241363525391, -0.7668817639350891, -0.7573681473731995, -0.7476801872253418, -0.7378150820732117, -0.7277697324752808, -0.7175413370132446, -0.707127034664154, -0.6965239644050598, -0.6857295036315918, -0.6747409701347351, -0.6635557413101196, -0.6521714329719543, -0.6405856609344482, -0.6287962794303894, -0.6168012022972107, -0.6045985817909241, -0.592186689376831, -0.5795639753341675, -0.5667291879653931, -0.5536813139915466, -0.5404195189476013, -0.5269432067871094, -0.5132522583007812, -0.4993467330932617, -0.48522698879241943, -0.47089385986328125, -0.4563484787940979, -0.44159236550331116, -0.4266274869441986, -0.41145625710487366, -0.39608144760131836, -0.38050636649131775, -0.36473482847213745, -0.34877100586891174, -0.33261969685554504, -0.3162861168384552, -0.2997760772705078, -0.2830957770347595, -0.2662520408630371, -0.24925214052200317, -0.2321038395166397, -0.2148153930902481, -0.19739556312561035, -0.17985349893569946, -0.16219882667064667, -0.14444157481193542, -0.12659212946891785, -0.1086612194776535, -0.09065988659858704, -0.07259945571422577, -0.05449145659804344, -0.03634762018918991, -0.018179815262556076, 0.0, 0.017855245620012283, 0.035699114203453064, 0.05352026969194412, 0.0713074654340744, 0.08904958516359329, 0.10673566907644272, 0.12435499578714371, 0.141897052526474, 0.159351646900177, 0.1767088621854782, 0.19395914673805237, 0.21109333634376526, 0.22810262441635132, 0.244978666305542, 0.26171350479125977, 0.2782996594905853, 0.2947300970554352, 0.3109982907772064, 0.3270981013774872, 0.3430239260196686, 0.3587706685066223, 0.37433362007141113, 0.38970857858657837, 0.4048917889595032, 0.4198799431324005, 0.43467020988464355, 0.4492601156234741, 0.46364760398864746, 0.47783106565475464, 0.4918091893196106, 0.5055810809135437, 0.5191460847854614, 0.5325040817260742, 0.5456550717353821, 0.5585992932319641, 0.5713374614715576, 0.5838704109191895, 0.5961991548538208, 0.6083250045776367, 0.6202495098114014, 0.6319742202758789, 0.6435011029243469, 0.6548320651054382, 0.6659692525863647, 0.6769148707389832, 0.6876712441444397, 0.6982408761978149, 0.7086262702941895, 0.7188299894332886, 0.7288547158241272, 0.7387031316757202, 0.7483780384063721, 0.7578821778297424, 0.7672183513641357, 0.7763894200325012, 0.7853981852531433, 0.7942475080490112, 0.8029402494430542, 0.8114792108535767, 0.8198672533035278, 0.8281072378158569, 0.8362018465995789, 0.8441540002822876, -0.8519663214683533, -0.8441540002822876, -0.8362018465995789, -0.8281072378158569, -0.8198672533035278, -0.8114792108535767, -0.8029402494430542, -0.7942475080490112, -0.7853981852531433, -0.7763894200325012, -0.7672183513641357, -0.7578821778297424, -0.7483780384063721, -0.7387031316757202, -0.7288547158241272, -0.7188299894332886, -0.7086262702941895, -0.6982408761978149, -0.6876712441444397, -0.6769148707389832, -0.6659692525863647, -0.6548320651054382, -0.6435011029243469, -0.6319742202758789, -0.6202495098114014, -0.6083250045776367, -0.5961991548538208, -0.5838704109191895, -0.5713374614715576, -0.5585992932319641, -0.5456550717353821, -0.5325040817260742, -0.5191460847854614, -0.5055810809135437, -0.4918091893196106, -0.47783106565475464, -0.46364760398864746, -0.4492601156234741, -0.43467020988464355, -0.4198799431324005, -0.4048917889595032, -0.38970857858657837, -0.37433362007141113, -0.3587706685066223, -0.3430239260196686, -0.3270981013774872, -0.3109982907772064, -0.2947300970554352, -0.2782996594905853, -0.26171350479125977, -0.244978666305542, -0.22810262441635132, -0.21109333634376526, -0.19395914673805237, -0.1767088621854782, -0.159351646900177, -0.141897052526474, -0.12435499578714371, -0.10673566907644272, -0.08904958516359329, -0.0713074654340744, -0.05352026969194412, -0.035699114203453064, -0.017855245620012283, 0.0, 0.01754206046462059, 0.035073328763246536, 0.052583061158657074, 0.07006058096885681, 0.0874953418970108, 0.10487693548202515, 0.12219516932964325, 0.13944005966186523, 0.15660187602043152, 0.1736712008714676, 0.19063889980316162, 0.20749622583389282, 0.22423474490642548, 0.2408464550971985, 0.2573237121105194, 0.2736593186855316, 0.2898464798927307, 0.3058788776397705, 0.32175055146217346, 0.337456077337265, 0.35299038887023926, 0.3683489263057709, 0.3835275173187256, 0.39852243661880493, 0.41333040595054626, 0.4279485046863556, 0.44237422943115234, 0.456605464220047, 0.47064051032066345, 0.4844779372215271, 0.49811670184135437, 0.5115561485290527, 0.5247957706451416, 0.5378355383872986, 0.5506755709648132, 0.563316285610199, 0.5757583379745483, 0.588002622127533, 0.6000502109527588, 0.6119024157524109, 0.6235607266426086, 0.635026752948761, 0.6463022232055664, 0.6573891043663025, 0.6682894229888916, 0.6790053248405457, 0.6895390152931213, 0.6998928785324097, 0.7100692987442017, 0.7200707197189331, 0.7298996448516846, 0.739558756351471, 0.7490505576133728, 0.758377730846405, 0.7675428986549377, 0.7765488624572754, 0.7853981852531433, 0.7940936088562012, 0.8026378154754639, 0.8110335469245911, 0.8192834854125977, 0.8273902535438538, 0.8353565335273743, -0.8431850075721741, -0.8353565335273743, -0.8273902535438538, -0.8192834854125977, -0.8110335469245911, -0.8026378154754639, -0.7940936088562012, -0.7853981852531433, -0.7765488624572754, -0.7675428986549377, -0.758377730846405, -0.7490505576133728, -0.739558756351471, -0.7298996448516846, -0.7200707197189331, -0.7100692987442017, -0.6998928785324097, -0.6895390152931213, -0.6790053248405457, -0.6682894229888916, -0.6573891043663025, -0.6463022232055664, -0.635026752948761, -0.6235607266426086, -0.6119024157524109, -0.6000502109527588, -0.588002622127533, -0.5757583379745483, -0.563316285610199, -0.5506755709648132, -0.5378355383872986, -0.5247957706451416, -0.5115561485290527, -0.49811670184135437, -0.4844779372215271, -0.47064051032066345, -0.456605464220047, -0.44237422943115234, -0.4279485046863556, -0.41333040595054626, -0.39852243661880493, -0.3835275173187256, -0.3683489263057709, -0.35299038887023926, -0.337456077337265, -0.32175055146217346, -0.3058788776397705, -0.2898464798927307, -0.2736593186855316, -0.2573237121105194, -0.2408464550971985, -0.22423474490642548, -0.20749622583389282, -0.19063889980316162, -0.1736712008714676, -0.15660187602043152, -0.13944005966186523, -0.12219516932964325, -0.10487693548202515, -0.0874953418970108, -0.07006058096885681, -0.052583061158657074, -0.035073328763246536, -0.01754206046462059, 0.0, 0.01723967120051384, 0.03446910157799721, 0.05167808383703232, 0.06885649263858795, 0.08599428832530975, 0.1030816063284874, 0.12010873854160309, 0.13706617057323456, 0.15394467115402222, 0.1707352101802826, 0.18742911517620087, 0.2040179818868637, 0.22049376368522644, 0.23684875667095184, 0.25307565927505493, 0.2691674828529358, 0.2851177453994751, 0.3009202480316162, 0.3165692389011383, 0.33205947279930115, 0.347385972738266, 0.3625442385673523, 0.37753018736839294, 0.39234015345573425, 0.4069707989692688, 0.4214192032814026, 0.43568286299705505, 0.4497596025466919, 0.46364760398864746, 0.47734537720680237, 0.4908517897129059, 0.5041659474372864, 0.5172873735427856, 0.5302157998085022, 0.5429511666297913, 0.5554937124252319, 0.567844033241272, 0.5800027847290039, 0.5919708609580994, 0.6037493348121643, 0.6153395175933838, 0.6267428994178772, 0.6379609704017639, 0.648995578289032, 0.6598484516143799, 0.6705215573310852, 0.6810169816017151, 0.6913369297981262, 0.7014835476875305, 0.7114591002464294, 0.7212660312652588, 0.7309067249298096, 0.7403835654258728, 0.749699056148529, 0.7588557004928589, 0.7678561210632324, 0.7767027020454407, 0.7853981852531433, 0.7939449548721313, 0.8023456931114197, 0.8106029033660889, 0.8187191486358643, 0.8266969919204712, -0.8345388770103455, -0.8266969919204712, -0.8187191486358643, -0.8106029033660889, -0.8023456931114197, -0.7939449548721313, -0.7853981852531433, -0.7767027020454407, -0.7678561210632324, -0.7588557004928589, -0.749699056148529, -0.7403835654258728, -0.7309067249298096, -0.7212660312652588, -0.7114591002464294, -0.7014835476875305, -0.6913369297981262, -0.6810169816017151, -0.6705215573310852, -0.6598484516143799, -0.648995578289032, -0.6379609704017639, -0.6267428994178772, -0.6153395175933838, -0.6037493348121643, -0.5919708609580994, -0.5800027847290039, -0.567844033241272, -0.5554937124252319, -0.5429511666297913, -0.5302157998085022, -0.5172873735427856, -0.5041659474372864, -0.4908517897129059, -0.47734537720680237, -0.46364760398864746, -0.4497596025466919, -0.43568286299705505, -0.4214192032814026, -0.4069707989692688, -0.39234015345573425, -0.37753018736839294, -0.3625442385673523, -0.347385972738266, -0.33205947279930115, -0.3165692389011383, -0.3009202480316162, -0.2851177453994751, -0.2691674828529358, -0.25307565927505493, -0.23684875667095184, -0.22049376368522644, -0.2040179818868637, -0.18742911517620087, -0.1707352101802826, -0.15394467115402222, -0.13706617057323456, -0.12010873854160309, -0.1030816063284874, -0.08599428832530975, -0.06885649263858795, -0.05167808383703232, -0.03446910157799721, -0.01723967120051384, 0.0, 0.016947530210018158, 0.03388532996177673, 0.05080370232462883, 0.06769302487373352, 0.08454375714063644, 0.10134650021791458, 0.11809203028678894, 0.13477128744125366, 0.1513754427433014, 0.16789592802524567, 0.18432441353797913, 0.20065288245677948, 0.21687361598014832, 0.23297923803329468, 0.24896270036697388, 0.26481732726097107, 0.28053680062294006, 0.2961151599884033, 0.31154683232307434, 0.32682666182518005, 0.34194982051849365, 0.35691192746162415, 0.3717089593410492, 0.3863372206687927, 0.4007934629917145, 0.41507473587989807, 0.42917850613594055, 0.44310256838798523, 0.4568449854850769, 0.4704042673110962, 0.48377910256385803, 0.4969685971736908, 0.5099720358848572, 0.5227890610694885, 0.5354195237159729, 0.5478635430335999, 0.5601213574409485, 0.5721936225891113, 0.5840810537338257, 0.5957845449447632, 0.6073052287101746, 0.6186443567276001, 0.6298033595085144, 0.6407837271690369, 0.651587188243866, 0.662215530872345, 0.6726705431938171, 0.6829543113708496, 0.69306880235672, 0.7030162215232849, 0.7127987146377563, 0.722418487071991, 0.7318779230117798, 0.7411792278289795, 0.7503248453140259, 0.7593171000480652, 0.768158495426178, 0.7768513560295105, 0.7853981852531433, 0.7938013076782227, 0.8020632863044739, 0.8101864457130432, 0.8181732892990112, -0.826026201248169, -0.8181732892990112, -0.8101864457130432, -0.8020632863044739, -0.7938013076782227, -0.7853981852531433, -0.7768513560295105, -0.768158495426178, -0.7593171000480652, -0.7503248453140259, -0.7411792278289795, -0.7318779230117798, -0.722418487071991, -0.7127987146377563, -0.7030162215232849, -0.69306880235672, -0.6829543113708496, -0.6726705431938171, -0.662215530872345, -0.651587188243866, -0.6407837271690369, -0.6298033595085144, -0.6186443567276001, -0.6073052287101746, -0.5957845449447632, -0.5840810537338257, -0.5721936225891113, -0.5601213574409485, -0.5478635430335999, -0.5354195237159729, -0.5227890610694885, -0.5099720358848572, -0.4969685971736908, -0.48377910256385803, -0.4704042673110962, -0.4568449854850769, -0.44310256838798523, -0.42917850613594055, -0.41507473587989807, -0.4007934629917145, -0.3863372206687927, -0.3717089593410492, -0.35691192746162415, -0.34194982051849365, -0.32682666182518005, -0.31154683232307434, -0.2961151599884033, -0.28053680062294006, -0.26481732726097107, -0.24896270036697388, -0.23297923803329468, -0.21687361598014832, -0.20065288245677948, -0.18432441353797913, -0.16789592802524567, -0.1513754427433014, -0.13477128744125366, -0.11809203028678894, -0.10134650021791458, -0.08454375714063644, -0.06769302487373352, -0.05080370232462883, -0.03388532996177673, -0.016947530210018158, 0.0, 0.016665123403072357, 0.03332099691033363, 0.04995839670300484, 0.06656816601753235, 0.08314123004674911, 0.09966865181922913, 0.11614162474870682, 0.13255153596401215, 0.1488899439573288, 0.16514867544174194, 0.18131977319717407, 0.19739556312561035, 0.21336863934993744, 0.22923193871974945, 0.244978666305542, 0.2606023848056793, 0.27609702944755554, 0.29145678877830505, 0.30667632818222046, 0.32175055146217346, 0.3366748094558716, 0.3514447808265686, 0.36605650186538696, 0.38050636649131775, 0.3947911262512207, 0.40890783071517944, 0.42285391688346863, 0.4366271495819092, 0.4502255916595459, 0.46364760398864746, 0.4768918752670288, 0.489957332611084, 0.5028432011604309, 0.5155490040779114, 0.5280744433403015, 0.5404195189476013, 0.5525843501091003, 0.5645694136619568, 0.5763752460479736, 0.588002622127533, 0.5994524955749512, 0.6107259392738342, 0.6218242645263672, 0.6327488422393799, 0.6435011029243469, 0.654082715511322, 0.6644954085350037, 0.6747409701347351, 0.6848212480545044, 0.6947382688522339, 0.704494059085846, 0.7140907049179077, 0.7235302925109863, 0.7328150868415833, 0.7419472932815552, 0.750929057598114, 0.7597627639770508, 0.7684506177902222, 0.7769950032234192, 0.7853981852531433, 0.793662428855896, 0.8017901182174683, 0.8097835779190063, -0.8176450729370117, -0.8097835779190063, -0.8017901182174683, -0.793662428855896, -0.7853981852531433, -0.7769950032234192, -0.7684506177902222, -0.7597627639770508, -0.750929057598114, -0.7419472932815552, -0.7328150868415833, -0.7235302925109863, -0.7140907049179077, -0.704494059085846, -0.6947382688522339, -0.6848212480545044, -0.6747409701347351, -0.6644954085350037, -0.654082715511322, -0.6435011029243469, -0.6327488422393799, -0.6218242645263672, -0.6107259392738342, -0.5994524955749512, -0.588002622127533, -0.5763752460479736, -0.5645694136619568, -0.5525843501091003, -0.5404195189476013, -0.5280744433403015, -0.5155490040779114, -0.5028432011604309, -0.489957332611084, -0.4768918752670288, -0.46364760398864746, -0.4502255916595459, -0.4366271495819092, -0.42285391688346863, -0.40890783071517944, -0.3947911262512207, -0.38050636649131775, -0.36605650186538696, -0.3514447808265686, -0.3366748094558716, -0.32175055146217346, -0.30667632818222046, -0.29145678877830505, -0.27609702944755554, -0.2606023848056793, -0.244978666305542, -0.22923193871974945, -0.21336863934993744, -0.19739556312561035, -0.18131977319717407, -0.16514867544174194, -0.1488899439573288, -0.13255153596401215, -0.11614162474870682, -0.09966865181922913, -0.08314123004674911, -0.06656816601753235, -0.04995839670300484, -0.03332099691033363, -0.016665123403072357, 0.0, 0.016391973942518234, 0.0327751450240612, 0.04914073273539543, 0.06548002362251282, 0.08178438246250153, 0.09804527461528778, 0.11425432562828064, 0.1304033100605011, 0.14648418128490448, 0.162489116191864, 0.17841050028800964, 0.194241002202034, 0.2099735140800476, 0.22560124099254608, 0.2411176711320877, 0.25651660561561584, 0.2717921733856201, 0.28693875670433044, 0.30195116996765137, 0.3168244957923889, 0.3315541744232178, 0.3461359739303589, 0.36056599020957947, 0.37484070658683777, 0.38895687460899353, 0.40291160345077515, 0.4167022705078125, 0.4303266108036041, 0.4437826871871948, 0.4570687711238861, 0.47018346190452576, 0.4831256568431854, 0.49589449167251587, 0.5084893107414246, 0.5209097862243652, 0.5331556797027588, 0.5452271699905396, 0.5571243762969971, 0.5688478350639343, 0.5803982019424438, 0.5917761921882629, 0.602982759475708, 0.6140190362930298, 0.6248862147331238, 0.6355857253074646, 0.6461188793182373, 0.6564874053001404, 0.666692852973938, 0.6767369508743286, 0.6866215467453003, 0.6963486075401306, 0.7059199213981628, 0.7153375744819641, 0.7246035933494568, 0.733720064163208, 0.7426891326904297, 0.7515128254890442, 0.760193407535553, 0.768733024597168, 0.7771338820457458, 0.7853981852531433, 0.7935280799865723, 0.8015257716178894, -0.809393584728241, -0.8015257716178894, -0.7935280799865723, -0.7853981852531433, -0.7771338820457458, -0.768733024597168, -0.760193407535553, -0.7515128254890442, -0.7426891326904297, -0.733720064163208, -0.7246035933494568, -0.7153375744819641, -0.7059199213981628, -0.6963486075401306, -0.6866215467453003, -0.6767369508743286, -0.666692852973938, -0.6564874053001404, -0.6461188793182373, -0.6355857253074646, -0.6248862147331238, -0.6140190362930298, -0.602982759475708, -0.5917761921882629, -0.5803982019424438, -0.5688478350639343, -0.5571243762969971, -0.5452271699905396, -0.5331556797027588, -0.5209097862243652, -0.5084893107414246, -0.49589449167251587, -0.4831256568431854, -0.47018346190452576, -0.4570687711238861, -0.4437826871871948, -0.4303266108036041, -0.4167022705078125, -0.40291160345077515, -0.38895687460899353, -0.37484070658683777, -0.36056599020957947, -0.3461359739303589, -0.3315541744232178, -0.3168244957923889, -0.30195116996765137, -0.28693875670433044, -0.2717921733856201, -0.25651660561561584, -0.2411176711320877, -0.22560124099254608, -0.2099735140800476, -0.194241002202034, -0.17841050028800964, -0.162489116191864, -0.14648418128490448, -0.1304033100605011, -0.11425432562828064, -0.09804527461528778, -0.08178438246250153, -0.06548002362251282, -0.04914073273539543, -0.0327751450240612, -0.016391973942518234, 0.0, 0.016127632930874825, 0.03224688395857811, 0.04834938794374466, 0.06442683935165405, 0.08047100901603699, 0.09647377580404282, 0.11242713034152985, 0.12832322716712952, 0.1441543847322464, 0.15991312265396118, 0.17559216916561127, 0.19118446111679077, 0.2066832184791565, 0.22208189964294434, 0.23737424612045288, 0.2525542676448822, 0.26761630177497864, 0.28255495429039, 0.2973651587963104, 0.31204211711883545, 0.3265814483165741, 0.3409789502620697, 0.3552308678627014, 0.3693336546421051, 0.38328415155410767, 0.3970794379711151, 0.4107169508934021, 0.4241943955421448, 0.43750977516174316, 0.4506613314151764, 0.46364760398864746, 0.47646743059158325, 0.4891197979450226, 0.5016040802001953, 0.5139196515083313, 0.5260664224624634, 0.5380442142486572, 0.5498532056808472, 0.5614936351776123, 0.5729661583900452, 0.584271252155304, 0.5954098701477051, 0.6063829064369202, 0.6171913743019104, 0.6278365850448608, 0.6383197903633118, 0.6486424803733826, 0.6588060259819031, 0.6688121557235718, 0.6786624789237976, 0.6883587837219238, 0.6979027986526489, 0.7072964906692505, 0.7165416479110718, 0.7256403565406799, 0.734594464302063, 0.7434060573577881, 0.7520771622657776, 0.7606098651885986, 0.7690061926841736, 0.7772682905197144, 0.7853981852531433, 0.7933979630470276, -0.8012698292732239, -0.7933979630470276, -0.7853981852531433, -0.7772682905197144, -0.7690061926841736, -0.7606098651885986, -0.7520771622657776, -0.7434060573577881, -0.734594464302063, -0.7256403565406799, -0.7165416479110718, -0.7072964906692505, -0.6979027986526489, -0.6883587837219238, -0.6786624789237976, -0.6688121557235718, -0.6588060259819031, -0.6486424803733826, -0.6383197903633118, -0.6278365850448608, -0.6171913743019104, -0.6063829064369202, -0.5954098701477051, -0.584271252155304, -0.5729661583900452, -0.5614936351776123, -0.5498532056808472, -0.5380442142486572, -0.5260664224624634, -0.5139196515083313, -0.5016040802001953, -0.4891197979450226, -0.47646743059158325, -0.46364760398864746, -0.4506613314151764, -0.43750977516174316, -0.4241943955421448, -0.4107169508934021, -0.3970794379711151, -0.38328415155410767, -0.3693336546421051, -0.3552308678627014, -0.3409789502620697, -0.3265814483165741, -0.31204211711883545, -0.2973651587963104, -0.28255495429039, -0.26761630177497864, -0.2525542676448822, -0.23737424612045288, -0.22208189964294434, -0.2066832184791565, -0.19118446111679077, -0.17559216916561127, -0.15991312265396118, -0.1441543847322464, -0.12832322716712952, -0.11242713034152985, -0.09647377580404282, -0.08047100901603699, -0.06442683935165405, -0.04834938794374466, -0.03224688395857811, -0.016127632930874825, 0.0, 0.0158716831356287, 0.0317353717982769, 0.04758310317993164, 0.06340695172548294, 0.07919906824827194, 0.09495170414447784, 0.1106572225689888, 0.1263081133365631, 0.141897052526474, 0.15741688013076782, 0.17286060750484467, 0.1882214993238449, 0.20349304378032684, 0.21866895258426666, 0.23374317586421967, 0.24870999157428741, 0.263563871383667, 0.2782996594905853, 0.29291239380836487, 0.3073974847793579, 0.32175055146217346, 0.3359676003456116, 0.3500448763370514, 0.36397895216941833, 0.3777666687965393, 0.3914051353931427, 0.4048917889595032, 0.4182243347167969, 0.43140071630477905, 0.4444192051887512, 0.4572782814502716, 0.46997663378715515, 0.48251330852508545, 0.49488744139671326, 0.5070984959602356, 0.5191460847854614, 0.5310301184654236, 0.5427504777908325, 0.5543075203895569, 0.5657014846801758, 0.576932966709137, 0.588002622127533, 0.5989112854003906, 0.6096598505973816, 0.6202495098114014, 0.6306812763214111, 0.6409565806388855, 0.6510767340660095, 0.6610431671142578, 0.6708574891090393, 0.6805212497711182, 0.6900361180305481, 0.6994038820266724, 0.7086262702941895, 0.7177051305770874, 0.726642370223999, 0.7354397773742676, 0.7440993189811707, 0.7526230216026306, 0.7610127329826355, 0.7692705392837524, 0.7773983478546143, 0.7853981852531433, -0.7932720184326172, -0.7853981852531433, -0.7773983478546143, -0.7692705392837524, -0.7610127329826355, -0.7526230216026306, -0.7440993189811707, -0.7354397773742676, -0.726642370223999, -0.7177051305770874, -0.7086262702941895, -0.6994038820266724, -0.6900361180305481, -0.6805212497711182, -0.6708574891090393, -0.6610431671142578, -0.6510767340660095, -0.6409565806388855, -0.6306812763214111, -0.6202495098114014, -0.6096598505973816, -0.5989112854003906, -0.588002622127533, -0.576932966709137, -0.5657014846801758, -0.5543075203895569, -0.5427504777908325, -0.5310301184654236, -0.5191460847854614, -0.5070984959602356, -0.49488744139671326, -0.48251330852508545, -0.46997663378715515, -0.4572782814502716, -0.4444192051887512, -0.43140071630477905, -0.4182243347167969, -0.4048917889595032, -0.3914051353931427, -0.3777666687965393, -0.36397895216941833, -0.3500448763370514, -0.3359676003456116, -0.32175055146217346, -0.3073974847793579, -0.29291239380836487, -0.2782996594905853, -0.263563871383667, -0.24870999157428741, -0.23374317586421967, -0.21866895258426666, -0.20349304378032684, -0.1882214993238449, -0.17286060750484467, -0.15741688013076782, -0.141897052526474, -0.1263081133365631, -0.1106572225689888, -0.09495170414447784, -0.07919906824827194, -0.06340695172548294, -0.04758310317993164, -0.0317353717982769, -0.0158716831356287, 3.1415927410125732, 3.1259689331054688, 3.1103527545928955, 3.0947518348693848, 3.0791738033294678, 3.0636260509490967, 3.0481159687042236, 3.0326507091522217, 3.017237663269043, 3.0018837451934814, 2.986595869064331, 2.9713807106018066, 2.956244707107544, 2.9411940574645996, 2.9262349605560303, 2.9113731384277344, 2.8966140747070312, 2.881963014602661, 2.8674252033233643, 2.8530054092407227, 2.838707685470581, 2.8245368003845215, 2.8104965686798096, 2.796590566635132, 2.7828218936920166, 2.7691941261291504, 2.7557098865509033, 2.7423717975616455, 2.729182243347168, 2.7161431312561035, 2.703256130218506, 2.6905229091644287, 2.677945137023926, 2.6655232906341553, 2.653258800506592, 2.6411519050598145, 2.6292030811309814, 2.61741304397583, 2.605781316757202, 2.594308376312256, 2.582993268966675, 2.571836233139038, 2.5608363151550293, 2.5499930381774902, 2.5393052101135254, 2.5287723541259766, 2.5183932781219482, 2.508166790008545, 2.498091459274292, 2.488166332244873, 2.4783897399902344, 2.4687600135803223, 2.4592761993408203, 2.4499359130859375, 2.4407382011413574, 2.431680917739868, 2.422762632369995, 2.4139814376831055, 2.4053351879119873, 2.396822452545166, 2.388441324234009, 2.380189895629883, 2.3720662593841553, 2.3640682697296143, -2.356194496154785, -2.3640682697296143, -2.3720662593841553, -2.380189895629883, -2.388441324234009, -2.396822452545166, -2.4053351879119873, -2.4139814376831055, -2.422762632369995, -2.431680917739868, -2.4407382011413574, -2.4499359130859375, -2.4592761993408203, -2.4687600135803223, -2.4783897399902344, -2.488166332244873, -2.498091459274292, -2.508166790008545, -2.5183932781219482, -2.5287723541259766, -2.5393052101135254, -2.5499930381774902, -2.5608363151550293, -2.571836233139038, -2.582993268966675, -2.594308376312256, -2.605781316757202, -2.61741304397583, -2.6292030811309814, -2.6411519050598145, -2.653258800506592, -2.6655232906341553, -2.677945137023926, -2.6905229091644287, -2.703256130218506, -2.7161431312561035, -2.729182243347168, -2.7423717975616455, -2.7557098865509033, -2.7691941261291504, -2.7828218936920166, -2.796590566635132, -2.8104965686798096, -2.8245368003845215, -2.838707685470581, -2.8530054092407227, -2.8674252033233643, -2.881963014602661, -2.8966140747070312, -2.9113731384277344, -2.9262349605560303, -2.9411940574645996, -2.956244707107544, -2.9713807106018066, -2.986595869064331, -3.0018837451934814, -3.017237663269043, -3.0326507091522217, -3.0481159687042236, -3.0636260509490967, -3.0791738033294678, -3.0947518348693848, -3.1103527545928955, -3.1259689331054688, 3.1415927410125732, 3.125720977783203, 3.1098573207855225, 3.0940096378326416, 3.078185796737671, 3.0623936653137207, 3.0466408729553223, 3.030935525894165, 3.015284538269043, 2.9996955394744873, 2.984175682067871, 2.9687321186065674, 2.953371047973633, 2.9380996227264404, 2.9229238033294678, 2.9078495502471924, 2.8928825855255127, 2.8780288696289062, 2.863292932510376, 2.848680257797241, 2.834195137023926, 2.8198421001434326, 2.8056249618530273, 2.7915477752685547, 2.777613639831543, 2.7638258934020996, 2.750187635421753, 2.7367007732391357, 2.7233684062957764, 2.7101919651031494, 2.6971733570098877, 2.684314489364624, 2.6716160774230957, 2.6590793132781982, 2.646705150604248, 2.6344940662384033, 2.6224465370178223, 2.610562562942505, 2.598842144012451, 2.587285041809082, 2.5758912563323975, 2.564659595489502, 2.5535900592803955, 2.5426814556121826, 2.531932830810547, 2.521343231201172, 2.510911464691162, 2.500636100769043, 2.490515947341919, 2.4805495738983154, 2.4707350730895996, 2.461071491241455, 2.451556444168091, 2.4421887397766113, 2.432966470718384, 2.4238874912261963, 2.414950370788574, 2.4061529636383057, 2.397493362426758, 2.388969659805298, 2.380579948425293, 2.3723220825195312, 2.364194393157959, 2.356194496154785, -2.348320722579956, -2.356194496154785, -2.364194393157959, -2.3723220825195312, -2.380579948425293, -2.388969659805298, -2.397493362426758, -2.4061529636383057, -2.414950370788574, -2.4238874912261963, -2.432966470718384, -2.4421887397766113, -2.451556444168091, -2.461071491241455, -2.4707350730895996, -2.4805495738983154, -2.490515947341919, -2.500636100769043, -2.510911464691162, -2.521343231201172, -2.531932830810547, -2.5426814556121826, -2.5535900592803955, -2.564659595489502, -2.5758912563323975, -2.587285041809082, -2.598842144012451, -2.610562562942505, -2.6224465370178223, -2.6344940662384033, -2.646705150604248, -2.6590793132781982, -2.6716160774230957, -2.684314489364624, -2.6971733570098877, -2.7101919651031494, -2.7233684062957764, -2.7367007732391357, -2.750187635421753, -2.7638258934020996, -2.777613639831543, -2.7915477752685547, -2.8056249618530273, -2.8198421001434326, -2.834195137023926, -2.848680257797241, -2.863292932510376, -2.8780288696289062, -2.8928825855255127, -2.9078495502471924, -2.9229238033294678, -2.9380996227264404, -2.953371047973633, -2.9687321186065674, -2.984175682067871, -2.9996955394744873, -3.015284538269043, -3.030935525894165, -3.0466408729553223, -3.0623936653137207, -3.078185796737671, -3.0940096378326416, -3.1098573207855225, -3.125720977783203, 3.1415927410125732, 3.125464916229248, 3.1093456745147705, 3.093243360519409, 3.0771658420562744, 3.061121702194214, 3.045118808746338, 3.029165506362915, 3.0132694244384766, 2.9974381923675537, 2.9816794395446777, 2.966000556945801, 2.9504082202911377, 2.9349093437194824, 2.919510841369629, 2.9042184352874756, 2.889038324356079, 2.873976230621338, 2.8590376377105713, 2.8442275524139404, 2.8295505046844482, 2.8150112628936768, 2.8006136417388916, 2.7863616943359375, 2.772258996963501, 2.7583084106445312, 2.7445132732391357, 2.7308757305145264, 2.717398166656494, 2.70408296585083, 2.6909313201904297, 2.677945137023926, 2.6651251316070557, 2.652472734451294, 2.639988660812378, 2.6276729106903076, 2.6155261993408203, 2.603548526763916, 2.5917394161224365, 2.580099105834961, 2.5686264038085938, 2.557321310043335, 2.546182870864868, 2.5352096557617188, 2.5244011878967285, 2.513756036758423, 2.503272771835327, 2.492950201034546, 2.4827866554260254, 2.472780466079712, 2.462930202484131, 2.4532339572906494, 2.4436898231506348, 2.434296131134033, 2.425050973892212, 2.415952205657959, 2.4069981575012207, 2.398186683654785, 2.3895153999328613, 2.3809828758239746, 2.372586488723755, 2.3643243312835693, 2.356194496154785, 2.3481945991516113, -2.340322732925415, -2.3481945991516113, -2.356194496154785, -2.3643243312835693, -2.372586488723755, -2.3809828758239746, -2.3895153999328613, -2.398186683654785, -2.4069981575012207, -2.415952205657959, -2.425050973892212, -2.434296131134033, -2.4436898231506348, -2.4532339572906494, -2.462930202484131, -2.472780466079712, -2.4827866554260254, -2.492950201034546, -2.503272771835327, -2.513756036758423, -2.5244011878967285, -2.5352096557617188, -2.546182870864868, -2.557321310043335, -2.5686264038085938, -2.580099105834961, -2.5917394161224365, -2.603548526763916, -2.6155261993408203, -2.6276729106903076, -2.639988660812378, -2.652472734451294, -2.6651251316070557, -2.677945137023926, -2.6909313201904297, -2.70408296585083, -2.717398166656494, -2.7308757305145264, -2.7445132732391357, -2.7583084106445312, -2.772258996963501, -2.7863616943359375, -2.8006136417388916, -2.8150112628936768, -2.8295505046844482, -2.8442275524139404, -2.8590376377105713, -2.873976230621338, -2.889038324356079, -2.9042184352874756, -2.919510841369629, -2.9349093437194824, -2.9504082202911377, -2.966000556945801, -2.9816794395446777, -2.9974381923675537, -3.0132694244384766, -3.029165506362915, -3.045118808746338, -3.061121702194214, -3.0771658420562744, -3.093243360519409, -3.1093456745147705, -3.125464916229248, 3.1415927410125732, 3.1252007484436035, 3.1088175773620605, 3.092451810836792, 3.076112747192383, 3.0598082542419434, 3.0435473918914795, 3.0273382663726807, 3.0111894607543945, 2.9951083660125732, 2.9791035652160645, 2.963182210922241, 2.9473516941070557, 2.931619167327881, 2.9159913063049316, 2.900475025177002, 2.8850760459899902, 2.869800567626953, 2.854653835296631, 2.839641571044922, 2.82476806640625, 2.8100385665893555, 2.795456647872925, 2.781026601791382, 2.766752004623413, 2.7526357173919678, 2.7386810779571533, 2.7248904705047607, 2.711266040802002, 2.697809934616089, 2.684523820877075, 2.6714091300964355, 2.6584670543670654, 2.645698070526123, 2.633103370666504, 2.620682954788208, 2.6084370613098145, 2.596365451812744, 2.584468364715576, 2.572744846343994, 2.56119441986084, 2.549816370010376, 2.5386099815368652, 2.527573585510254, 2.5167064666748047, 2.506006956100464, 2.495473861694336, 2.485105276107788, 2.4748997688293457, 2.464855670928955, 2.4549710750579834, 2.445244073867798, 2.4356727600097656, 2.426254987716675, 2.4169890880584717, 2.4078726768493652, 2.3989036083221436, 2.3900797367095947, 2.381399154663086, 2.3728597164154053, 2.3644587993621826, 2.356194496154785, 2.348064661026001, 2.340066909790039, -2.3321990966796875, -2.340066909790039, -2.348064661026001, -2.356194496154785, -2.3644587993621826, -2.3728597164154053, -2.381399154663086, -2.3900797367095947, -2.3989036083221436, -2.4078726768493652, -2.4169890880584717, -2.426254987716675, -2.4356727600097656, -2.445244073867798, -2.4549710750579834, -2.464855670928955, -2.4748997688293457, -2.485105276107788, -2.495473861694336, -2.506006956100464, -2.5167064666748047, -2.527573585510254, -2.5386099815368652, -2.549816370010376, -2.56119441986084, -2.572744846343994, -2.584468364715576, -2.596365451812744, -2.6084370613098145, -2.620682954788208, -2.633103370666504, -2.645698070526123, -2.6584670543670654, -2.6714091300964355, -2.684523820877075, -2.697809934616089, -2.711266040802002, -2.7248904705047607, -2.7386810779571533, -2.7526357173919678, -2.766752004623413, -2.781026601791382, -2.795456647872925, -2.8100385665893555, -2.82476806640625, -2.839641571044922, -2.854653835296631, -2.869800567626953, -2.8850760459899902, -2.900475025177002, -2.9159913063049316, -2.931619167327881, -2.9473516941070557, -2.963182210922241, -2.9791035652160645, -2.9951083660125732, -3.0111894607543945, -3.0273382663726807, -3.0435473918914795, -3.0598082542419434, -3.076112747192383, -3.092451810836792, -3.1088175773620605, -3.1252007484436035, 3.1415927410125732, 3.124927520751953, 3.108271598815918, 3.0916342735290527, 3.0750246047973633, 3.0584514141082764, 3.041923999786377, 3.0254509449005127, 3.0090410709381104, 2.9927027225494385, 2.9764440059661865, 2.960272789001465, 2.944197177886963, 2.9282240867614746, 2.912360668182373, 2.8966140747070312, 2.8809902667999268, 2.8654956817626953, 2.8501358032226562, 2.834916353225708, 2.8198421001434326, 2.804917812347412, 2.7901477813720703, 2.775536060333252, 2.7610862255096436, 2.7468016147613525, 2.732684850692749, 2.7187387943267822, 2.704965591430664, 2.6913671493530273, 2.677945137023926, 2.664700746536255, 2.6516354084014893, 2.638749361038208, 2.6260435581207275, 2.613518238067627, 2.601173162460327, 2.589008331298828, 2.5770232677459717, 2.5652174949645996, 2.5535900592803955, 2.542140245437622, 2.5308666229248047, 2.519768476486206, 2.5088438987731934, 2.498091459274292, 2.4875099658966064, 2.477097272872925, 2.4668517112731934, 2.4567713737487793, 2.44685435295105, 2.437098503112793, 2.427501916885376, 2.418062448501587, 2.4087774753570557, 2.3996453285217285, 2.3906636238098145, 2.3818299770355225, 2.3731420040130615, 2.3645975589752197, 2.356194496154785, 2.3479301929473877, 2.3398025035858154, 2.3318090438842773, -2.3239476680755615, -2.3318090438842773, -2.3398025035858154, -2.3479301929473877, -2.356194496154785, -2.3645975589752197, -2.3731420040130615, -2.3818299770355225, -2.3906636238098145, -2.3996453285217285, -2.4087774753570557, -2.418062448501587, -2.427501916885376, -2.437098503112793, -2.44685435295105, -2.4567713737487793, -2.4668517112731934, -2.477097272872925, -2.4875099658966064, -2.498091459274292, -2.5088438987731934, -2.519768476486206, -2.5308666229248047, -2.542140245437622, -2.5535900592803955, -2.5652174949645996, -2.5770232677459717, -2.589008331298828, -2.601173162460327, -2.613518238067627, -2.6260435581207275, -2.638749361038208, -2.6516354084014893, -2.664700746536255, -2.677945137023926, -2.6913671493530273, -2.704965591430664, -2.7187387943267822, -2.732684850692749, -2.7468016147613525, -2.7610862255096436, -2.775536060333252, -2.7901477813720703, -2.804917812347412, -2.8198421001434326, -2.834916353225708, -2.8501358032226562, -2.8654956817626953, -2.8809902667999268, -2.8966140747070312, -2.912360668182373, -2.9282240867614746, -2.944197177886963, -2.960272789001465, -2.9764440059661865, -2.9927027225494385, -3.0090410709381104, -3.0254509449005127, -3.041923999786377, -3.0584514141082764, -3.0750246047973633, -3.0916342735290527, -3.108271598815918, -3.124927520751953, 3.1415927410125732, 3.124645233154297, 3.1077072620391846, 3.0907888412475586, 3.073899745941162, 3.057048797607422, 3.0402462482452393, 3.023500680923462, 3.006821393966675, 2.9902172088623047, 2.973696708679199, 2.957268238067627, 2.9409396648406982, 2.9247190952301025, 2.908613443374634, 2.892629861831665, 2.8767752647399902, 2.861055850982666, 2.84547758102417, 2.8300459384918213, 2.8147659301757812, 2.79964280128479, 2.7846806049346924, 2.769883632659912, 2.7552554607391357, 2.7407991886138916, 2.726517915725708, 2.712414264678955, 2.6984901428222656, 2.6847476959228516, 2.6711883544921875, 2.657813549041748, 2.6446239948272705, 2.6316206455230713, 2.6188035011291504, 2.606173038482666, 2.593729019165039, 2.5814712047576904, 2.569399118423462, 2.557511568069458, 2.5458080768585205, 2.534287452697754, 2.5229482650756836, 2.511789321899414, 2.5008089542388916, 2.4900054931640625, 2.479377269744873, 2.4689221382141113, 2.4586384296417236, 2.448523759841919, 2.4385764598846436, 2.4287939071655273, 2.4191741943359375, 2.409714698791504, 2.4004135131835938, 2.391267776489258, 2.3822755813598633, 2.373434066772461, 2.364741325378418, 2.356194496154785, 2.3477914333343506, 2.339529275894165, 2.3314061164855957, 2.3234193325042725, -2.3155665397644043, -2.3234193325042725, -2.3314061164855957, -2.339529275894165, -2.3477914333343506, -2.356194496154785, -2.364741325378418, -2.373434066772461, -2.3822755813598633, -2.391267776489258, -2.4004135131835938, -2.409714698791504, -2.4191741943359375, -2.4287939071655273, -2.4385764598846436, -2.448523759841919, -2.4586384296417236, -2.4689221382141113, -2.479377269744873, -2.4900054931640625, -2.5008089542388916, -2.511789321899414, -2.5229482650756836, -2.534287452697754, -2.5458080768585205, -2.557511568069458, -2.569399118423462, -2.5814712047576904, -2.593729019165039, -2.606173038482666, -2.6188035011291504, -2.6316206455230713, -2.6446239948272705, -2.657813549041748, -2.6711883544921875, -2.6847476959228516, -2.6984901428222656, -2.712414264678955, -2.726517915725708, -2.7407991886138916, -2.7552554607391357, -2.769883632659912, -2.7846806049346924, -2.79964280128479, -2.8147659301757812, -2.8300459384918213, -2.84547758102417, -2.861055850982666, -2.8767752647399902, -2.892629861831665, -2.908613443374634, -2.9247190952301025, -2.9409396648406982, -2.957268238067627, -2.973696708679199, -2.9902172088623047, -3.006821393966675, -3.023500680923462, -3.0402462482452393, -3.057048797607422, -3.073899745941162, -3.0907888412475586, -3.1077072620391846, -3.124645233154297, 3.1415927410125732, 3.1243529319763184, 3.107123613357544, 3.089914560317993, 3.0727362632751465, 3.055598258972168, 3.038511037826538, 3.021483898162842, 3.004526376724243, 2.9876480102539062, 2.9708573818206787, 2.9541635513305664, 2.937574625015259, 2.9210989475250244, 2.9047439098358154, 2.888516902923584, 2.872425079345703, 2.8564748764038086, 2.840672492980957, 2.8250234127044678, 2.80953311920166, 2.7942066192626953, 2.779048442840576, 2.7640624046325684, 2.7492525577545166, 2.73462176322937, 2.7201733589172363, 2.7059097290039062, 2.691833019256592, 2.677945137023926, 2.6642472743988037, 2.6507408618927, 2.6374266147613525, 2.624305248260498, 2.6113767623901367, 2.5986413955688477, 2.5860989093780518, 2.5737485885620117, 2.5615899562835693, 2.549621820449829, 2.5378432273864746, 2.5262532234191895, 2.5148496627807617, 2.503631591796875, 2.4925971031188965, 2.4817442893981934, 2.4710710048675537, 2.460575580596924, 2.4502556324005127, 2.4401090145111084, 2.430133581161499, 2.4203267097473145, 2.4106860160827637, 2.4012091159820557, 2.3918936252593994, 2.382736921310425, 2.373736619949341, 2.3648898601531982, 2.356194496154785, 2.3476476669311523, 2.339246988296509, 2.3309898376464844, 2.322873592376709, 2.3148956298828125, -2.307053804397583, -2.3148956298828125, -2.322873592376709, -2.3309898376464844, -2.339246988296509, -2.3476476669311523, -2.356194496154785, -2.3648898601531982, -2.373736619949341, -2.382736921310425, -2.3918936252593994, -2.4012091159820557, -2.4106860160827637, -2.4203267097473145, -2.430133581161499, -2.4401090145111084, -2.4502556324005127, -2.460575580596924, -2.4710710048675537, -2.4817442893981934, -2.4925971031188965, -2.503631591796875, -2.5148496627807617, -2.5262532234191895, -2.5378432273864746, -2.549621820449829, -2.5615899562835693, -2.5737485885620117, -2.5860989093780518, -2.5986413955688477, -2.6113767623901367, -2.624305248260498, -2.6374266147613525, -2.6507408618927, -2.6642472743988037, -2.677945137023926, -2.691833019256592, -2.7059097290039062, -2.7201733589172363, -2.73462176322937, -2.7492525577545166, -2.7640624046325684, -2.779048442840576, -2.7942066192626953, -2.80953311920166, -2.8250234127044678, -2.840672492980957, -2.8564748764038086, -2.872425079345703, -2.888516902923584, -2.9047439098358154, -2.9210989475250244, -2.937574625015259, -2.9541635513305664, -2.9708573818206787, -2.9876480102539062, -3.004526376724243, -3.021483898162842, -3.038511037826538, -3.055598258972168, -3.0727362632751465, -3.089914560317993, -3.107123613357544, -3.1243529319763184, 3.1415927410125732, 3.1240506172180176, 3.1065192222595215, 3.0890095233917236, 3.0715320110321045, 3.0540974140167236, 3.0367157459259033, 3.019397497177124, 3.002152681350708, 2.9849908351898193, 2.967921495437622, 2.950953722000122, 2.934096336364746, 2.917357921600342, 2.9007461071014404, 2.8842689990997314, 2.8679332733154297, 2.851746082305908, 2.8357138633728027, 2.8198421001434326, 2.8041365146636963, 2.788602352142334, 2.7732436656951904, 2.7580652236938477, 2.743070125579834, 2.728262186050415, 2.71364426612854, 2.699218511581421, 2.6849870681762695, 2.670952081680298, 2.6571147441864014, 2.6434760093688965, 2.6300365924835205, 2.6167969703674316, 2.60375714302063, 2.5909171104431152, 2.5782763957977295, 2.5658342838287354, 2.5535900592803955, 2.5415425300598145, 2.5296902656555176, 2.5180318355560303, 2.506565809249878, 2.495290517807007, 2.484203577041626, 2.4733033180236816, 2.462587356567383, 2.4520535469055176, 2.441699743270874, 2.431523323059082, 2.4215219020843506, 2.4116930961608887, 2.402033805847168, 2.3925421237945557, 2.3832149505615234, 2.374049663543701, 2.365043878555298, 2.356194496154785, 2.347499132156372, 2.3389549255371094, 2.330559015274048, 2.3223092555999756, 2.314202308654785, 2.3062360286712646, -2.298407554626465, -2.3062360286712646, -2.314202308654785, -2.3223092555999756, -2.330559015274048, -2.3389549255371094, -2.347499132156372, -2.356194496154785, -2.365043878555298, -2.374049663543701, -2.3832149505615234, -2.3925421237945557, -2.402033805847168, -2.4116930961608887, -2.4215219020843506, -2.431523323059082, -2.441699743270874, -2.4520535469055176, -2.462587356567383, -2.4733033180236816, -2.484203577041626, -2.495290517807007, -2.506565809249878, -2.5180318355560303, -2.5296902656555176, -2.5415425300598145, -2.5535900592803955, -2.5658342838287354, -2.5782763957977295, -2.5909171104431152, -2.60375714302063, -2.6167969703674316, -2.6300365924835205, -2.6434760093688965, -2.6571147441864014, -2.670952081680298, -2.6849870681762695, -2.699218511581421, -2.71364426612854, -2.728262186050415, -2.743070125579834, -2.7580652236938477, -2.7732436656951904, -2.788602352142334, -2.8041365146636963, -2.8198421001434326, -2.8357138633728027, -2.851746082305908, -2.8679332733154297, -2.8842689990997314, -2.9007461071014404, -2.917357921600342, -2.934096336364746, -2.950953722000122, -2.967921495437622, -2.9849908351898193, -3.002152681350708, -3.019397497177124, -3.0367157459259033, -3.0540974140167236, -3.0715320110321045, -3.0890095233917236, -3.1065192222595215, -3.1240506172180176, 3.1415927410125732, 3.123737335205078, 3.105893611907959, 3.0880722999572754, 3.0702850818634033, 3.0525431632995605, 3.0348570346832275, 3.017237663269043, 2.9996955394744873, 2.982240915298462, 2.964883804321289, 2.9476335048675537, 2.930499315261841, 2.913490056991577, 2.8966140747070312, 2.8798792362213135, 2.863292932510376, 2.846862554550171, 2.830594301223755, 2.8144946098327637, 2.7985687255859375, 2.7828218936920166, 2.767259120941162, 2.7518839836120605, 2.7367007732391357, 2.721712589263916, 2.7069225311279297, 2.6923325061798096, 2.677945137023926, 2.663761615753174, 2.6497833728790283, 2.6360116004943848, 2.6224465370178223, 2.609088659286499, 2.595937490463257, 2.582993268966675, 2.5702552795410156, 2.557722330093384, 2.545393466949463, 2.5332677364349365, 2.521343231201172, 2.5096185207366943, 2.498091459274292, 2.4867606163024902, 2.475623369216919, 2.4646778106689453, 2.453921318054199, 2.4433517456054688, 2.432966470718384, 2.422762632369995, 2.4127378463745117, 2.4028894901275635, 2.393214702606201, 2.3837103843688965, 2.3743743896484375, 2.3652031421661377, 2.356194496154785, 2.3473451137542725, 2.3386523723602295, 2.330113410949707, 2.321725368499756, 2.3134853839874268, 2.3053908348083496, 2.297438621520996, -2.289626359939575, -2.297438621520996, -2.3053908348083496, -2.3134853839874268, -2.321725368499756, -2.330113410949707, -2.3386523723602295, -2.3473451137542725, -2.356194496154785, -2.3652031421661377, -2.3743743896484375, -2.3837103843688965, -2.393214702606201, -2.4028894901275635, -2.4127378463745117, -2.422762632369995, -2.432966470718384, -2.4433517456054688, -2.453921318054199, -2.4646778106689453, -2.475623369216919, -2.4867606163024902, -2.498091459274292, -2.5096185207366943, -2.521343231201172, -2.5332677364349365, -2.545393466949463, -2.557722330093384, -2.5702552795410156, -2.582993268966675, -2.595937490463257, -2.609088659286499, -2.6224465370178223, -2.6360116004943848, -2.6497833728790283, -2.663761615753174, -2.677945137023926, -2.6923325061798096, -2.7069225311279297, -2.721712589263916, -2.7367007732391357, -2.7518839836120605, -2.767259120941162, -2.7828218936920166, -2.7985687255859375, -2.8144946098327637, -2.830594301223755, -2.846862554550171, -2.863292932510376, -2.8798792362213135, -2.8966140747070312, -2.913490056991577, -2.930499315261841, -2.9476335048675537, -2.964883804321289, -2.982240915298462, -2.9996955394744873, -3.017237663269043, -3.0348570346832275, -3.0525431632995605, -3.0702850818634033, -3.0880722999572754, -3.105893611907959, -3.123737335205078, 3.1415927410125732, 3.123412847518921, 3.1052451133728027, 3.0871012210845947, 3.068993091583252, 3.0509328842163086, 3.032931327819824, 3.015000581741333, 2.9971511363983154, 2.979393720626831, 2.9617390632629395, 2.944197177886963, 2.9267773628234863, 2.9094889163970947, 2.8923404216766357, 2.875340700149536, 2.858496904373169, 2.8418166637420654, 2.8253064155578613, 2.8089730739593506, 2.7928216457366943, 2.776857852935791, 2.7610862255096436, 2.745511293411255, 2.7301363945007324, 2.7149651050567627, 2.700000286102295, 2.685244083404541, 2.670698881149292, 2.6563656330108643, 2.6422460079193115, 2.628340482711792, 2.614649534225464, 2.601173162460327, 2.587911367416382, 2.5748634338378906, 2.562028646469116, 2.549406051635742, 2.536993980407715, 2.5247914791107178, 2.512796401977539, 2.501007080078125, 2.4894211292266846, 2.478036880493164, 2.4668517112731934, 2.4558632373809814, 2.445068597793579, 2.4344656467437744, 2.424051284790039, 2.413822889328003, 2.403777599334717, 2.3939125537872314, 2.3842244148254395, 2.37471079826355, 2.365368604660034, 2.356194496154785, 2.3471856117248535, 2.338339328765869, 2.3296520709991455, 2.3211212158203125, 2.312743663787842, 2.304516315460205, 2.2964365482330322, 2.288501501083374, -2.280707836151123, -2.288501501083374, -2.2964365482330322, -2.304516315460205, -2.312743663787842, -2.3211212158203125, -2.3296520709991455, -2.338339328765869, -2.3471856117248535, -2.356194496154785, -2.365368604660034, -2.37471079826355, -2.3842244148254395, -2.3939125537872314, -2.403777599334717, -2.413822889328003, -2.424051284790039, -2.4344656467437744, -2.445068597793579, -2.4558632373809814, -2.4668517112731934, -2.478036880493164, -2.4894211292266846, -2.501007080078125, -2.512796401977539, -2.5247914791107178, -2.536993980407715, -2.549406051635742, -2.562028646469116, -2.5748634338378906, -2.587911367416382, -2.601173162460327, -2.614649534225464, -2.628340482711792, -2.6422460079193115, -2.6563656330108643, -2.670698881149292, -2.685244083404541, -2.700000286102295, -2.7149651050567627, -2.7301363945007324, -2.745511293411255, -2.7610862255096436, -2.776857852935791, -2.7928216457366943, -2.8089730739593506, -2.8253064155578613, -2.8418166637420654, -2.858496904373169, -2.875340700149536, -2.8923404216766357, -2.9094889163970947, -2.9267773628234863, -2.944197177886963, -2.9617390632629395, -2.979393720626831, -2.9971511363983154, -3.015000581741333, -3.032931327819824, -3.0509328842163086, -3.068993091583252, -3.0871012210845947, -3.1052451133728027, -3.123412847518921, 3.1415927410125732, 3.1230762004852295, 3.1045725345611572, 3.0860941410064697, 3.0676536560058594, 3.0492632389068604, 3.030935525894165, 3.0126819610595703, 2.994514226913452, 2.9764440059661865, 2.958481788635254, 2.940638303756714, 2.9229238033294678, 2.9053473472595215, 2.887918472290039, 2.870645761489868, 2.8535373210906982, 2.8366003036499023, 2.8198421001434326, 2.803269147872925, 2.7868869304656982, 2.7707014083862305, 2.7547168731689453, 2.738938093185425, 2.7233684062957764, 2.7080111503601074, 2.6928694248199463, 2.677945137023926, 2.6632401943206787, 2.648756265640259, 2.6344940662384033, 2.6204545497894287, 2.606637477874756, 2.593043327331543, 2.5796711444854736, 2.5665204524993896, 2.5535900592803955, 2.5408787727355957, 2.5283854007720947, 2.5161075592041016, 2.5040438175201416, 2.492191791534424, 2.4805495738983154, 2.469114065170288, 2.457883358001709, 2.44685435295105, 2.4360244274139404, 2.4253907203674316, 2.414950370788574, 2.4047000408172607, 2.394637107849121, 2.384758234024048, 2.3750600814819336, 2.365540027618408, 2.356194496154785, 2.347020387649536, 2.338014602661133, 2.329174041748047, 2.320495367050171, 2.3119754791259766, 2.3036115169525146, 2.2953999042510986, 2.2873380184173584, 2.2794225215911865, -2.271650791168213, -2.2794225215911865, -2.2873380184173584, -2.2953999042510986, -2.3036115169525146, -2.3119754791259766, -2.320495367050171, -2.329174041748047, -2.338014602661133, -2.347020387649536, -2.356194496154785, -2.365540027618408, -2.3750600814819336, -2.384758234024048, -2.394637107849121, -2.4047000408172607, -2.414950370788574, -2.4253907203674316, -2.4360244274139404, -2.44685435295105, -2.457883358001709, -2.469114065170288, -2.4805495738983154, -2.492191791534424, -2.5040438175201416, -2.5161075592041016, -2.5283854007720947, -2.5408787727355957, -2.5535900592803955, -2.5665204524993896, -2.5796711444854736, -2.593043327331543, -2.606637477874756, -2.6204545497894287, -2.6344940662384033, -2.648756265640259, -2.6632401943206787, -2.677945137023926, -2.6928694248199463, -2.7080111503601074, -2.7233684062957764, -2.738938093185425, -2.7547168731689453, -2.7707014083862305, -2.7868869304656982, -2.803269147872925, -2.8198421001434326, -2.8366003036499023, -2.8535373210906982, -2.870645761489868, -2.887918472290039, -2.9053473472595215, -2.9229238033294678, -2.940638303756714, -2.958481788635254, -2.9764440059661865, -2.994514226913452, -3.0126819610595703, -3.030935525894165, -3.0492632389068604, -3.0676536560058594, -3.0860941410064697, -3.1045725345611572, -3.1230762004852295, 3.1415927410125732, 3.1227269172668457, 3.103874683380127, 3.0850491523742676, 3.0662636756896973, 3.0475313663482666, 3.028865098953247, 3.010277271270752, 2.9917802810668945, 2.973385810852051, 2.955105781555176, 2.936950922012329, 2.918931722640991, 2.9010584354400635, 2.883340358734131, 2.8657867908477783, 2.8484058380126953, 2.831205129623413, 2.814192533493042, 2.7973740100860596, 2.7807557582855225, 2.764343500137329, 2.7481420040130615, 2.7321555614471436, 2.7163877487182617, 2.7008419036865234, 2.685520648956299, 2.670426368713379, 2.6555607318878174, 2.6409249305725098, 2.6265199184417725, 2.6123459339141846, 2.598402976989746, 2.584691047668457, 2.57120943069458, 2.5579569339752197, 2.5449323654174805, 2.5321340560913086, 2.5195605754852295, 2.5072097778320312, 2.495079517364502, 2.4831671714782715, 2.471470594406128, 2.459986925125122, 2.4487130641937256, 2.4376466274261475, 2.426784038543701, 2.4161226749420166, 2.4056589603424072, 2.395390033721924, 2.385312557220459, 2.375422954559326, 2.365718126296997, 2.356194496154785, 2.346848964691162, 2.3376781940460205, 2.328678607940674, 2.3198468685150146, 2.3111798763275146, 2.3026742935180664, 2.2943265438079834, 2.2861340045928955, 2.278092861175537, 2.270200252532959, -2.2624528408050537, -2.270200252532959, -2.278092861175537, -2.2861340045928955, -2.2943265438079834, -2.3026742935180664, -2.3111798763275146, -2.3198468685150146, -2.328678607940674, -2.3376781940460205, -2.346848964691162, -2.356194496154785, -2.365718126296997, -2.375422954559326, -2.385312557220459, -2.395390033721924, -2.4056589603424072, -2.4161226749420166, -2.426784038543701, -2.4376466274261475, -2.4487130641937256, -2.459986925125122, -2.471470594406128, -2.4831671714782715, -2.495079517364502, -2.5072097778320312, -2.5195605754852295, -2.5321340560913086, -2.5449323654174805, -2.5579569339752197, -2.57120943069458, -2.584691047668457, -2.598402976989746, -2.6123459339141846, -2.6265199184417725, -2.6409249305725098, -2.6555607318878174, -2.670426368713379, -2.685520648956299, -2.7008419036865234, -2.7163877487182617, -2.7321555614471436, -2.7481420040130615, -2.764343500137329, -2.7807557582855225, -2.7973740100860596, -2.814192533493042, -2.831205129623413, -2.8484058380126953, -2.8657867908477783, -2.883340358734131, -2.9010584354400635, -2.918931722640991, -2.936950922012329, -2.955105781555176, -2.973385810852051, -2.9917802810668945, -3.010277271270752, -3.028865098953247, -3.0475313663482666, -3.0662636756896973, -3.0850491523742676, -3.103874683380127, -3.1227269172668457, 3.1415927410125732, 3.1223642826080322, 3.1031501293182373, 3.0839641094207764, 3.0648207664489746, 3.0457334518432617, 3.0267159938812256, 3.007781744003296, 2.988943338394165, 2.9702134132385254, 2.9516043663024902, 2.9331274032592773, 2.9147937297821045, 2.8966140747070312, 2.8785979747772217, 2.86075496673584, 2.8430936336517334, 2.825622320175171, 2.8083484172821045, 2.79127836227417, 2.774418830871582, 2.757775068283081, 2.741352081298828, 2.725153923034668, 2.7091848850250244, 2.6934475898742676, 2.677945137023926, 2.6626789569854736, 2.647651195526123, 2.6328628063201904, 2.618314266204834, 2.604006052017212, 2.589937686920166, 2.576108694076538, 2.562518358230591, 2.5491652488708496, 2.53604793548584, 2.523164749145508, 2.5105133056640625, 2.498091459274292, 2.4858970642089844, 2.4739270210266113, 2.462178945541382, 2.4506494998931885, 2.439335823059082, 2.428234577178955, 2.4173426628112793, 2.4066567420959473, 2.3961732387542725, 2.3858888149261475, 2.3757998943328857, 2.365902900695801, 2.356194496154785, 2.3466708660125732, 2.3373289108276367, 2.3281643390655518, 2.319174289703369, 2.3103549480438232, 2.3017029762268066, 2.293214797973633, 2.2848870754241943, 2.2767162322998047, 2.2686991691589355, 2.2608325481414795, -2.25311279296875, -2.2608325481414795, -2.2686991691589355, -2.2767162322998047, -2.2848870754241943, -2.293214797973633, -2.3017029762268066, -2.3103549480438232, -2.319174289703369, -2.3281643390655518, -2.3373289108276367, -2.3466708660125732, -2.356194496154785, -2.365902900695801, -2.3757998943328857, -2.3858888149261475, -2.3961732387542725, -2.4066567420959473, -2.4173426628112793, -2.428234577178955, -2.439335823059082, -2.4506494998931885, -2.462178945541382, -2.4739270210266113, -2.4858970642089844, -2.498091459274292, -2.5105133056640625, -2.523164749145508, -2.53604793548584, -2.5491652488708496, -2.562518358230591, -2.576108694076538, -2.589937686920166, -2.604006052017212, -2.618314266204834, -2.6328628063201904, -2.647651195526123, -2.6626789569854736, -2.677945137023926, -2.6934475898742676, -2.7091848850250244, -2.725153923034668, -2.741352081298828, -2.757775068283081, -2.774418830871582, -2.79127836227417, -2.8083484172821045, -2.825622320175171, -2.8430936336517334, -2.86075496673584, -2.8785979747772217, -2.8966140747070312, -2.9147937297821045, -2.9331274032592773, -2.9516043663024902, -2.9702134132385254, -2.988943338394165, -3.007781744003296, -3.0267159938812256, -3.0457334518432617, -3.0648207664489746, -3.0839641094207764, -3.1031501293182373, -3.1223642826080322, 3.1415927410125732, 3.1219873428344727, 3.1023969650268555, 3.082836866378784, 3.063321590423584, 3.04386568069458, 3.0244839191436768, 3.005190134048462, 2.9859979152679443, 2.9669203758239746, 2.9479706287384033, 2.9291605949401855, 2.9105019569396973, 2.892005681991577, 2.8736822605133057, 2.855541229248047, 2.8375916481018066, 2.8198421001434326, 2.802299976348877, 2.7849724292755127, 2.7678658962249756, 2.750985622406006, 2.7343368530273438, 2.717923641204834, 2.7017500400543213, 2.685818910598755, 2.670132637023926, 2.654693365097046, 2.63950252532959, 2.624560594558716, 2.6098685264587402, 2.595426082611084, 2.581232786178589, 2.5672879219055176, 2.5535900592803955, 2.540138006210327, 2.5269296169281006, 2.513963222503662, 2.5012362003326416, 2.488745927810669, 2.476490020751953, 2.4644651412963867, 2.4526681900024414, 2.441096305847168, 2.429745674133301, 2.4186131954193115, 2.4076952934265137, 2.3969881534576416, 2.386488199234009, 2.3761918544769287, 2.3660950660705566, 2.356194496154785, 2.3464860916137695, 2.336966037750244, 2.3276307582855225, 2.318476438522339, 2.309499502182007, 2.3006958961486816, 2.292062282562256, 2.283595085144043, 2.2752904891967773, 2.2671449184417725, 2.259155035018921, 2.2513175010681152, -2.243628978729248, -2.2513175010681152, -2.259155035018921, -2.2671449184417725, -2.2752904891967773, -2.283595085144043, -2.292062282562256, -2.3006958961486816, -2.309499502182007, -2.318476438522339, -2.3276307582855225, -2.336966037750244, -2.3464860916137695, -2.356194496154785, -2.3660950660705566, -2.3761918544769287, -2.386488199234009, -2.3969881534576416, -2.4076952934265137, -2.4186131954193115, -2.429745674133301, -2.441096305847168, -2.4526681900024414, -2.4644651412963867, -2.476490020751953, -2.488745927810669, -2.5012362003326416, -2.513963222503662, -2.5269296169281006, -2.540138006210327, -2.5535900592803955, -2.5672879219055176, -2.581232786178589, -2.595426082611084, -2.6098685264587402, -2.624560594558716, -2.63950252532959, -2.654693365097046, -2.670132637023926, -2.685818910598755, -2.7017500400543213, -2.717923641204834, -2.7343368530273438, -2.750985622406006, -2.7678658962249756, -2.7849724292755127, -2.802299976348877, -2.8198421001434326, -2.8375916481018066, -2.855541229248047, -2.8736822605133057, -2.892005681991577, -2.9105019569396973, -2.9291605949401855, -2.9479706287384033, -2.9669203758239746, -2.9859979152679443, -3.005190134048462, -3.0244839191436768, -3.04386568069458, -3.063321590423584, -3.082836866378784, -3.1023969650268555, -3.1219873428344727, 3.1415927410125732, 3.1215953826904297, 3.101613998413086, 3.081664562225342, 3.061762571334839, 3.041923999786377, 3.0221636295318604, 3.0024967193603516, 2.9829373359680176, 2.9634997844696045, 2.944197177886963, 2.9250423908233643, 2.9060475826263428, 2.8872246742248535, 2.868583917617798, 2.8501358032226562, 2.8318896293640137, 2.813854217529297, 2.796036958694458, 2.7784457206726074, 2.7610862255096436, 2.743964672088623, 2.727085828781128, 2.710453987121582, 2.694072723388672, 2.677945137023926, 2.6620733737945557, 2.6464593410491943, 2.6311042308807373, 2.616008758544922, 2.601173162460327, 2.586596965789795, 2.572279453277588, 2.5582196712493896, 2.5444159507751465, 2.5308666229248047, 2.5175695419311523, 2.5045223236083984, 2.4917221069335938, 2.479166269302368, 2.4668517112731934, 2.454775094985962, 2.4429328441619873, 2.431321620941162, 2.4199378490448, 2.4087774753570557, 2.3978371620178223, 2.3871123790740967, 2.3765997886657715, 2.366295099258423, 2.356194496154785, 2.3462939262390137, 2.3365890979766846, 2.3270764350891113, 2.317751884460449, 2.3086113929748535, 2.2996511459350586, 2.2908670902252197, 2.2822554111480713, 2.2738125324249268, 2.2655346393585205, 2.257417917251587, 2.2494587898254395, 2.2416536808013916, -2.233999252319336, -2.2416536808013916, -2.2494587898254395, -2.257417917251587, -2.2655346393585205, -2.2738125324249268, -2.2822554111480713, -2.2908670902252197, -2.2996511459350586, -2.3086113929748535, -2.317751884460449, -2.3270764350891113, -2.3365890979766846, -2.3462939262390137, -2.356194496154785, -2.366295099258423, -2.3765997886657715, -2.3871123790740967, -2.3978371620178223, -2.4087774753570557, -2.4199378490448, -2.431321620941162, -2.4429328441619873, -2.454775094985962, -2.4668517112731934, -2.479166269302368, -2.4917221069335938, -2.5045223236083984, -2.5175695419311523, -2.5308666229248047, -2.5444159507751465, -2.5582196712493896, -2.572279453277588, -2.586596965789795, -2.601173162460327, -2.616008758544922, -2.6311042308807373, -2.6464593410491943, -2.6620733737945557, -2.677945137023926, -2.694072723388672, -2.710453987121582, -2.727085828781128, -2.743964672088623, -2.7610862255096436, -2.7784457206726074, -2.796036958694458, -2.813854217529297, -2.8318896293640137, -2.8501358032226562, -2.868583917617798, -2.8872246742248535, -2.9060475826263428, -2.9250423908233643, -2.944197177886963, -2.9634997844696045, -2.9829373359680176, -3.0024967193603516, -3.0221636295318604, -3.041923999786377, -3.061762571334839, -3.081664562225342, -3.101613998413086, -3.1215953826904297, 3.1415927410125732, 3.121187210083008, 3.100799083709717, 3.080444574356079, 3.060140609741211, 3.0399038791656494, 3.0197501182556152, 2.9996955394744873, 2.979755163192749, 2.9599437713623047, 2.9402754306793213, 2.9207639694213867, 2.901421546936035, 2.882260799407959, 2.863292932510376, 2.8445284366607666, 2.825977087020874, 2.807647466659546, 2.789548397064209, 2.771686553955078, 2.7540688514709473, 2.7367007732391357, 2.719587564468384, 2.702733278274536, 2.6861414909362793, 2.6698150634765625, 2.6537561416625977, 2.6379663944244385, 2.6224465370178223, 2.6071972846984863, 2.5922181606292725, 2.5775089263916016, 2.563068389892578, 2.5488953590393066, 2.534987449645996, 2.521343231201172, 2.5079596042633057, 2.4948341846466064, 2.481963872909546, 2.4693455696105957, 2.4569754600524902, 2.444850444793701, 2.432966470718384, 2.4213197231292725, 2.4099061489105225, 2.398721933364868, 2.387763023376465, 2.3770248889923096, 2.3665034770965576, 2.356194496154785, 2.3460938930511475, 2.3361971378326416, 2.326500177383423, 2.3169989585876465, 2.3076889514923096, 2.2985661029815674, 2.289626359939575, 2.2808656692504883, 2.272279977798462, 2.2638652324676514, 2.255617618560791, 2.2475333213806152, 2.2396085262298584, 2.231839418411255, -2.2242226600646973, -2.231839418411255, -2.2396085262298584, -2.2475333213806152, -2.255617618560791, -2.2638652324676514, -2.272279977798462, -2.2808656692504883, -2.289626359939575, -2.2985661029815674, -2.3076889514923096, -2.3169989585876465, -2.326500177383423, -2.3361971378326416, -2.3460938930511475, -2.356194496154785, -2.3665034770965576, -2.3770248889923096, -2.387763023376465, -2.398721933364868, -2.4099061489105225, -2.4213197231292725, -2.432966470718384, -2.444850444793701, -2.4569754600524902, -2.4693455696105957, -2.481963872909546, -2.4948341846466064, -2.5079596042633057, -2.521343231201172, -2.534987449645996, -2.5488953590393066, -2.563068389892578, -2.5775089263916016, -2.5922181606292725, -2.6071972846984863, -2.6224465370178223, -2.6379663944244385, -2.6537561416625977, -2.6698150634765625, -2.6861414909362793, -2.702733278274536, -2.719587564468384, -2.7367007732391357, -2.7540688514709473, -2.771686553955078, -2.789548397064209, -2.807647466659546, -2.825977087020874, -2.8445284366607666, -2.863292932510376, -2.882260799407959, -2.901421546936035, -2.9207639694213867, -2.9402754306793213, -2.9599437713623047, -2.979755163192749, -2.9996955394744873, -3.0197501182556152, -3.0399038791656494, -3.060140609741211, -3.080444574356079, -3.100799083709717, -3.121187210083008, 3.1415927410125732, 3.120762348175049, 3.099950075149536, 3.0791738033294678, 3.0584514141082764, 3.0378003120422363, 3.017237663269043, 2.9967801570892334, 2.9764440059661865, 2.956244707107544, 2.936197280883789, 2.916315793991089, 2.8966140747070312, 2.8771042823791504, 2.8577985763549805, 2.838707685470581, 2.8198421001434326, 2.801210641860962, 2.7828218936920166, 2.764683485031128, 2.7468016147613525, 2.729182243347168, 2.7118303775787354, 2.6947500705718994, 2.677945137023926, 2.6614177227020264, 2.645169973373413, 2.6292030811309814, 2.613518238067627, 2.5981149673461914, 2.582993268966675, 2.5681521892547607, 2.5535900592803955, 2.5393052101135254, 2.5252957344055176, 2.511558771133423, 2.498091459274292, 2.484890937805176, 2.4719536304473877, 2.4592761993408203, 2.44685435295105, 2.4346845149993896, 2.422762632369995, 2.4110844135284424, 2.3996453285217285, 2.388441324234009, 2.3774678707122803, 2.36672043800354, 2.356194496154785, 2.3458855152130127, 2.335789203643799, 2.3259007930755615, 2.316215753555298, 2.306730031967163, 2.297438621520996, 2.2883377075195312, 2.2794225215911865, 2.2706892490386963, 2.2621333599090576, 2.2537505626678467, 2.245537281036377, 2.2374892234802246, 2.229602336883545, 2.2218730449676514, -2.2142975330352783, -2.2218730449676514, -2.229602336883545, -2.2374892234802246, -2.245537281036377, -2.2537505626678467, -2.2621333599090576, -2.2706892490386963, -2.2794225215911865, -2.2883377075195312, -2.297438621520996, -2.306730031967163, -2.316215753555298, -2.3259007930755615, -2.335789203643799, -2.3458855152130127, -2.356194496154785, -2.36672043800354, -2.3774678707122803, -2.388441324234009, -2.3996453285217285, -2.4110844135284424, -2.422762632369995, -2.4346845149993896, -2.44685435295105, -2.4592761993408203, -2.4719536304473877, -2.484890937805176, -2.498091459274292, -2.511558771133423, -2.5252957344055176, -2.5393052101135254, -2.5535900592803955, -2.5681521892547607, -2.582993268966675, -2.5981149673461914, -2.613518238067627, -2.6292030811309814, -2.645169973373413, -2.6614177227020264, -2.677945137023926, -2.6947500705718994, -2.7118303775787354, -2.729182243347168, -2.7468016147613525, -2.764683485031128, -2.7828218936920166, -2.801210641860962, -2.8198421001434326, -2.838707685470581, -2.8577985763549805, -2.8771042823791504, -2.8966140747070312, -2.916315793991089, -2.936197280883789, -2.956244707107544, -2.9764440059661865, -2.9967801570892334, -3.017237663269043, -3.0378003120422363, -3.0584514141082764, -3.0791738033294678, -3.099950075149536, -3.120762348175049, 3.1415927410125732, 3.120319366455078, 3.099065065383911, 3.0778493881225586, 3.0566909313201904, 3.0356082916259766, 3.014619827270508, 2.9937431812286377, 2.9729957580566406, 2.9523935317993164, 2.931952714920044, 2.9116883277893066, 2.8916139602661133, 2.8717434406280518, 2.8520889282226562, 2.8326618671417236, 2.8134727478027344, 2.7945311069488525, 2.7758452892303467, 2.7574234008789062, 2.739271640777588, 2.721395969390869, 2.703801393508911, 2.6864917278289795, 2.66947078704834, 2.652740240097046, 2.6363024711608887, 2.6201581954956055, 2.6043078899383545, 2.5887513160705566, 2.5734879970550537, 2.558516025543213, 2.5438342094421387, 2.52944016456604, 2.515331268310547, 2.501504421234131, 2.4879567623138428, 2.474684476852417, 2.461683750152588, 2.44895076751709, 2.436481237411499, 2.4242708683013916, 2.4123153686523438, 2.4006097316741943, 2.3891496658325195, 2.377930164337158, 2.3669466972351074, 2.356194496154785, 2.3456685543060303, 2.3353641033172607, 2.3252766132354736, 2.3154008388519287, 2.305732250213623, 2.2962663173675537, 2.2869982719421387, 2.277923345565796, 2.2690372467041016, 2.2603354454040527, 2.2518134117126465, 2.243466854095459, 2.2352917194366455, 2.2272837162017822, 2.2194387912750244, 2.2117528915405273, -2.2042222023010254, -2.2117528915405273, -2.2194387912750244, -2.2272837162017822, -2.2352917194366455, -2.243466854095459, -2.2518134117126465, -2.2603354454040527, -2.2690372467041016, -2.277923345565796, -2.2869982719421387, -2.2962663173675537, -2.305732250213623, -2.3154008388519287, -2.3252766132354736, -2.3353641033172607, -2.3456685543060303, -2.356194496154785, -2.3669466972351074, -2.377930164337158, -2.3891496658325195, -2.4006097316741943, -2.4123153686523438, -2.4242708683013916, -2.436481237411499, -2.44895076751709, -2.461683750152588, -2.474684476852417, -2.4879567623138428, -2.501504421234131, -2.515331268310547, -2.52944016456604, -2.5438342094421387, -2.558516025543213, -2.5734879970550537, -2.5887513160705566, -2.6043078899383545, -2.6201581954956055, -2.6363024711608887, -2.652740240097046, -2.66947078704834, -2.6864917278289795, -2.703801393508911, -2.721395969390869, -2.739271640777588, -2.7574234008789062, -2.7758452892303467, -2.7945311069488525, -2.8134727478027344, -2.8326618671417236, -2.8520889282226562, -2.8717434406280518, -2.8916139602661133, -2.9116883277893066, -2.931952714920044, -2.9523935317993164, -2.9729957580566406, -2.9937431812286377, -3.014619827270508, -3.0356082916259766, -3.0566909313201904, -3.0778493881225586, -3.099065065383911, -3.120319366455078, 3.1415927410125732, 3.119856834411621, 3.098141670227051, 3.076467514038086, 3.054854393005371, 3.0333220958709717, 3.011890172958374, 2.990577220916748, 2.9694018363952637, 2.948381185531616, 2.9275319576263428, 2.906870126724243, 2.8864102363586426, 2.866166591644287, 2.846151828765869, 2.8263778686523438, 2.8068559169769287, 2.787595272064209, 2.7686049938201904, 2.7498927116394043, 2.7314653396606445, 2.7133285999298096, 2.6954870223999023, 2.677945137023926, 2.660705327987671, 2.643770217895508, 2.627141237258911, 2.610819101333618, 2.594803810119629, 2.579094648361206, 2.563690662384033, 2.5485901832580566, 2.5337905883789062, 2.51928973197937, 2.50508451461792, 2.49117112159729, 2.477546453475952, 2.4642062187194824, 2.451146125793457, 2.4383621215820312, 2.425848960876465, 2.413602590560913, 2.4016177654266357, 2.3898894786834717, 2.378412961959839, 2.367182970046997, 2.356194496154785, 2.345442295074463, 2.33492112159729, 2.3246259689331055, 2.314551830291748, 2.3046936988830566, 2.295046329498291, 2.285604953765869, 2.27636456489563, 2.267320394515991, 2.258467674255371, 2.2498016357421875, 2.2413179874420166, 2.2330117225646973, 2.224879026412964, 2.2169151306152344, 2.209116220474243, 2.201477527618408, -2.193995714187622, -2.201477527618408, -2.209116220474243, -2.2169151306152344, -2.224879026412964, -2.2330117225646973, -2.2413179874420166, -2.2498016357421875, -2.258467674255371, -2.267320394515991, -2.27636456489563, -2.285604953765869, -2.295046329498291, -2.3046936988830566, -2.314551830291748, -2.3246259689331055, -2.33492112159729, -2.345442295074463, -2.356194496154785, -2.367182970046997, -2.378412961959839, -2.3898894786834717, -2.4016177654266357, -2.413602590560913, -2.425848960876465, -2.4383621215820312, -2.451146125793457, -2.4642062187194824, -2.477546453475952, -2.49117112159729, -2.50508451461792, -2.51928973197937, -2.5337905883789062, -2.5485901832580566, -2.563690662384033, -2.579094648361206, -2.594803810119629, -2.610819101333618, -2.627141237258911, -2.643770217895508, -2.660705327987671, -2.677945137023926, -2.6954870223999023, -2.7133285999298096, -2.7314653396606445, -2.7498927116394043, -2.7686049938201904, -2.787595272064209, -2.8068559169769287, -2.8263778686523438, -2.846151828765869, -2.866166591644287, -2.8864102363586426, -2.906870126724243, -2.9275319576263428, -2.948381185531616, -2.9694018363952637, -2.990577220916748, -3.011890172958374, -3.0333220958709717, -3.054854393005371, -3.076467514038086, -3.098141670227051, -3.119856834411621, 3.1415927410125732, 3.1193740367889404, 3.097177505493164, 3.0750246047973633, 3.0529367923736572, 3.030935525894165, 3.0090410709381104, 2.987273931503296, 2.9656529426574707, 2.944197177886963, 2.9229238033294678, 2.9018495082855225, 2.8809902667999268, 2.8603603839874268, 2.8399736881256104, 2.8198421001434326, 2.7999770641326904, 2.780388832092285, 2.7610862255096436, 2.742077112197876, 2.7233684062957764, 2.704965591430664, 2.686873435974121, 2.669095754623413, 2.6516354084014893, 2.6344940662384033, 2.617673397064209, 2.601173162460327, 2.584993362426758, 2.5691328048706055, 2.5535900592803955, 2.538362741470337, 2.5234484672546387, 2.5088438987731934, 2.4945454597473145, 2.4805495738983154, 2.4668517112731934, 2.4534475803375244, 2.4403326511383057, 2.427501916885376, 2.414950370788574, 2.402672529220581, 2.3906636238098145, 2.378917932510376, 2.3674299716949463, 2.356194496154785, 2.3452060222625732, 2.334458827972412, 2.3239476680755615, 2.313667058944702, 2.3036115169525146, 2.293775796890259, 2.2841544151306152, 2.274742364883423, 2.2655346393585205, 2.256525754928589, 2.247711181640625, 2.2390856742858887, 2.230644702911377, 2.222383499145508, 2.2142975330352783, 2.2063820362091064, 2.1986329555511475, 2.1910457611083984, -2.1836166381835938, -2.1910457611083984, -2.1986329555511475, -2.2063820362091064, -2.2142975330352783, -2.222383499145508, -2.230644702911377, -2.2390856742858887, -2.247711181640625, -2.256525754928589, -2.2655346393585205, -2.274742364883423, -2.2841544151306152, -2.293775796890259, -2.3036115169525146, -2.313667058944702, -2.3239476680755615, -2.334458827972412, -2.3452060222625732, -2.356194496154785, -2.3674299716949463, -2.378917932510376, -2.3906636238098145, -2.402672529220581, -2.414950370788574, -2.427501916885376, -2.4403326511383057, -2.4534475803375244, -2.4668517112731934, -2.4805495738983154, -2.4945454597473145, -2.5088438987731934, -2.5234484672546387, -2.538362741470337, -2.5535900592803955, -2.5691328048706055, -2.584993362426758, -2.601173162460327, -2.617673397064209, -2.6344940662384033, -2.6516354084014893, -2.669095754623413, -2.686873435974121, -2.704965591430664, -2.7233684062957764, -2.742077112197876, -2.7610862255096436, -2.780388832092285, -2.7999770641326904, -2.8198421001434326, -2.8399736881256104, -2.8603603839874268, -2.8809902667999268, -2.9018495082855225, -2.9229238033294678, -2.944197177886963, -2.9656529426574707, -2.987273931503296, -3.0090410709381104, -3.030935525894165, -3.0529367923736572, -3.0750246047973633, -3.097177505493164, -3.1193740367889404, 3.1415927410125732, 3.1188693046569824, 3.0961694717407227, 3.0735161304473877, 3.0509328842163086, 3.0284416675567627, 3.0060648918151855, 2.9838240146636963, 2.9617390632629395, 2.9398303031921387, 2.9181160926818848, 2.8966140747070312, 2.875340700149536, 2.854311227798462, 2.8335399627685547, 2.813039541244507, 2.7928216457366943, 2.7728967666625977, 2.7532739639282227, 2.7339611053466797, 2.7149651050567627, 2.69629168510437, 2.677945137023926, 2.659929037094116, 2.6422460079193115, 2.6248974800109863, 2.607884407043457, 2.5912067890167236, 2.5748634338378906, 2.5588531494140625, 2.5431737899780273, 2.527822494506836, 2.512796401977539, 2.498091459274292, 2.483704090118408, 2.4696295261383057, 2.4558632373809814, 2.4423999786376953, 2.4292349815368652, 2.416362762451172, 2.403777599334717, 2.3914740085601807, 2.379446029663086, 2.3676881790161133, 2.356194496154785, 2.344959020614624, 2.3339760303497314, 2.323239326477051, 2.312743663787842, 2.302482843399048, 2.2924511432647705, 2.2826433181762695, 2.2730531692504883, 2.2636759281158447, 2.2545056343078613, 2.245537281036377, 2.2367656230926514, 2.2281854152679443, 2.219791889190674, 2.2115800380706787, 2.203545093536377, 2.1956825256347656, 2.187987804412842, 2.1804561614990234, -2.173083782196045, -2.1804561614990234, -2.187987804412842, -2.1956825256347656, -2.203545093536377, -2.2115800380706787, -2.219791889190674, -2.2281854152679443, -2.2367656230926514, -2.245537281036377, -2.2545056343078613, -2.2636759281158447, -2.2730531692504883, -2.2826433181762695, -2.2924511432647705, -2.302482843399048, -2.312743663787842, -2.323239326477051, -2.3339760303497314, -2.344959020614624, -2.356194496154785, -2.3676881790161133, -2.379446029663086, -2.3914740085601807, -2.403777599334717, -2.416362762451172, -2.4292349815368652, -2.4423999786376953, -2.4558632373809814, -2.4696295261383057, -2.483704090118408, -2.498091459274292, -2.512796401977539, -2.527822494506836, -2.5431737899780273, -2.5588531494140625, -2.5748634338378906, -2.5912067890167236, -2.607884407043457, -2.6248974800109863, -2.6422460079193115, -2.659929037094116, -2.677945137023926, -2.69629168510437, -2.7149651050567627, -2.7339611053466797, -2.7532739639282227, -2.7728967666625977, -2.7928216457366943, -2.813039541244507, -2.8335399627685547, -2.854311227798462, -2.875340700149536, -2.8966140747070312, -2.9181160926818848, -2.9398303031921387, -2.9617390632629395, -2.9838240146636963, -3.0060648918151855, -3.0284416675567627, -3.0509328842163086, -3.0735161304473877, -3.0961694717407227, -3.1188693046569824, 3.1415927410125732, 3.1183409690856934, 3.0951144695281982, 3.0719380378723145, 3.0488362312316895, 3.0258333683013916, 3.002952814102173, 2.980217456817627, 2.9576492309570312, 2.9352686405181885, 2.9130959510803223, 2.8911495208740234, 2.8694467544555664, 2.848003625869751, 2.8268349170684814, 2.8059542179107666, 2.7853729724884033, 2.7651023864746094, 2.7451512813568115, 2.7255282402038574, 2.7062394618988037, 2.687290668487549, 2.6686861515045166, 2.6504290103912354, 2.632521867752075, 2.6149654388427734, 2.5977602005004883, 2.5809056758880615, 2.5644004344940186, 2.5482425689697266, 2.5324292182922363, 2.5169572830200195, 2.5018229484558105, 2.4870219230651855, 2.4725496768951416, 2.4584012031555176, 2.4445712566375732, 2.4310543537139893, 2.417844772338867, 2.4049363136291504, 2.3923232555389404, 2.3799993991851807, 2.3679585456848145, 2.356194496154785, 2.344700813293457, 2.3334710597991943, 2.3224992752075195, 2.311779260635376, 2.301304578781128, 2.291069269180298, 2.281067371368408, 2.2712926864624023, 2.261739492416382, 2.2524020671844482, 2.2432749271392822, 2.2343521118164062, 2.22562837600708, 2.2170984745025635, 2.2087574005126953, 2.2005996704101562, 2.1926205158233643, 2.1848154067993164, 2.1771790981292725, 2.1697075366973877, -2.16239595413208, -2.1697075366973877, -2.1771790981292725, -2.1848154067993164, -2.1926205158233643, -2.2005996704101562, -2.2087574005126953, -2.2170984745025635, -2.22562837600708, -2.2343521118164062, -2.2432749271392822, -2.2524020671844482, -2.261739492416382, -2.2712926864624023, -2.281067371368408, -2.291069269180298, -2.301304578781128, -2.311779260635376, -2.3224992752075195, -2.3334710597991943, -2.344700813293457, -2.356194496154785, -2.3679585456848145, -2.3799993991851807, -2.3923232555389404, -2.4049363136291504, -2.417844772338867, -2.4310543537139893, -2.4445712566375732, -2.4584012031555176, -2.4725496768951416, -2.4870219230651855, -2.5018229484558105, -2.5169572830200195, -2.5324292182922363, -2.5482425689697266, -2.5644004344940186, -2.5809056758880615, -2.5977602005004883, -2.6149654388427734, -2.632521867752075, -2.6504290103912354, -2.6686861515045166, -2.687290668487549, -2.7062394618988037, -2.7255282402038574, -2.7451512813568115, -2.7651023864746094, -2.7853729724884033, -2.8059542179107666, -2.8268349170684814, -2.848003625869751, -2.8694467544555664, -2.8911495208740234, -2.9130959510803223, -2.9352686405181885, -2.9576492309570312, -2.980217456817627, -3.002952814102173, -3.0258333683013916, -3.0488362312316895, -3.0719380378723145, -3.0951144695281982, -3.1183409690856934, 3.1415927410125732, 3.1177875995635986, 3.0940096378326416, 3.0702850818634033, 3.0466408729553223, 3.0231027603149414, 2.9996955394744873, 2.9764440059661865, 2.953371047973633, 2.930499315261841, 2.9078495502471924, 2.885441303253174, 2.863292932510376, 2.841421365737915, 2.8198421001434326, 2.7985687255859375, 2.777613639831543, 2.756988048553467, 2.7367007732391357, 2.7167603969573975, 2.6971733570098877, 2.677945137023926, 2.6590793132781982, 2.6405792236328125, 2.6224465370178223, 2.604681968688965, 2.587285041809082, 2.5702552795410156, 2.5535900592803955, 2.5372872352600098, 2.521343231201172, 2.505754232406616, 2.490515947341919, 2.475623369216919, 2.461071491241455, 2.44685435295105, 2.432966470718384, 2.4194014072418213, 2.4061529636383057, 2.393214702606201, 2.380579948425293, 2.368242025375366, 2.356194496154785, 2.3444302082061768, 2.3329429626464844, 2.321725368499756, 2.3107712268829346, 2.3000736236572266, 2.289626359939575, 2.2794225215911865, 2.269456148147583, 2.259720802307129, 2.2502100467681885, 2.2409183979034424, 2.231839418411255, 2.2229676246643066, 2.2142975330352783, 2.2058229446411133, 2.1975393295288086, 2.1894407272338867, 2.1815223693847656, 2.173779010772705, 2.166206121444702, 2.158798933029175, -2.151552677154541, -2.158798933029175, -2.166206121444702, -2.173779010772705, -2.1815223693847656, -2.1894407272338867, -2.1975393295288086, -2.2058229446411133, -2.2142975330352783, -2.2229676246643066, -2.231839418411255, -2.2409183979034424, -2.2502100467681885, -2.259720802307129, -2.269456148147583, -2.2794225215911865, -2.289626359939575, -2.3000736236572266, -2.3107712268829346, -2.321725368499756, -2.3329429626464844, -2.3444302082061768, -2.356194496154785, -2.368242025375366, -2.380579948425293, -2.393214702606201, -2.4061529636383057, -2.4194014072418213, -2.432966470718384, -2.44685435295105, -2.461071491241455, -2.475623369216919, -2.490515947341919, -2.505754232406616, -2.521343231201172, -2.5372872352600098, -2.5535900592803955, -2.5702552795410156, -2.587285041809082, -2.604681968688965, -2.6224465370178223, -2.6405792236328125, -2.6590793132781982, -2.677945137023926, -2.6971733570098877, -2.7167603969573975, -2.7367007732391357, -2.756988048553467, -2.777613639831543, -2.7985687255859375, -2.8198421001434326, -2.841421365737915, -2.863292932510376, -2.885441303253174, -2.9078495502471924, -2.930499315261841, -2.953371047973633, -2.9764440059661865, -2.9996955394744873, -3.0231027603149414, -3.0466408729553223, -3.0702850818634033, -3.0940096378326416, -3.1177875995635986, 3.1415927410125732, 3.1172072887420654, 3.092850685119629, 3.068552017211914, 3.044339418411255, 3.020240545272827, 2.9962825775146484, 2.972491502761841, 2.9488918781280518, 2.9255077838897705, 2.9023611545562744, 2.8794727325439453, 2.8568623065948486, 2.8345468044281006, 2.8125429153442383, 2.7908647060394287, 2.7695248126983643, 2.748534679412842, 2.727903366088867, 2.707639217376709, 2.687748670578003, 2.668236494064331, 2.649106979370117, 2.630362033843994, 2.6120030879974365, 2.5940303802490234, 2.5764431953430176, 2.559239625930786, 2.542417287826538, 2.525972843170166, 2.509902000427246, 2.4942004680633545, 2.47886323928833, 2.4638843536376953, 2.449258327484131, 2.434978485107422, 2.4210386276245117, 2.4074316024780273, 2.394150972366333, 2.3811893463134766, 2.368539571762085, 2.356194496154785, 2.344146966934204, 2.3323893547058105, 2.3209149837493896, 2.3097164630889893, 2.2987864017486572, 2.2881181240081787, 2.2777044773101807, 2.267538547515869, 2.2576138973236084, 2.2479238510131836, 2.238461971282959, 2.2292215824127197, 2.2201969623565674, 2.2113819122314453, 2.202770471572876, 2.19435715675354, 2.186135768890381, 2.1781015396118164, 2.1702487468719482, 2.1625723838806152, 2.1550676822662354, 2.1477291584014893, -2.1405527591705322, -2.1477291584014893, -2.1550676822662354, -2.1625723838806152, -2.1702487468719482, -2.1781015396118164, -2.186135768890381, -2.19435715675354, -2.202770471572876, -2.2113819122314453, -2.2201969623565674, -2.2292215824127197, -2.238461971282959, -2.2479238510131836, -2.2576138973236084, -2.267538547515869, -2.2777044773101807, -2.2881181240081787, -2.2987864017486572, -2.3097164630889893, -2.3209149837493896, -2.3323893547058105, -2.344146966934204, -2.356194496154785, -2.368539571762085, -2.3811893463134766, -2.394150972366333, -2.4074316024780273, -2.4210386276245117, -2.434978485107422, -2.449258327484131, -2.4638843536376953, -2.47886323928833, -2.4942004680633545, -2.509902000427246, -2.525972843170166, -2.542417287826538, -2.559239625930786, -2.5764431953430176, -2.5940303802490234, -2.6120030879974365, -2.630362033843994, -2.649106979370117, -2.668236494064331, -2.687748670578003, -2.707639217376709, -2.727903366088867, -2.748534679412842, -2.7695248126983643, -2.7908647060394287, -2.8125429153442383, -2.8345468044281006, -2.8568623065948486, -2.8794727325439453, -2.9023611545562744, -2.9255077838897705, -2.9488918781280518, -2.972491502761841, -2.9962825775146484, -3.020240545272827, -3.044339418411255, -3.068552017211914, -3.092850685119629, -3.1172072887420654, 3.1415927410125732, 3.116597890853882, 3.0916342735290527, 3.066732883453369, 3.041923999786377, 3.017237663269043, 2.9927027225494385, 2.9683470726013184, 2.944197177886963, 2.920278310775757, 2.8966140747070312, 2.8732264041900635, 2.8501358032226562, 2.8273608684539795, 2.804917812347412, 2.7828218936920166, 2.7610862255096436, 2.7397220134735107, 2.7187387943267822, 2.6981444358825684, 2.677945137023926, 2.6581456661224365, 2.638749361038208, 2.619758367538452, 2.601173162460327, 2.582993268966675, 2.5652174949645996, 2.5478429794311523, 2.5308666229248047, 2.514284372329712, 2.498091459274292, 2.4822826385498047, 2.4668517112731934, 2.4517927169799805, 2.437098503112793, 2.422762632369995, 2.4087774753570557, 2.3951358795166016, 2.3818299770355225, 2.368852138519287, 2.356194496154785, 2.3438494205474854, 2.3318090438842773, 2.32006573677063, 2.3086113929748535, 2.297438621520996, 2.2865400314331055, 2.2759077548980713, 2.2655346393585205, 2.25541353225708, 2.245537281036377, 2.235898971557617, 2.226491928100586, 2.2173094749450684, 2.2083451747894287, 2.1995925903320312, 2.1910457611083984, 2.1826987266540527, 2.1745457649230957, 2.16658091545105, 2.158798933029175, 2.1511945724487305, 2.1437625885009766, 2.136497735977173, -2.1293957233428955, -2.136497735977173, -2.1437625885009766, -2.1511945724487305, -2.158798933029175, -2.16658091545105, -2.1745457649230957, -2.1826987266540527, -2.1910457611083984, -2.1995925903320312, -2.2083451747894287, -2.2173094749450684, -2.226491928100586, -2.235898971557617, -2.245537281036377, -2.25541353225708, -2.2655346393585205, -2.2759077548980713, -2.2865400314331055, -2.297438621520996, -2.3086113929748535, -2.32006573677063, -2.3318090438842773, -2.3438494205474854, -2.356194496154785, -2.368852138519287, -2.3818299770355225, -2.3951358795166016, -2.4087774753570557, -2.422762632369995, -2.437098503112793, -2.4517927169799805, -2.4668517112731934, -2.4822826385498047, -2.498091459274292, -2.514284372329712, -2.5308666229248047, -2.5478429794311523, -2.5652174949645996, -2.582993268966675, -2.601173162460327, -2.619758367538452, -2.638749361038208, -2.6581456661224365, -2.677945137023926, -2.6981444358825684, -2.7187387943267822, -2.7397220134735107, -2.7610862255096436, -2.7828218936920166, -2.804917812347412, -2.8273608684539795, -2.8501358032226562, -2.8732264041900635, -2.8966140747070312, -2.920278310775757, -2.944197177886963, -2.9683470726013184, -2.9927027225494385, -3.017237663269043, -3.041923999786377, -3.066732883453369, -3.0916342735290527, -3.116597890853882, 3.1415927410125732, 3.115957260131836, 3.090355396270752, 3.0648207664489746, 3.039386034011841, 3.01408314704895, 2.988943338394165, 2.963996410369873, 2.9392709732055664, 2.9147937297821045, 2.890589952468872, 2.866682767868042, 2.8430936336517334, 2.8198421001434326, 2.796945333480835, 2.774418830871582, 2.7522759437561035, 2.7305281162261963, 2.7091848850250244, 2.688253879547119, 2.667741298675537, 2.647651195526123, 2.6279866695404053, 2.6087486743927, 2.589937686920166, 2.571552276611328, 2.5535900592803955, 2.53604793548584, 2.5189218521118164, 2.502206802368164, 2.4858970642089844, 2.4699864387512207, 2.4544684886932373, 2.439335823059082, 2.4245808124542236, 2.41019606590271, 2.3961732387542725, 2.3825042247772217, 2.369180679321289, 2.356194496154785, 2.343536853790283, 2.3311996459960938, 2.319174289703369, 2.30745267868042, 2.2960262298583984, 2.2848870754241943, 2.274026870727539, 2.2634382247924805, 2.25311279296875, 2.2430434226989746, 2.233222723007202, 2.2236430644989014, 2.2142975330352783, 2.205179214477539, 2.1962814331054688, 2.1875975131988525, 2.179121255874634, 2.170846462249756, 2.162767171859741, 2.1548774242401123, 2.1471714973449707, 2.139644145965576, 2.1322898864746094, 2.125103712081909, -2.1180806159973145, -2.125103712081909, -2.1322898864746094, -2.139644145965576, -2.1471714973449707, -2.1548774242401123, -2.162767171859741, -2.170846462249756, -2.179121255874634, -2.1875975131988525, -2.1962814331054688, -2.205179214477539, -2.2142975330352783, -2.2236430644989014, -2.233222723007202, -2.2430434226989746, -2.25311279296875, -2.2634382247924805, -2.274026870727539, -2.2848870754241943, -2.2960262298583984, -2.30745267868042, -2.319174289703369, -2.3311996459960938, -2.343536853790283, -2.356194496154785, -2.369180679321289, -2.3825042247772217, -2.3961732387542725, -2.41019606590271, -2.4245808124542236, -2.439335823059082, -2.4544684886932373, -2.4699864387512207, -2.4858970642089844, -2.502206802368164, -2.5189218521118164, -2.53604793548584, -2.5535900592803955, -2.571552276611328, -2.589937686920166, -2.6087486743927, -2.6279866695404053, -2.647651195526123, -2.667741298675537, -2.688253879547119, -2.7091848850250244, -2.7305281162261963, -2.7522759437561035, -2.774418830871582, -2.796945333480835, -2.8198421001434326, -2.8430936336517334, -2.866682767868042, -2.890589952468872, -2.9147937297821045, -2.9392709732055664, -2.963996410369873, -2.988943338394165, -3.01408314704895, -3.039386034011841, -3.0648207664489746, -3.090355396270752, -3.115957260131836, 3.1415927410125732, 3.1152830123901367, 3.0890095233917236, 3.0628087520599365, 3.0367157459259033, 3.010765314102173, 2.9849908351898193, 2.9594242572784424, 2.934096336364746, 2.9090356826782227, 2.8842689990997314, 2.85982084274292, 2.8357138633728027, 2.8119683265686035, 2.788602352142334, 2.765631675720215, 2.743070125579834, 2.7209293842315674, 2.699218511581421, 2.677945137023926, 2.6571147441864014, 2.6367313861846924, 2.6167969703674316, 2.5973122119903564, 2.5782763957977295, 2.559687614440918, 2.5415425300598145, 2.523836851119995, 2.506565809249878, 2.4897234439849854, 2.4733033180236816, 2.4572978019714355, 2.441699743270874, 2.4265010356903076, 2.4116930961608887, 2.3972673416137695, 2.3832149505615234, 2.3695271015167236, 2.356194496154785, 2.3432083129882812, 2.330559015274048, 2.3182380199432373, 2.3062360286712646, 2.294544219970703, 2.283154010772705, 2.2720563411712646, 2.2612428665161133, 2.2507052421569824, 2.2404353618621826, 2.2304251194000244, 2.2206668853759766, 2.2111527919769287, 2.201875686645508, 2.192828416824341, 2.1840035915374756, 2.1753950119018555, 2.1669955253601074, 2.158798933029175, 2.150799036026001, 2.1429898738861084, 2.1353657245635986, 2.127920627593994, 2.120649576187134, 2.113546848297119, -2.106607675552368, -2.113546848297119, -2.120649576187134, -2.127920627593994, -2.1353657245635986, -2.1429898738861084, -2.150799036026001, -2.158798933029175, -2.1669955253601074, -2.1753950119018555, -2.1840035915374756, -2.192828416824341, -2.201875686645508, -2.2111527919769287, -2.2206668853759766, -2.2304251194000244, -2.2404353618621826, -2.2507052421569824, -2.2612428665161133, -2.2720563411712646, -2.283154010772705, -2.294544219970703, -2.3062360286712646, -2.3182380199432373, -2.330559015274048, -2.3432083129882812, -2.356194496154785, -2.3695271015167236, -2.3832149505615234, -2.3972673416137695, -2.4116930961608887, -2.4265010356903076, -2.441699743270874, -2.4572978019714355, -2.4733033180236816, -2.4897234439849854, -2.506565809249878, -2.523836851119995, -2.5415425300598145, -2.559687614440918, -2.5782763957977295, -2.5973122119903564, -2.6167969703674316, -2.6367313861846924, -2.6571147441864014, -2.677945137023926, -2.699218511581421, -2.7209293842315674, -2.743070125579834, -2.765631675720215, -2.788602352142334, -2.8119683265686035, -2.8357138633728027, -2.85982084274292, -2.8842689990997314, -2.9090356826782227, -2.934096336364746, -2.9594242572784424, -2.9849908351898193, -3.010765314102173, -3.0367157459259033, -3.0628087520599365, -3.0890095233917236, -3.1152830123901367, 3.1415927410125732, 3.114572286605835, 3.0875911712646484, 3.0606884956359863, 3.033902883529663, 3.0072712898254395, 2.980829954147339, 2.954613447189331, 2.928654193878174, 2.9029834270477295, 2.877629041671753, 2.8526172637939453, 2.827971935272217, 2.8037145137786865, 2.7798633575439453, 2.7564351558685303, 2.73344349861145, 2.710900068283081, 2.688814163208008, 2.6671926975250244, 2.646040916442871, 2.625361919403076, 2.6051571369171143, 2.5854263305664062, 2.5661680698394775, 2.5473790168762207, 2.529055118560791, 2.5111911296844482, 2.493781328201294, 2.476818084716797, 2.460294485092163, 2.444201946258545, 2.4285318851470947, 2.4132752418518066, 2.398422956466675, 2.383965015411377, 2.3698923587799072, 2.356194496154785, 2.3428618907928467, 2.3298847675323486, 2.3172531127929688, 2.304957389831543, 2.292987585067749, 2.281334638595581, 2.269989013671875, 2.258941173553467, 2.248182773590088, 2.2377045154571533, 2.2274980545043945, 2.217554807662964, 2.207866668701172, 2.198425769805908, 2.1892242431640625, 2.1802549362182617, 2.1715102195739746, 2.162982940673828, 2.1546666622161865, 2.146554708480835, 2.1386404037475586, 2.13091778755188, 2.123380661010742, 2.116023540496826, 2.1088404655456543, 2.1018264293670654, -2.0949759483337402, -2.1018264293670654, -2.1088404655456543, -2.116023540496826, -2.123380661010742, -2.13091778755188, -2.1386404037475586, -2.146554708480835, -2.1546666622161865, -2.162982940673828, -2.1715102195739746, -2.1802549362182617, -2.1892242431640625, -2.198425769805908, -2.207866668701172, -2.217554807662964, -2.2274980545043945, -2.2377045154571533, -2.248182773590088, -2.258941173553467, -2.269989013671875, -2.281334638595581, -2.292987585067749, -2.304957389831543, -2.3172531127929688, -2.3298847675323486, -2.3428618907928467, -2.356194496154785, -2.3698923587799072, -2.383965015411377, -2.398422956466675, -2.4132752418518066, -2.4285318851470947, -2.444201946258545, -2.460294485092163, -2.476818084716797, -2.493781328201294, -2.5111911296844482, -2.529055118560791, -2.5473790168762207, -2.5661680698394775, -2.5854263305664062, -2.6051571369171143, -2.625361919403076, -2.646040916442871, -2.6671926975250244, -2.688814163208008, -2.710900068283081, -2.73344349861145, -2.7564351558685303, -2.7798633575439453, -2.8037145137786865, -2.827971935272217, -2.8526172637939453, -2.877629041671753, -2.9029834270477295, -2.928654193878174, -2.954613447189331, -2.980829954147339, -3.0072712898254395, -3.033902883529663, -3.0606884956359863, -3.0875911712646484, -3.114572286605835, 3.1415927410125732, 3.1138219833374023, 3.0860941410064697, 3.0584514141082764, 3.030935525894165, 3.003586530685425, 2.9764440059661865, 2.949544668197632, 2.9229238033294678, 2.8966140747070312, 2.870645761489868, 2.8450467586517334, 2.8198421001434326, 2.795053720474243, 2.7707014083862305, 2.7468016147613525, 2.7233684062957764, 2.700413227081299, 2.677945137023926, 2.655970573425293, 2.6344940662384033, 2.613518238067627, 2.593043327331543, 2.573068141937256, 2.5535900592803955, 2.534605026245117, 2.5161075592041016, 2.498091459274292, 2.4805495738983154, 2.463473320007324, 2.44685435295105, 2.4306833744049072, 2.414950370788574, 2.3996453285217285, 2.384758234024048, 2.3702781200408936, 2.356194496154785, 2.342496633529663, 2.329174041748047, 2.316215753555298, 2.3036115169525146, 2.2913503646850586, 2.2794225215911865, 2.267817735671997, 2.256525754928589, 2.245537281036377, 2.234842538833618, 2.2244322299957275, 2.2142975330352783, 2.2044293880462646, 2.194819450378418, 2.1854593753814697, 2.1763410568237305, 2.16745662689209, 2.158798933029175, 2.150360345840454, 2.1421337127685547, 2.134112596511841, 2.1262900829315186, 2.1186599731445312, 2.111215829849243, 2.103951930999756, 2.09686279296875, 2.089942455291748, -2.0831856727600098, -2.089942455291748, -2.09686279296875, -2.103951930999756, -2.111215829849243, -2.1186599731445312, -2.1262900829315186, -2.134112596511841, -2.1421337127685547, -2.150360345840454, -2.158798933029175, -2.16745662689209, -2.1763410568237305, -2.1854593753814697, -2.194819450378418, -2.2044293880462646, -2.2142975330352783, -2.2244322299957275, -2.234842538833618, -2.245537281036377, -2.256525754928589, -2.267817735671997, -2.2794225215911865, -2.2913503646850586, -2.3036115169525146, -2.316215753555298, -2.329174041748047, -2.342496633529663, -2.356194496154785, -2.3702781200408936, -2.384758234024048, -2.3996453285217285, -2.414950370788574, -2.4306833744049072, -2.44685435295105, -2.463473320007324, -2.4805495738983154, -2.498091459274292, -2.5161075592041016, -2.534605026245117, -2.5535900592803955, -2.573068141937256, -2.593043327331543, -2.613518238067627, -2.6344940662384033, -2.655970573425293, -2.677945137023926, -2.700413227081299, -2.7233684062957764, -2.7468016147613525, -2.7707014083862305, -2.795053720474243, -2.8198421001434326, -2.8450467586517334, -2.870645761489868, -2.8966140747070312, -2.9229238033294678, -2.949544668197632, -2.9764440059661865, -3.003586530685425, -3.030935525894165, -3.0584514141082764, -3.0860941410064697, -3.1138219833374023, 3.1415927410125732, 3.1130290031433105, 3.0845117568969727, 3.0560872554779053, 3.0278005599975586, 2.9996955394744873, 2.9718143939971924, 2.944197177886963, 2.916881561279297, 2.8899025917053223, 2.863292932510376, 2.8370816707611084, 2.8112952709198, 2.785956859588623, 2.7610862255096436, 2.7367007732391357, 2.7128145694732666, 2.689438819885254, 2.666581869125366, 2.64424991607666, 2.6224465370178223, 2.601173162460327, 2.5804293155670166, 2.5602123737335205, 2.5405189990997314, 2.521343231201172, 2.502678632736206, 2.484517812728882, 2.4668517112731934, 2.4496712684631348, 2.432966470718384, 2.416726589202881, 2.4009406566619873, 2.3855977058410645, 2.3706862926483154, 2.356194496154785, 2.3421108722686768, 2.3284237384796143, 2.315121650695801, 2.3021929264068604, 2.289626359939575, 2.2774105072021484, 2.2655346393585205, 2.2539877891540527, 2.2427594661712646, 2.231839418411255, 2.221217632293701, 2.2108845710754395, 2.2008302211761475, 2.1910457611083984, 2.1815223693847656, 2.172250986099243, 2.1632237434387207, 2.1544320583343506, 2.1458685398101807, 2.1375255584716797, 2.1293957233428955, 2.121471881866455, 2.1137473583221436, 2.1062159538269043, 2.0988707542419434, 2.0917060375213623, 2.0847160816192627, 2.077894926071167, -2.071237087249756, -2.077894926071167, -2.0847160816192627, -2.0917060375213623, -2.0988707542419434, -2.1062159538269043, -2.1137473583221436, -2.121471881866455, -2.1293957233428955, -2.1375255584716797, -2.1458685398101807, -2.1544320583343506, -2.1632237434387207, -2.172250986099243, -2.1815223693847656, -2.1910457611083984, -2.2008302211761475, -2.2108845710754395, -2.221217632293701, -2.231839418411255, -2.2427594661712646, -2.2539877891540527, -2.2655346393585205, -2.2774105072021484, -2.289626359939575, -2.3021929264068604, -2.315121650695801, -2.3284237384796143, -2.3421108722686768, -2.356194496154785, -2.3706862926483154, -2.3855977058410645, -2.4009406566619873, -2.416726589202881, -2.432966470718384, -2.4496712684631348, -2.4668517112731934, -2.484517812728882, -2.502678632736206, -2.521343231201172, -2.5405189990997314, -2.5602123737335205, -2.5804293155670166, -2.601173162460327, -2.6224465370178223, -2.64424991607666, -2.666581869125366, -2.689438819885254, -2.7128145694732666, -2.7367007732391357, -2.7610862255096436, -2.785956859588623, -2.8112952709198, -2.8370816707611084, -2.863292932510376, -2.8899025917053223, -2.916881561279297, -2.944197177886963, -2.9718143939971924, -2.9996955394744873, -3.0278005599975586, -3.0560872554779053, -3.0845117568969727, -3.1130290031433105, 3.1415927410125732, 3.112189292907715, 3.082836866378784, 3.0535852909088135, 3.0244839191436768, 2.9955804347991943, 2.9669203758239746, 2.938547372817993, 2.9105019569396973, 2.882821798324585, 2.855541229248047, 2.8286914825439453, 2.802299976348877, 2.7763912677764893, 2.750985622406006, 2.726100444793701, 2.7017500400543213, 2.677945137023926, 2.654693365097046, 2.63200044631958, 2.6098685264587402, 2.5882983207702637, 2.5672879219055176, 2.5468335151672363, 2.5269296169281006, 2.5075700283050537, 2.488745927810669, 2.4704487323760986, 2.4526681900024414, 2.4353935718536377, 2.4186131954193115, 2.402315616607666, 2.386488199234009, 2.3711187839508057, 2.356194496154785, 2.341702699661255, 2.3276307582855225, 2.3139660358428955, 2.3006958961486816, 2.2878081798553467, 2.2752904891967773, 2.2631306648254395, 2.2513175010681152, 2.2398393154144287, 2.228684902191162, 2.217843532562256, 2.2073044776916504, 2.1970577239990234, 2.1870932579040527, 2.177401542663574, 2.167973041534424, 2.158798933029175, 2.1498706340789795, 2.1411795616149902, 2.1327178478240967, 2.1244776248931885, 2.1164512634277344, 2.1086318492889404, 2.1010119915008545, 2.09358549118042, 2.0863454341888428, 2.0792856216430664, 2.0724003314971924, 2.0656838417053223, -2.0591301918029785, -2.0656838417053223, -2.0724003314971924, -2.0792856216430664, -2.0863454341888428, -2.09358549118042, -2.1010119915008545, -2.1086318492889404, -2.1164512634277344, -2.1244776248931885, -2.1327178478240967, -2.1411795616149902, -2.1498706340789795, -2.158798933029175, -2.167973041534424, -2.177401542663574, -2.1870932579040527, -2.1970577239990234, -2.2073044776916504, -2.217843532562256, -2.228684902191162, -2.2398393154144287, -2.2513175010681152, -2.2631306648254395, -2.2752904891967773, -2.2878081798553467, -2.3006958961486816, -2.3139660358428955, -2.3276307582855225, -2.341702699661255, -2.356194496154785, -2.3711187839508057, -2.386488199234009, -2.402315616607666, -2.4186131954193115, -2.4353935718536377, -2.4526681900024414, -2.4704487323760986, -2.488745927810669, -2.5075700283050537, -2.5269296169281006, -2.5468335151672363, -2.5672879219055176, -2.5882983207702637, -2.6098685264587402, -2.63200044631958, -2.654693365097046, -2.677945137023926, -2.7017500400543213, -2.726100444793701, -2.750985622406006, -2.7763912677764893, -2.802299976348877, -2.8286914825439453, -2.855541229248047, -2.882821798324585, -2.9105019569396973, -2.938547372817993, -2.9669203758239746, -2.9955804347991943, -3.0244839191436768, -3.0535852909088135, -3.082836866378784, -3.112189292907715, 3.1415927410125732, 3.1112987995147705, 3.0810606479644775, 3.0509328842163086, 3.0209689140319824, 2.9912211894989014, 2.9617390632629395, 2.932569742202759, 2.903756618499756, 2.875340700149536, 2.847357988357544, 2.8198421001434326, 2.7928216457366943, 2.766321897506714, 2.740363836288452, 2.7149651050567627, 2.6901395320892334, 2.6658973693847656, 2.6422460079193115, 2.6191892623901367, 2.596728801727295, 2.5748634338378906, 2.5535900592803955, 2.5329034328460693, 2.512796401977539, 2.493260622024536, 2.4742865562438965, 2.4558632373809814, 2.437978982925415, 2.420621395111084, 2.403777599334717, 2.387434244155884, 2.3715779781341553, 2.356194496154785, 2.3412702083587646, 2.326791286468506, 2.312743663787842, 2.2991137504577637, 2.2858879566192627, 2.2730531692504883, 2.26059627532959, 2.248504638671875, 2.2367656230926514, 2.2253670692443848, 2.2142975330352783, 2.203545093536377, 2.1930992603302, 2.1829488277435303, 2.173083782196045, 2.1634936332702637, 2.1541693210601807, 2.1451010704040527, 2.1362802982330322, 2.1276979446411133, 2.1193456649780273, 2.111215829849243, 2.1033003330230713, 2.0955920219421387, 2.0880837440490723, 2.080768346786499, 2.0736396312713623, 2.0666909217834473, 2.0599160194396973, 2.053309679031372, -2.046865701675415, -2.053309679031372, -2.0599160194396973, -2.0666909217834473, -2.0736396312713623, -2.080768346786499, -2.0880837440490723, -2.0955920219421387, -2.1033003330230713, -2.111215829849243, -2.1193456649780273, -2.1276979446411133, -2.1362802982330322, -2.1451010704040527, -2.1541693210601807, -2.1634936332702637, -2.173083782196045, -2.1829488277435303, -2.1930992603302, -2.203545093536377, -2.2142975330352783, -2.2253670692443848, -2.2367656230926514, -2.248504638671875, -2.26059627532959, -2.2730531692504883, -2.2858879566192627, -2.2991137504577637, -2.312743663787842, -2.326791286468506, -2.3412702083587646, -2.356194496154785, -2.3715779781341553, -2.387434244155884, -2.403777599334717, -2.420621395111084, -2.437978982925415, -2.4558632373809814, -2.4742865562438965, -2.493260622024536, -2.512796401977539, -2.5329034328460693, -2.5535900592803955, -2.5748634338378906, -2.596728801727295, -2.6191892623901367, -2.6422460079193115, -2.6658973693847656, -2.6901395320892334, -2.7149651050567627, -2.740363836288452, -2.766321897506714, -2.7928216457366943, -2.8198421001434326, -2.847357988357544, -2.875340700149536, -2.903756618499756, -2.932569742202759, -2.9617390632629395, -2.9912211894989014, -3.0209689140319824, -3.0509328842163086, -3.0810606479644775, -3.1112987995147705, 3.1415927410125732, 3.1103527545928955, 3.0791738033294678, 3.0481159687042236, 3.017237663269043, 2.986595869064331, 2.956244707107544, 2.9262349605560303, 2.8966140747070312, 2.8674252033233643, 2.838707685470581, 2.8104965686798096, 2.7828218936920166, 2.7557098865509033, 2.729182243347168, 2.703256130218506, 2.677945137023926, 2.653258800506592, 2.6292030811309814, 2.605781316757202, 2.582993268966675, 2.5608363151550293, 2.5393052101135254, 2.5183932781219482, 2.498091459274292, 2.4783897399902344, 2.4592761993408203, 2.4407382011413574, 2.422762632369995, 2.4053351879119873, 2.388441324234009, 2.3720662593841553, 2.356194496154785, 2.340811014175415, 2.3259007930755615, 2.311448335647583, 2.297438621520996, 2.2838571071624756, 2.2706892490386963, 2.257920503616333, 2.245537281036377, 2.2335257530212402, 2.2218730449676514, 2.2105660438537598, 2.1995925903320312, 2.1889405250549316, 2.178598403930664, 2.1685547828674316, 2.158798933029175, 2.149320602416992, 2.1401095390319824, 2.1311562061309814, 2.1224513053894043, 2.113986015319824, 2.1057515144348145, 2.0977394580841064, 2.089942455291748, 2.08235239982605, 2.0749623775482178, 2.0677649974823, 2.060753583908081, 2.053921937942505, 2.0472638607025146, 2.0407729148864746, -2.0344438552856445, -2.0407729148864746, -2.0472638607025146, -2.053921937942505, -2.060753583908081, -2.0677649974823, -2.0749623775482178, -2.08235239982605, -2.089942455291748, -2.0977394580841064, -2.1057515144348145, -2.113986015319824, -2.1224513053894043, -2.1311562061309814, -2.1401095390319824, -2.149320602416992, -2.158798933029175, -2.1685547828674316, -2.178598403930664, -2.1889405250549316, -2.1995925903320312, -2.2105660438537598, -2.2218730449676514, -2.2335257530212402, -2.245537281036377, -2.257920503616333, -2.2706892490386963, -2.2838571071624756, -2.297438621520996, -2.311448335647583, -2.3259007930755615, -2.340811014175415, -2.356194496154785, -2.3720662593841553, -2.388441324234009, -2.4053351879119873, -2.422762632369995, -2.4407382011413574, -2.4592761993408203, -2.4783897399902344, -2.498091459274292, -2.5183932781219482, -2.5393052101135254, -2.5608363151550293, -2.582993268966675, -2.605781316757202, -2.6292030811309814, -2.653258800506592, -2.677945137023926, -2.703256130218506, -2.729182243347168, -2.7557098865509033, -2.7828218936920166, -2.8104965686798096, -2.838707685470581, -2.8674252033233643, -2.8966140747070312, -2.9262349605560303, -2.956244707107544, -2.986595869064331, -3.017237663269043, -3.0481159687042236, -3.0791738033294678, -3.1103527545928955, 3.1415927410125732, 3.1093456745147705, 3.0771658420562744, 3.045118808746338, 3.0132694244384766, 2.9816794395446777, 2.9504082202911377, 2.919510841369629, 2.889038324356079, 2.8590376377105713, 2.8295505046844482, 2.8006136417388916, 2.772258996963501, 2.7445132732391357, 2.717398166656494, 2.6909313201904297, 2.6651251316070557, 2.639988660812378, 2.6155261993408203, 2.5917394161224365, 2.5686264038085938, 2.546182870864868, 2.5244011878967285, 2.503272771835327, 2.4827866554260254, 2.462930202484131, 2.4436898231506348, 2.425050973892212, 2.4069981575012207, 2.3895153999328613, 2.372586488723755, 2.356194496154785, 2.340322732925415, 2.3249547481536865, 2.3100733757019043, 2.2956624031066895, 2.281705617904663, 2.2681870460510254, 2.2550911903381348, 2.2424025535583496, 2.2301063537597656, 2.218188524246216, 2.206634759902954, 2.195431709289551, 2.1845664978027344, 2.1740262508392334, 2.1637988090515137, 2.1538729667663574, 2.1442368030548096, 2.1348800659179688, 2.1257920265197754, 2.1169629096984863, 2.1083829402923584, 2.1000430583953857, 2.0919344425201416, 2.0840485095977783, 2.0763773918151855, 2.068912982940674, 2.06164813041687, 2.0545754432678223, 2.0476882457733154, 2.0409798622131348, 2.0344438552856445, 2.0280745029449463, -2.0218660831451416, -2.0280745029449463, -2.0344438552856445, -2.0409798622131348, -2.0476882457733154, -2.0545754432678223, -2.06164813041687, -2.068912982940674, -2.0763773918151855, -2.0840485095977783, -2.0919344425201416, -2.1000430583953857, -2.1083829402923584, -2.1169629096984863, -2.1257920265197754, -2.1348800659179688, -2.1442368030548096, -2.1538729667663574, -2.1637988090515137, -2.1740262508392334, -2.1845664978027344, -2.195431709289551, -2.206634759902954, -2.218188524246216, -2.2301063537597656, -2.2424025535583496, -2.2550911903381348, -2.2681870460510254, -2.281705617904663, -2.2956624031066895, -2.3100733757019043, -2.3249547481536865, -2.340322732925415, -2.356194496154785, -2.372586488723755, -2.3895153999328613, -2.4069981575012207, -2.425050973892212, -2.4436898231506348, -2.462930202484131, -2.4827866554260254, -2.503272771835327, -2.5244011878967285, -2.546182870864868, -2.5686264038085938, -2.5917394161224365, -2.6155261993408203, -2.639988660812378, -2.6651251316070557, -2.6909313201904297, -2.717398166656494, -2.7445132732391357, -2.772258996963501, -2.8006136417388916, -2.8295505046844482, -2.8590376377105713, -2.889038324356079, -2.919510841369629, -2.9504082202911377, -2.9816794395446777, -3.0132694244384766, -3.045118808746338, -3.0771658420562744, -3.1093456745147705, 3.1415927410125732, 3.108271598815918, 3.0750246047973633, 3.041923999786377, 3.0090410709381104, 2.9764440059661865, 2.944197177886963, 2.912360668182373, 2.8809902667999268, 2.8501358032226562, 2.8198421001434326, 2.7901477813720703, 2.7610862255096436, 2.732684850692749, 2.704965591430664, 2.677945137023926, 2.6516354084014893, 2.6260435581207275, 2.601173162460327, 2.5770232677459717, 2.5535900592803955, 2.5308666229248047, 2.5088438987731934, 2.4875099658966064, 2.4668517112731934, 2.44685435295105, 2.427501916885376, 2.4087774753570557, 2.3906636238098145, 2.3731420040130615, 2.356194496154785, 2.3398025035858154, 2.3239476680755615, 2.3086113929748535, 2.293775796890259, 2.2794225215911865, 2.2655346393585205, 2.2520945072174072, 2.2390856742858887, 2.226491928100586, 2.2142975330352783, 2.202486991882324, 2.1910457611083984, 2.179959774017334, 2.169215202331543, 2.158798933029175, 2.148698329925537, 2.1389009952545166, 2.1293957233428955, 2.120170831680298, 2.111215829849243, 2.10252046585083, 2.0940747261047363, 2.085869073867798, 2.077894926071167, 2.070142984390259, 2.062605619430542, 2.055274248123169, 2.0481417179107666, 2.041200637817383, 2.0344438552856445, 2.027865171432495, 2.0214576721191406, 2.0152156352996826, -2.0091328620910645, -2.0152156352996826, -2.0214576721191406, -2.027865171432495, -2.0344438552856445, -2.041200637817383, -2.0481417179107666, -2.055274248123169, -2.062605619430542, -2.070142984390259, -2.077894926071167, -2.085869073867798, -2.0940747261047363, -2.10252046585083, -2.111215829849243, -2.120170831680298, -2.1293957233428955, -2.1389009952545166, -2.148698329925537, -2.158798933029175, -2.169215202331543, -2.179959774017334, -2.1910457611083984, -2.202486991882324, -2.2142975330352783, -2.226491928100586, -2.2390856742858887, -2.2520945072174072, -2.2655346393585205, -2.2794225215911865, -2.293775796890259, -2.3086113929748535, -2.3239476680755615, -2.3398025035858154, -2.356194496154785, -2.3731420040130615, -2.3906636238098145, -2.4087774753570557, -2.427501916885376, -2.44685435295105, -2.4668517112731934, -2.4875099658966064, -2.5088438987731934, -2.5308666229248047, -2.5535900592803955, -2.5770232677459717, -2.601173162460327, -2.6260435581207275, -2.6516354084014893, -2.677945137023926, -2.704965591430664, -2.732684850692749, -2.7610862255096436, -2.7901477813720703, -2.8198421001434326, -2.8501358032226562, -2.8809902667999268, -2.912360668182373, -2.944197177886963, -2.9764440059661865, -3.0090410709381104, -3.041923999786377, -3.0750246047973633, -3.108271598815918, 3.1415927410125732, 3.107123613357544, 3.0727362632751465, 3.038511037826538, 3.004526376724243, 2.9708573818206787, 2.937574625015259, 2.9047439098358154, 2.872425079345703, 2.840672492980957, 2.80953311920166, 2.779048442840576, 2.7492525577545166, 2.7201733589172363, 2.691833019256592, 2.6642472743988037, 2.6374266147613525, 2.6113767623901367, 2.5860989093780518, 2.5615899562835693, 2.5378432273864746, 2.5148496627807617, 2.4925971031188965, 2.4710710048675537, 2.4502556324005127, 2.430133581161499, 2.4106860160827637, 2.3918936252593994, 2.373736619949341, 2.356194496154785, 2.339246988296509, 2.322873592376709, 2.307053804397583, 2.2917675971984863, 2.2769954204559326, 2.2627177238464355, 2.248915672302246, 2.2355709075927734, 2.222665548324585, 2.2101821899414062, 2.1981046199798584, 2.1864161491394043, 2.1751017570495605, 2.1641464233398438, 2.153535842895508, 2.143256187438965, 2.1332943439483643, 2.1236374378204346, 2.114274024963379, 2.105191707611084, 2.0963802337646484, 2.0878283977508545, 2.07952618598938, 2.0714640617370605, 2.0636327266693115, 2.056023359298706, 2.0486273765563965, 2.0414369106292725, 2.0344438552856445, 2.0276412963867188, 2.021021842956543, 2.0145790576934814, 2.0083060264587402, 2.002197027206421, -1.9962459802627563, -2.002197027206421, -2.0083060264587402, -2.0145790576934814, -2.021021842956543, -2.0276412963867188, -2.0344438552856445, -2.0414369106292725, -2.0486273765563965, -2.056023359298706, -2.0636327266693115, -2.0714640617370605, -2.07952618598938, -2.0878283977508545, -2.0963802337646484, -2.105191707611084, -2.114274024963379, -2.1236374378204346, -2.1332943439483643, -2.143256187438965, -2.153535842895508, -2.1641464233398438, -2.1751017570495605, -2.1864161491394043, -2.1981046199798584, -2.2101821899414062, -2.222665548324585, -2.2355709075927734, -2.248915672302246, -2.2627177238464355, -2.2769954204559326, -2.2917675971984863, -2.307053804397583, -2.322873592376709, -2.339246988296509, -2.356194496154785, -2.373736619949341, -2.3918936252593994, -2.4106860160827637, -2.430133581161499, -2.4502556324005127, -2.4710710048675537, -2.4925971031188965, -2.5148496627807617, -2.5378432273864746, -2.5615899562835693, -2.5860989093780518, -2.6113767623901367, -2.6374266147613525, -2.6642472743988037, -2.691833019256592, -2.7201733589172363, -2.7492525577545166, -2.779048442840576, -2.80953311920166, -2.840672492980957, -2.872425079345703, -2.9047439098358154, -2.937574625015259, -2.9708573818206787, -3.004526376724243, -3.038511037826538, -3.0727362632751465, -3.107123613357544, 3.1415927410125732, 3.105893611907959, 3.0702850818634033, 3.0348570346832275, 2.9996955394744873, 2.964883804321289, 2.930499315261841, 2.8966140747070312, 2.863292932510376, 2.830594301223755, 2.7985687255859375, 2.767259120941162, 2.7367007732391357, 2.7069225311279297, 2.677945137023926, 2.6497833728790283, 2.6224465370178223, 2.595937490463257, 2.5702552795410156, 2.545393466949463, 2.521343231201172, 2.498091459274292, 2.475623369216919, 2.453921318054199, 2.432966470718384, 2.4127378463745117, 2.393214702606201, 2.3743743896484375, 2.356194496154785, 2.3386523723602295, 2.321725368499756, 2.3053908348083496, 2.289626359939575, 2.2744100093841553, 2.259720802307129, 2.245537281036377, 2.231839418411255, 2.2186076641082764, 2.2058229446411133, 2.193467140197754, 2.1815223693847656, 2.1699717044830322, 2.158798933029175, 2.1479885578155518, 2.1375255584716797, 2.1273956298828125, 2.1175851821899414, 2.108081102371216, 2.0988707542419434, 2.089942455291748, 2.081284761428833, 2.0728864669799805, 2.0647377967834473, 2.056828260421753, 2.0491487979888916, 2.0416901111602783, 2.0344438552856445, 2.0274016857147217, 2.0205559730529785, 2.0138988494873047, 2.0074234008789062, 2.0011229515075684, 1.9949907064437866, 1.9890207052230835, -1.9832067489624023, -1.9890207052230835, -1.9949907064437866, -2.0011229515075684, -2.0074234008789062, -2.0138988494873047, -2.0205559730529785, -2.0274016857147217, -2.0344438552856445, -2.0416901111602783, -2.0491487979888916, -2.056828260421753, -2.0647377967834473, -2.0728864669799805, -2.081284761428833, -2.089942455291748, -2.0988707542419434, -2.108081102371216, -2.1175851821899414, -2.1273956298828125, -2.1375255584716797, -2.1479885578155518, -2.158798933029175, -2.1699717044830322, -2.1815223693847656, -2.193467140197754, -2.2058229446411133, -2.2186076641082764, -2.231839418411255, -2.245537281036377, -2.259720802307129, -2.2744100093841553, -2.289626359939575, -2.3053908348083496, -2.321725368499756, -2.3386523723602295, -2.356194496154785, -2.3743743896484375, -2.393214702606201, -2.4127378463745117, -2.432966470718384, -2.453921318054199, -2.475623369216919, -2.498091459274292, -2.521343231201172, -2.545393466949463, -2.5702552795410156, -2.595937490463257, -2.6224465370178223, -2.6497833728790283, -2.677945137023926, -2.7069225311279297, -2.7367007732391357, -2.767259120941162, -2.7985687255859375, -2.830594301223755, -2.863292932510376, -2.8966140747070312, -2.930499315261841, -2.964883804321289, -2.9996955394744873, -3.0348570346832275, -3.0702850818634033, -3.105893611907959, 3.1415927410125732, 3.1045725345611572, 3.0676536560058594, 3.030935525894165, 2.994514226913452, 2.958481788635254, 2.9229238033294678, 2.887918472290039, 2.8535373210906982, 2.8198421001434326, 2.7868869304656982, 2.7547168731689453, 2.7233684062957764, 2.6928694248199463, 2.6632401943206787, 2.6344940662384033, 2.606637477874756, 2.5796711444854736, 2.5535900592803955, 2.5283854007720947, 2.5040438175201416, 2.4805495738983154, 2.457883358001709, 2.4360244274139404, 2.414950370788574, 2.394637107849121, 2.3750600814819336, 2.356194496154785, 2.338014602661133, 2.320495367050171, 2.3036115169525146, 2.2873380184173584, 2.271650791168213, 2.256525754928589, 2.2419402599334717, 2.2278711795806885, 2.2142975330352783, 2.201197862625122, 2.188552141189575, 2.1763410568237305, 2.164546012878418, 2.153149366378784, 2.1421337127685547, 2.131483316421509, 2.1211822032928467, 2.111215829849243, 2.101569890975952, 2.092230796813965, 2.0831856727600098, 2.074422597885132, 2.065929651260376, 2.0576956272125244, 2.0497100353240967, 2.0419626235961914, 2.0344438552856445, 2.0271449089050293, 2.0200564861297607, 2.0131704807281494, 2.006479263305664, 1.9999748468399048, 1.993650197982788, 1.9874986410140991, 1.981513261795044, 1.975688099861145, -1.9700170755386353, -1.975688099861145, -1.981513261795044, -1.9874986410140991, -1.993650197982788, -1.9999748468399048, -2.006479263305664, -2.0131704807281494, -2.0200564861297607, -2.0271449089050293, -2.0344438552856445, -2.0419626235961914, -2.0497100353240967, -2.0576956272125244, -2.065929651260376, -2.074422597885132, -2.0831856727600098, -2.092230796813965, -2.101569890975952, -2.111215829849243, -2.1211822032928467, -2.131483316421509, -2.1421337127685547, -2.153149366378784, -2.164546012878418, -2.1763410568237305, -2.188552141189575, -2.201197862625122, -2.2142975330352783, -2.2278711795806885, -2.2419402599334717, -2.256525754928589, -2.271650791168213, -2.2873380184173584, -2.3036115169525146, -2.320495367050171, -2.338014602661133, -2.356194496154785, -2.3750600814819336, -2.394637107849121, -2.414950370788574, -2.4360244274139404, -2.457883358001709, -2.4805495738983154, -2.5040438175201416, -2.5283854007720947, -2.5535900592803955, -2.5796711444854736, -2.606637477874756, -2.6344940662384033, -2.6632401943206787, -2.6928694248199463, -2.7233684062957764, -2.7547168731689453, -2.7868869304656982, -2.8198421001434326, -2.8535373210906982, -2.887918472290039, -2.9229238033294678, -2.958481788635254, -2.994514226913452, -3.030935525894165, -3.0676536560058594, -3.1045725345611572, 3.1415927410125732, 3.1031501293182373, 3.0648207664489746, 3.0267159938812256, 2.988943338394165, 2.9516043663024902, 2.9147937297821045, 2.8785979747772217, 2.8430936336517334, 2.8083484172821045, 2.774418830871582, 2.741352081298828, 2.7091848850250244, 2.677945137023926, 2.647651195526123, 2.618314266204834, 2.589937686920166, 2.562518358230591, 2.53604793548584, 2.5105133056640625, 2.4858970642089844, 2.462178945541382, 2.439335823059082, 2.4173426628112793, 2.3961732387542725, 2.3757998943328857, 2.356194496154785, 2.3373289108276367, 2.319174289703369, 2.3017029762268066, 2.2848870754241943, 2.2686991691589355, 2.25311279296875, 2.238102436065674, 2.2236430644989014, 2.2097103595733643, 2.1962814331054688, 2.1833338737487793, 2.170846462249756, 2.158798933029175, 2.1471714973449707, 2.1359457969665527, 2.125103712081909, 2.114628791809082, 2.1045045852661133, 2.0947155952453613, 2.085247755050659, 2.0760865211486816, 2.0672190189361572, 2.0586328506469727, 2.0503156185150146, 2.0422563552856445, 2.0344438552856445, 2.0268683433532715, 2.019519567489624, 2.0123887062072754, 2.0054664611816406, 1.9987448453903198, 1.9922155141830444, 1.9858710765838623, 1.9797041416168213, 1.973707914352417, 1.9678757190704346, 1.962201476097107, -1.9566789865493774, -1.962201476097107, -1.9678757190704346, -1.973707914352417, -1.9797041416168213, -1.9858710765838623, -1.9922155141830444, -1.9987448453903198, -2.0054664611816406, -2.0123887062072754, -2.019519567489624, -2.0268683433532715, -2.0344438552856445, -2.0422563552856445, -2.0503156185150146, -2.0586328506469727, -2.0672190189361572, -2.0760865211486816, -2.085247755050659, -2.0947155952453613, -2.1045045852661133, -2.114628791809082, -2.125103712081909, -2.1359457969665527, -2.1471714973449707, -2.158798933029175, -2.170846462249756, -2.1833338737487793, -2.1962814331054688, -2.2097103595733643, -2.2236430644989014, -2.238102436065674, -2.25311279296875, -2.2686991691589355, -2.2848870754241943, -2.3017029762268066, -2.319174289703369, -2.3373289108276367, -2.356194496154785, -2.3757998943328857, -2.3961732387542725, -2.4173426628112793, -2.439335823059082, -2.462178945541382, -2.4858970642089844, -2.5105133056640625, -2.53604793548584, -2.562518358230591, -2.589937686920166, -2.618314266204834, -2.647651195526123, -2.677945137023926, -2.7091848850250244, -2.741352081298828, -2.774418830871582, -2.8083484172821045, -2.8430936336517334, -2.8785979747772217, -2.9147937297821045, -2.9516043663024902, -2.988943338394165, -3.0267159938812256, -3.0648207664489746, -3.1031501293182373, 3.1415927410125732, 3.101613998413086, 3.061762571334839, 3.0221636295318604, 2.9829373359680176, 2.944197177886963, 2.9060475826263428, 2.868583917617798, 2.8318896293640137, 2.796036958694458, 2.7610862255096436, 2.727085828781128, 2.694072723388672, 2.6620733737945557, 2.6311042308807373, 2.601173162460327, 2.572279453277588, 2.5444159507751465, 2.5175695419311523, 2.4917221069335938, 2.4668517112731934, 2.4429328441619873, 2.4199378490448, 2.3978371620178223, 2.3765997886657715, 2.356194496154785, 2.3365890979766846, 2.317751884460449, 2.2996511459350586, 2.2822554111480713, 2.2655346393585205, 2.2494587898254395, 2.233999252319336, 2.219128370285034, 2.2048189640045166, 2.1910457611083984, 2.177783966064453, 2.1650099754333496, 2.1527013778686523, 2.140836715698242, 2.1293957233428955, 2.118358612060547, 2.1077070236206055, 2.097423553466797, 2.087491512298584, 2.077894926071167, 2.0686187744140625, 2.0596487522125244, 2.050971269607544, 2.042573928833008, 2.0344438552856445, 2.0265700817108154, 2.0189414024353027, 2.011547088623047, 2.004377841949463, 1.997423768043518, 1.9906762838363647, 1.9841266870498657, 1.9777671098709106, 1.9715898036956787, 1.9655874967575073, 1.959753155708313, 1.9540804624557495, 1.9485629796981812, -1.9431947469711304, -1.9485629796981812, -1.9540804624557495, -1.959753155708313, -1.9655874967575073, -1.9715898036956787, -1.9777671098709106, -1.9841266870498657, -1.9906762838363647, -1.997423768043518, -2.004377841949463, -2.011547088623047, -2.0189414024353027, -2.0265700817108154, -2.0344438552856445, -2.042573928833008, -2.050971269607544, -2.0596487522125244, -2.0686187744140625, -2.077894926071167, -2.087491512298584, -2.097423553466797, -2.1077070236206055, -2.118358612060547, -2.1293957233428955, -2.140836715698242, -2.1527013778686523, -2.1650099754333496, -2.177783966064453, -2.1910457611083984, -2.2048189640045166, -2.219128370285034, -2.233999252319336, -2.2494587898254395, -2.2655346393585205, -2.2822554111480713, -2.2996511459350586, -2.317751884460449, -2.3365890979766846, -2.356194496154785, -2.3765997886657715, -2.3978371620178223, -2.4199378490448, -2.4429328441619873, -2.4668517112731934, -2.4917221069335938, -2.5175695419311523, -2.5444159507751465, -2.572279453277588, -2.601173162460327, -2.6311042308807373, -2.6620733737945557, -2.694072723388672, -2.727085828781128, -2.7610862255096436, -2.796036958694458, -2.8318896293640137, -2.868583917617798, -2.9060475826263428, -2.944197177886963, -2.9829373359680176, -3.0221636295318604, -3.061762571334839, -3.101613998413086, 3.1415927410125732, 3.099950075149536, 3.0584514141082764, 3.017237663269043, 2.9764440059661865, 2.936197280883789, 2.8966140747070312, 2.8577985763549805, 2.8198421001434326, 2.7828218936920166, 2.7468016147613525, 2.7118303775787354, 2.677945137023926, 2.645169973373413, 2.613518238067627, 2.582993268966675, 2.5535900592803955, 2.5252957344055176, 2.498091459274292, 2.4719536304473877, 2.44685435295105, 2.422762632369995, 2.3996453285217285, 2.3774678707122803, 2.356194496154785, 2.335789203643799, 2.316215753555298, 2.297438621520996, 2.2794225215911865, 2.2621333599090576, 2.245537281036377, 2.229602336883545, 2.2142975330352783, 2.1995925903320312, 2.1854593753814697, 2.171869993209839, 2.158798933029175, 2.1462209224700928, 2.134112596511841, 2.1224513053894043, 2.111215829849243, 2.100385904312134, 2.089942455291748, 2.079867124557495, 2.070142984390259, 2.060753583908081, 2.0516836643218994, 2.0429182052612305, 2.0344438552856445, 2.026247501373291, 2.0183162689208984, 2.010638952255249, 2.003204107284546, 1.9960013628005981, 1.9890207052230835, 1.982252597808838, 1.975688099861145, 1.9693187475204468, 1.9631364345550537, 1.9571335315704346, 1.9513026475906372, 1.9456369876861572, 1.9401299953460693, 1.9347752332687378, -1.9295669794082642, -1.9347752332687378, -1.9401299953460693, -1.9456369876861572, -1.9513026475906372, -1.9571335315704346, -1.9631364345550537, -1.9693187475204468, -1.975688099861145, -1.982252597808838, -1.9890207052230835, -1.9960013628005981, -2.003204107284546, -2.010638952255249, -2.0183162689208984, -2.026247501373291, -2.0344438552856445, -2.0429182052612305, -2.0516836643218994, -2.060753583908081, -2.070142984390259, -2.079867124557495, -2.089942455291748, -2.100385904312134, -2.111215829849243, -2.1224513053894043, -2.134112596511841, -2.1462209224700928, -2.158798933029175, -2.171869993209839, -2.1854593753814697, -2.1995925903320312, -2.2142975330352783, -2.229602336883545, -2.245537281036377, -2.2621333599090576, -2.2794225215911865, -2.297438621520996, -2.316215753555298, -2.335789203643799, -2.356194496154785, -2.3774678707122803, -2.3996453285217285, -2.422762632369995, -2.44685435295105, -2.4719536304473877, -2.498091459274292, -2.5252957344055176, -2.5535900592803955, -2.582993268966675, -2.613518238067627, -2.645169973373413, -2.677945137023926, -2.7118303775787354, -2.7468016147613525, -2.7828218936920166, -2.8198421001434326, -2.8577985763549805, -2.8966140747070312, -2.936197280883789, -2.9764440059661865, -3.017237663269043, -3.0584514141082764, -3.099950075149536, 3.1415927410125732, 3.098141670227051, 3.054854393005371, 3.011890172958374, 2.9694018363952637, 2.9275319576263428, 2.8864102363586426, 2.846151828765869, 2.8068559169769287, 2.7686049938201904, 2.7314653396606445, 2.6954870223999023, 2.660705327987671, 2.627141237258911, 2.594803810119629, 2.563690662384033, 2.5337905883789062, 2.50508451461792, 2.477546453475952, 2.451146125793457, 2.425848960876465, 2.4016177654266357, 2.378412961959839, 2.356194496154785, 2.33492112159729, 2.314551830291748, 2.295046329498291, 2.27636456489563, 2.258467674255371, 2.2413179874420166, 2.224879026412964, 2.209116220474243, 2.193995714187622, 2.179485559463501, 2.165555477142334, 2.15217661857605, 2.1393208503723145, 2.126962661743164, 2.115076780319214, 2.10364031791687, 2.092630624771118, 2.082026958465576, 2.071809768676758, 2.061959981918335, 2.052459955215454, 2.0432932376861572, 2.0344438552856445, 2.0258970260620117, 2.017638683319092, 2.009655714035034, 2.0019350051879883, 1.9944652318954468, 1.9872349500656128, 1.9802335500717163, 1.973451018333435, 1.966877818107605, 1.9605048894882202, 1.9543238878250122, 1.9483264684677124, 1.9425052404403687, 1.9368528127670288, 1.931362271308899, 1.9260271787643433, 1.9208412170410156, -1.915798544883728, -1.9208412170410156, -1.9260271787643433, -1.931362271308899, -1.9368528127670288, -1.9425052404403687, -1.9483264684677124, -1.9543238878250122, -1.9605048894882202, -1.966877818107605, -1.973451018333435, -1.9802335500717163, -1.9872349500656128, -1.9944652318954468, -2.0019350051879883, -2.009655714035034, -2.017638683319092, -2.0258970260620117, -2.0344438552856445, -2.0432932376861572, -2.052459955215454, -2.061959981918335, -2.071809768676758, -2.082026958465576, -2.092630624771118, -2.10364031791687, -2.115076780319214, -2.126962661743164, -2.1393208503723145, -2.15217661857605, -2.165555477142334, -2.179485559463501, -2.193995714187622, -2.209116220474243, -2.224879026412964, -2.2413179874420166, -2.258467674255371, -2.27636456489563, -2.295046329498291, -2.314551830291748, -2.33492112159729, -2.356194496154785, -2.378412961959839, -2.4016177654266357, -2.425848960876465, -2.451146125793457, -2.477546453475952, -2.50508451461792, -2.5337905883789062, -2.563690662384033, -2.594803810119629, -2.627141237258911, -2.660705327987671, -2.6954870223999023, -2.7314653396606445, -2.7686049938201904, -2.8068559169769287, -2.846151828765869, -2.8864102363586426, -2.9275319576263428, -2.9694018363952637, -3.011890172958374, -3.054854393005371, -3.098141670227051, 3.1415927410125732, 3.0961694717407227, 3.0509328842163086, 3.0060648918151855, 2.9617390632629395, 2.9181160926818848, 2.875340700149536, 2.8335399627685547, 2.7928216457366943, 2.7532739639282227, 2.7149651050567627, 2.677945137023926, 2.6422460079193115, 2.607884407043457, 2.5748634338378906, 2.5431737899780273, 2.512796401977539, 2.483704090118408, 2.4558632373809814, 2.4292349815368652, 2.403777599334717, 2.379446029663086, 2.356194496154785, 2.3339760303497314, 2.312743663787842, 2.2924511432647705, 2.2730531692504883, 2.2545056343078613, 2.2367656230926514, 2.219791889190674, 2.203545093536377, 2.187987804412842, 2.173083782196045, 2.158798933029175, 2.1451010704040527, 2.1319596767425537, 2.1193456649780273, 2.107231855392456, 2.0955920219421387, 2.084402322769165, 2.0736396312713623, 2.063282012939453, 2.053309679031372, 2.0437028408050537, 2.0344438552856445, 2.025515556335449, 2.016901969909668, 2.008587598800659, 2.000558614730835, 1.992801308631897, 1.9853031635284424, 1.9780521392822266, 1.9710370302200317, 1.9642469882965088, 1.9576719999313354, 1.9513026475906372, 1.9451299905776978, 1.9391452074050903, 1.9333405494689941, 1.9277082681655884, 1.9222410917282104, 1.9169323444366455, 1.9117752313613892, 1.9067639112472534, -1.9018924236297607, -1.9067639112472534, -1.9117752313613892, -1.9169323444366455, -1.9222410917282104, -1.9277082681655884, -1.9333405494689941, -1.9391452074050903, -1.9451299905776978, -1.9513026475906372, -1.9576719999313354, -1.9642469882965088, -1.9710370302200317, -1.9780521392822266, -1.9853031635284424, -1.992801308631897, -2.000558614730835, -2.008587598800659, -2.016901969909668, -2.025515556335449, -2.0344438552856445, -2.0437028408050537, -2.053309679031372, -2.063282012939453, -2.0736396312713623, -2.084402322769165, -2.0955920219421387, -2.107231855392456, -2.1193456649780273, -2.1319596767425537, -2.1451010704040527, -2.158798933029175, -2.173083782196045, -2.187987804412842, -2.203545093536377, -2.219791889190674, -2.2367656230926514, -2.2545056343078613, -2.2730531692504883, -2.2924511432647705, -2.312743663787842, -2.3339760303497314, -2.356194496154785, -2.379446029663086, -2.403777599334717, -2.4292349815368652, -2.4558632373809814, -2.483704090118408, -2.512796401977539, -2.5431737899780273, -2.5748634338378906, -2.607884407043457, -2.6422460079193115, -2.677945137023926, -2.7149651050567627, -2.7532739639282227, -2.7928216457366943, -2.8335399627685547, -2.875340700149536, -2.9181160926818848, -2.9617390632629395, -3.0060648918151855, -3.0509328842163086, -3.0961694717407227, 3.1415927410125732, 3.0940096378326416, 3.0466408729553223, 2.9996955394744873, 2.953371047973633, 2.9078495502471924, 2.863292932510376, 2.8198421001434326, 2.777613639831543, 2.7367007732391357, 2.6971733570098877, 2.6590793132781982, 2.6224465370178223, 2.587285041809082, 2.5535900592803955, 2.521343231201172, 2.490515947341919, 2.461071491241455, 2.432966470718384, 2.4061529636383057, 2.380579948425293, 2.356194496154785, 2.3329429626464844, 2.3107712268829346, 2.289626359939575, 2.269456148147583, 2.2502100467681885, 2.231839418411255, 2.2142975330352783, 2.1975393295288086, 2.1815223693847656, 2.166206121444702, 2.151552677154541, 2.1375255584716797, 2.1240906715393066, 2.111215829849243, 2.0988707542419434, 2.087027072906494, 2.075657606124878, 2.0647377967834473, 2.054243326187134, 2.04415225982666, 2.0344438552856445, 2.0250983238220215, 2.0160973072052, 2.0074234008789062, 1.9990605115890503, 1.9909930229187012, 1.9832067489624023, 1.975688099861145, 1.9684243202209473, 1.9614033699035645, 1.9546139240264893, 1.9480453729629517, 1.9416875839233398, 1.9355311393737793, 1.9295669794082642, 1.9237867593765259, 1.9181822538375854, 1.9127461910247803, 1.9074711799621582, 1.9023505449295044, 1.8973777294158936, 1.8925468921661377, -1.8878520727157593, -1.8925468921661377, -1.8973777294158936, -1.9023505449295044, -1.9074711799621582, -1.9127461910247803, -1.9181822538375854, -1.9237867593765259, -1.9295669794082642, -1.9355311393737793, -1.9416875839233398, -1.9480453729629517, -1.9546139240264893, -1.9614033699035645, -1.9684243202209473, -1.975688099861145, -1.9832067489624023, -1.9909930229187012, -1.9990605115890503, -2.0074234008789062, -2.0160973072052, -2.0250983238220215, -2.0344438552856445, -2.04415225982666, -2.054243326187134, -2.0647377967834473, -2.075657606124878, -2.087027072906494, -2.0988707542419434, -2.111215829849243, -2.1240906715393066, -2.1375255584716797, -2.151552677154541, -2.166206121444702, -2.1815223693847656, -2.1975393295288086, -2.2142975330352783, -2.231839418411255, -2.2502100467681885, -2.269456148147583, -2.289626359939575, -2.3107712268829346, -2.3329429626464844, -2.356194496154785, -2.380579948425293, -2.4061529636383057, -2.432966470718384, -2.461071491241455, -2.490515947341919, -2.521343231201172, -2.5535900592803955, -2.587285041809082, -2.6224465370178223, -2.6590793132781982, -2.6971733570098877, -2.7367007732391357, -2.777613639831543, -2.8198421001434326, -2.863292932510376, -2.9078495502471924, -2.953371047973633, -2.9996955394744873, -3.0466408729553223, -3.0940096378326416, 3.1415927410125732, 3.0916342735290527, 3.041923999786377, 2.9927027225494385, 2.944197177886963, 2.8966140747070312, 2.8501358032226562, 2.804917812347412, 2.7610862255096436, 2.7187387943267822, 2.677945137023926, 2.638749361038208, 2.601173162460327, 2.5652174949645996, 2.5308666229248047, 2.498091459274292, 2.4668517112731934, 2.437098503112793, 2.4087774753570557, 2.3818299770355225, 2.356194496154785, 2.3318090438842773, 2.3086113929748535, 2.2865400314331055, 2.2655346393585205, 2.245537281036377, 2.226491928100586, 2.2083451747894287, 2.1910457611083984, 2.1745457649230957, 2.158798933029175, 2.1437625885009766, 2.1293957233428955, 2.1156601905822754, 2.10252046585083, 2.089942455291748, 2.077894926071167, 2.066348075866699, 2.055274248123169, 2.044647693634033, 2.0344438552856445, 2.0246403217315674, 2.0152156352996826, 2.0061495304107666, 1.997423768043518, 1.9890207052230835, 1.9809236526489258, 1.973117470741272, 1.9655874967575073, 1.958320140838623, 1.9513026475906372, 1.9445230960845947, 1.9379701614379883, 1.9316331148147583, 1.9255019426345825, 1.919567346572876, 1.9138202667236328, 1.9082523584365845, 1.9028557538986206, 1.8976229429244995, 1.8925468921661377, 1.8876208066940308, 1.882838487625122, 1.8781938552856445, -1.8736811876296997, -1.8781938552856445, -1.882838487625122, -1.8876208066940308, -1.8925468921661377, -1.8976229429244995, -1.9028557538986206, -1.9082523584365845, -1.9138202667236328, -1.919567346572876, -1.9255019426345825, -1.9316331148147583, -1.9379701614379883, -1.9445230960845947, -1.9513026475906372, -1.958320140838623, -1.9655874967575073, -1.973117470741272, -1.9809236526489258, -1.9890207052230835, -1.997423768043518, -2.0061495304107666, -2.0152156352996826, -2.0246403217315674, -2.0344438552856445, -2.044647693634033, -2.055274248123169, -2.066348075866699, -2.077894926071167, -2.089942455291748, -2.10252046585083, -2.1156601905822754, -2.1293957233428955, -2.1437625885009766, -2.158798933029175, -2.1745457649230957, -2.1910457611083984, -2.2083451747894287, -2.226491928100586, -2.245537281036377, -2.2655346393585205, -2.2865400314331055, -2.3086113929748535, -2.3318090438842773, -2.356194496154785, -2.3818299770355225, -2.4087774753570557, -2.437098503112793, -2.4668517112731934, -2.498091459274292, -2.5308666229248047, -2.5652174949645996, -2.601173162460327, -2.638749361038208, -2.677945137023926, -2.7187387943267822, -2.7610862255096436, -2.804917812347412, -2.8501358032226562, -2.8966140747070312, -2.944197177886963, -2.9927027225494385, -3.041923999786377, -3.0916342735290527, 3.1415927410125732, 3.0890095233917236, 3.0367157459259033, 2.9849908351898193, 2.934096336364746, 2.8842689990997314, 2.8357138633728027, 2.788602352142334, 2.743070125579834, 2.699218511581421, 2.6571147441864014, 2.6167969703674316, 2.5782763957977295, 2.5415425300598145, 2.506565809249878, 2.4733033180236816, 2.441699743270874, 2.4116930961608887, 2.3832149505615234, 2.356194496154785, 2.330559015274048, 2.3062360286712646, 2.283154010772705, 2.2612428665161133, 2.2404353618621826, 2.2206668853759766, 2.201875686645508, 2.1840035915374756, 2.1669955253601074, 2.150799036026001, 2.1353657245635986, 2.120649576187134, 2.106607675552368, 2.0931997299194336, 2.0803885459899902, 2.06813907623291, 2.0564184188842773, 2.045196294784546, 2.0344438552856445, 2.024135112762451, 2.014244556427002, 2.0047497749328613, 1.9956284761428833, 1.9868608713150024, 1.9784278869628906, 1.9703118801116943, 1.962496280670166, 1.9549657106399536, 1.947705626487732, 1.9407024383544922, 1.9339433908462524, 1.927416443824768, 1.9211105108261108, 1.9150149822235107, 1.909119963645935, 1.9034160375595093, 1.8978943824768066, 1.8925468921661377, 1.8873655796051025, 1.8823431730270386, 1.8774726390838623, 1.872747540473938, 1.8681614398956299, 1.863708734512329, -1.8593837022781372, -1.863708734512329, -1.8681614398956299, -1.872747540473938, -1.8774726390838623, -1.8823431730270386, -1.8873655796051025, -1.8925468921661377, -1.8978943824768066, -1.9034160375595093, -1.909119963645935, -1.9150149822235107, -1.9211105108261108, -1.927416443824768, -1.9339433908462524, -1.9407024383544922, -1.947705626487732, -1.9549657106399536, -1.962496280670166, -1.9703118801116943, -1.9784278869628906, -1.9868608713150024, -1.9956284761428833, -2.0047497749328613, -2.014244556427002, -2.024135112762451, -2.0344438552856445, -2.045196294784546, -2.0564184188842773, -2.06813907623291, -2.0803885459899902, -2.0931997299194336, -2.106607675552368, -2.120649576187134, -2.1353657245635986, -2.150799036026001, -2.1669955253601074, -2.1840035915374756, -2.201875686645508, -2.2206668853759766, -2.2404353618621826, -2.2612428665161133, -2.283154010772705, -2.3062360286712646, -2.330559015274048, -2.356194496154785, -2.3832149505615234, -2.4116930961608887, -2.441699743270874, -2.4733033180236816, -2.506565809249878, -2.5415425300598145, -2.5782763957977295, -2.6167969703674316, -2.6571147441864014, -2.699218511581421, -2.743070125579834, -2.788602352142334, -2.8357138633728027, -2.8842689990997314, -2.934096336364746, -2.9849908351898193, -3.0367157459259033, -3.0890095233917236, 3.1415927410125732, 3.0860941410064697, 3.030935525894165, 2.9764440059661865, 2.9229238033294678, 2.870645761489868, 2.8198421001434326, 2.7707014083862305, 2.7233684062957764, 2.677945137023926, 2.6344940662384033, 2.593043327331543, 2.5535900592803955, 2.5161075592041016, 2.4805495738983154, 2.44685435295105, 2.414950370788574, 2.384758234024048, 2.356194496154785, 2.329174041748047, 2.3036115169525146, 2.2794225215911865, 2.256525754928589, 2.234842538833618, 2.2142975330352783, 2.194819450378418, 2.1763410568237305, 2.158798933029175, 2.1421337127685547, 2.1262900829315186, 2.111215829849243, 2.09686279296875, 2.0831856727600098, 2.070142984390259, 2.0576956272125244, 2.045807123184204, 2.0344438552856445, 2.0235748291015625, 2.0131704807281494, 2.003204107284546, 1.993650197982788, 1.9844855070114136, 1.975688099861145, 1.9672375917434692, 1.9591150283813477, 1.9513026475906372, 1.9437839984893799, 1.936543583869934, 1.9295669794082642, 1.9228405952453613, 1.9163519144058228, 1.9100888967514038, 1.9040405750274658, 1.8981965780258179, 1.8925468921661377, 1.8870824575424194, 1.8817945718765259, 1.8766752481460571, 1.8717166185379028, 1.86691153049469, 1.8622530698776245, 1.85773503780365, 1.8533512353897095, 1.8490959405899048, -1.844963788986206, -1.8490959405899048, -1.8533512353897095, -1.85773503780365, -1.8622530698776245, -1.86691153049469, -1.8717166185379028, -1.8766752481460571, -1.8817945718765259, -1.8870824575424194, -1.8925468921661377, -1.8981965780258179, -1.9040405750274658, -1.9100888967514038, -1.9163519144058228, -1.9228405952453613, -1.9295669794082642, -1.936543583869934, -1.9437839984893799, -1.9513026475906372, -1.9591150283813477, -1.9672375917434692, -1.975688099861145, -1.9844855070114136, -1.993650197982788, -2.003204107284546, -2.0131704807281494, -2.0235748291015625, -2.0344438552856445, -2.045807123184204, -2.0576956272125244, -2.070142984390259, -2.0831856727600098, -2.09686279296875, -2.111215829849243, -2.1262900829315186, -2.1421337127685547, -2.158798933029175, -2.1763410568237305, -2.194819450378418, -2.2142975330352783, -2.234842538833618, -2.256525754928589, -2.2794225215911865, -2.3036115169525146, -2.329174041748047, -2.356194496154785, -2.384758234024048, -2.414950370788574, -2.44685435295105, -2.4805495738983154, -2.5161075592041016, -2.5535900592803955, -2.593043327331543, -2.6344940662384033, -2.677945137023926, -2.7233684062957764, -2.7707014083862305, -2.8198421001434326, -2.870645761489868, -2.9229238033294678, -2.9764440059661865, -3.030935525894165, -3.0860941410064697, 3.1415927410125732, 3.082836866378784, 3.0244839191436768, 2.9669203758239746, 2.9105019569396973, 2.855541229248047, 2.802299976348877, 2.750985622406006, 2.7017500400543213, 2.654693365097046, 2.6098685264587402, 2.5672879219055176, 2.5269296169281006, 2.488745927810669, 2.4526681900024414, 2.4186131954193115, 2.386488199234009, 2.356194496154785, 2.3276307582855225, 2.3006958961486816, 2.2752904891967773, 2.2513175010681152, 2.228684902191162, 2.2073044776916504, 2.1870932579040527, 2.167973041534424, 2.1498706340789795, 2.1327178478240967, 2.1164512634277344, 2.1010119915008545, 2.0863454341888428, 2.0724003314971924, 2.0591301918029785, 2.0464916229248047, 2.0344438552856445, 2.0229501724243164, 2.0119757652282715, 2.0014889240264893, 1.9914597272872925, 1.981860876083374, 1.9726669788360596, 1.9638543128967285, 1.955401062965393, 1.947286605834961, 1.9394922256469727, 1.9320000410079956, 1.9247937202453613, 1.9178578853607178, 1.9111782312393188, 1.9047414064407349, 1.8985347747802734, 1.8925468921661377, 1.8867665529251099, 1.8811837434768677, 1.875788688659668, 1.8705724477767944, 1.8655264377593994, 1.8606427907943726, 1.8559141159057617, 1.8513331413269043, 1.846893310546875, 1.8425885438919067, 1.8384126424789429, 1.8343602418899536, -1.8304259777069092, -1.8343602418899536, -1.8384126424789429, -1.8425885438919067, -1.846893310546875, -1.8513331413269043, -1.8559141159057617, -1.8606427907943726, -1.8655264377593994, -1.8705724477767944, -1.875788688659668, -1.8811837434768677, -1.8867665529251099, -1.8925468921661377, -1.8985347747802734, -1.9047414064407349, -1.9111782312393188, -1.9178578853607178, -1.9247937202453613, -1.9320000410079956, -1.9394922256469727, -1.947286605834961, -1.955401062965393, -1.9638543128967285, -1.9726669788360596, -1.981860876083374, -1.9914597272872925, -2.0014889240264893, -2.0119757652282715, -2.0229501724243164, -2.0344438552856445, -2.0464916229248047, -2.0591301918029785, -2.0724003314971924, -2.0863454341888428, -2.1010119915008545, -2.1164512634277344, -2.1327178478240967, -2.1498706340789795, -2.167973041534424, -2.1870932579040527, -2.2073044776916504, -2.228684902191162, -2.2513175010681152, -2.2752904891967773, -2.3006958961486816, -2.3276307582855225, -2.356194496154785, -2.386488199234009, -2.4186131954193115, -2.4526681900024414, -2.488745927810669, -2.5269296169281006, -2.5672879219055176, -2.6098685264587402, -2.654693365097046, -2.7017500400543213, -2.750985622406006, -2.802299976348877, -2.855541229248047, -2.9105019569396973, -2.9669203758239746, -3.0244839191436768, -3.082836866378784, 3.1415927410125732, 3.0791738033294678, 3.017237663269043, 2.956244707107544, 2.8966140747070312, 2.838707685470581, 2.7828218936920166, 2.729182243347168, 2.677945137023926, 2.6292030811309814, 2.582993268966675, 2.5393052101135254, 2.498091459274292, 2.4592761993408203, 2.422762632369995, 2.388441324234009, 2.356194496154785, 2.3259007930755615, 2.297438621520996, 2.2706892490386963, 2.245537281036377, 2.2218730449676514, 2.1995925903320312, 2.178598403930664, 2.158798933029175, 2.1401095390319824, 2.1224513053894043, 2.1057515144348145, 2.089942455291748, 2.0749623775482178, 2.060753583908081, 2.0472638607025146, 2.0344438552856445, 2.022249460220337, 2.010638952255249, 1.9995743036270142, 1.9890207052230835, 1.9789453744888306, 1.9693187475204468, 1.9601130485534668, 1.9513026475906372, 1.9428640604019165, 1.9347752332687378, 1.927016019821167, 1.919567346572876, 1.9124118089675903, 1.9055331945419312, 1.898916244506836, 1.8925468921661377, 1.8864120244979858, 1.880499243736267, 1.8747972249984741, 1.8692952394485474, 1.8639832735061646, 1.8588517904281616, 1.8538920879364014, 1.8490959405899048, 1.844455599784851, 1.8399637937545776, 1.8356136083602905, 1.8313987255096436, 1.82731294631958, 1.8233505487442017, 1.819506287574768, -1.8157750368118286, -1.819506287574768, -1.8233505487442017, -1.82731294631958, -1.8313987255096436, -1.8356136083602905, -1.8399637937545776, -1.844455599784851, -1.8490959405899048, -1.8538920879364014, -1.8588517904281616, -1.8639832735061646, -1.8692952394485474, -1.8747972249984741, -1.880499243736267, -1.8864120244979858, -1.8925468921661377, -1.898916244506836, -1.9055331945419312, -1.9124118089675903, -1.919567346572876, -1.927016019821167, -1.9347752332687378, -1.9428640604019165, -1.9513026475906372, -1.9601130485534668, -1.9693187475204468, -1.9789453744888306, -1.9890207052230835, -1.9995743036270142, -2.010638952255249, -2.022249460220337, -2.0344438552856445, -2.0472638607025146, -2.060753583908081, -2.0749623775482178, -2.089942455291748, -2.1057515144348145, -2.1224513053894043, -2.1401095390319824, -2.158798933029175, -2.178598403930664, -2.1995925903320312, -2.2218730449676514, -2.245537281036377, -2.2706892490386963, -2.297438621520996, -2.3259007930755615, -2.356194496154785, -2.388441324234009, -2.422762632369995, -2.4592761993408203, -2.498091459274292, -2.5393052101135254, -2.582993268966675, -2.6292030811309814, -2.677945137023926, -2.729182243347168, -2.7828218936920166, -2.838707685470581, -2.8966140747070312, -2.956244707107544, -3.017237663269043, -3.0791738033294678, 3.1415927410125732, 3.0750246047973633, 3.0090410709381104, 2.944197177886963, 2.8809902667999268, 2.8198421001434326, 2.7610862255096436, 2.704965591430664, 2.6516354084014893, 2.601173162460327, 2.5535900592803955, 2.5088438987731934, 2.4668517112731934, 2.427501916885376, 2.3906636238098145, 2.356194496154785, 2.3239476680755615, 2.293775796890259, 2.2655346393585205, 2.2390856742858887, 2.2142975330352783, 2.1910457611083984, 2.169215202331543, 2.148698329925537, 2.1293957233428955, 2.111215829849243, 2.0940747261047363, 2.077894926071167, 2.062605619430542, 2.0481417179107666, 2.0344438552856445, 2.0214576721191406, 2.0091328620910645, 1.997423768043518, 1.9862884283065796, 1.975688099861145, 1.9655874967575073, 1.95595383644104, 1.9467573165893555, 1.9379701614379883, 1.9295669794082642, 1.9215242862701416, 1.9138202667236328, 1.9064348936080933, 1.8993494510650635, 1.8925468921661377, 1.886011004447937, 1.8797271251678467, 1.8736811876296997, 1.8678605556488037, 1.8622530698776245, 1.8568477630615234, 1.8516340255737305, 1.846602201461792, 1.8417432308197021, 1.8370484113693237, 1.8325098752975464, 1.8281199932098389, 1.8238719701766968, 1.8197590112686157, 1.8157750368118286, 1.8119139671325684, 1.8081705570220947, 1.8045395612716675, -1.8010159730911255, -1.8045395612716675, -1.8081705570220947, -1.8119139671325684, -1.8157750368118286, -1.8197590112686157, -1.8238719701766968, -1.8281199932098389, -1.8325098752975464, -1.8370484113693237, -1.8417432308197021, -1.846602201461792, -1.8516340255737305, -1.8568477630615234, -1.8622530698776245, -1.8678605556488037, -1.8736811876296997, -1.8797271251678467, -1.886011004447937, -1.8925468921661377, -1.8993494510650635, -1.9064348936080933, -1.9138202667236328, -1.9215242862701416, -1.9295669794082642, -1.9379701614379883, -1.9467573165893555, -1.95595383644104, -1.9655874967575073, -1.975688099861145, -1.9862884283065796, -1.997423768043518, -2.0091328620910645, -2.0214576721191406, -2.0344438552856445, -2.0481417179107666, -2.062605619430542, -2.077894926071167, -2.0940747261047363, -2.111215829849243, -2.1293957233428955, -2.148698329925537, -2.169215202331543, -2.1910457611083984, -2.2142975330352783, -2.2390856742858887, -2.2655346393585205, -2.293775796890259, -2.3239476680755615, -2.356194496154785, -2.3906636238098145, -2.427501916885376, -2.4668517112731934, -2.5088438987731934, -2.5535900592803955, -2.601173162460327, -2.6516354084014893, -2.704965591430664, -2.7610862255096436, -2.8198421001434326, -2.8809902667999268, -2.944197177886963, -3.0090410709381104, -3.0750246047973633, 3.1415927410125732, 3.0702850818634033, 2.9996955394744873, 2.930499315261841, 2.863292932510376, 2.7985687255859375, 2.7367007732391357, 2.677945137023926, 2.6224465370178223, 2.5702552795410156, 2.521343231201172, 2.475623369216919, 2.432966470718384, 2.393214702606201, 2.356194496154785, 2.321725368499756, 2.289626359939575, 2.259720802307129, 2.231839418411255, 2.2058229446411133, 2.1815223693847656, 2.158798933029175, 2.1375255584716797, 2.1175851821899414, 2.0988707542419434, 2.081284761428833, 2.0647377967834473, 2.0491487979888916, 2.0344438552856445, 2.0205559730529785, 2.0074234008789062, 1.9949907064437866, 1.9832067489624023, 1.9720251560211182, 1.9614033699035645, 1.9513026475906372, 1.9416875839233398, 1.9325255155563354, 1.9237867593765259, 1.9154436588287354, 1.9074711799621582, 1.899846076965332, 1.8925468921661377, 1.8855539560317993, 1.8788491487503052, 1.8724154233932495, 1.8662371635437012, 1.8602999448776245, 1.8545904159545898, 1.8490959405899048, 1.8438050746917725, 1.8387067317962646, 1.8337910175323486, 1.82904851436615, 1.8244704008102417, 1.820048451423645, 1.8157750368118286, 1.8116427659988403, 1.8076450824737549, 1.8037755489349365, 1.8000282049179077, 1.7963975667953491, 1.792878270149231, 1.789465308189392, -1.78615403175354, -1.789465308189392, -1.792878270149231, -1.7963975667953491, -1.8000282049179077, -1.8037755489349365, -1.8076450824737549, -1.8116427659988403, -1.8157750368118286, -1.820048451423645, -1.8244704008102417, -1.82904851436615, -1.8337910175323486, -1.8387067317962646, -1.8438050746917725, -1.8490959405899048, -1.8545904159545898, -1.8602999448776245, -1.8662371635437012, -1.8724154233932495, -1.8788491487503052, -1.8855539560317993, -1.8925468921661377, -1.899846076965332, -1.9074711799621582, -1.9154436588287354, -1.9237867593765259, -1.9325255155563354, -1.9416875839233398, -1.9513026475906372, -1.9614033699035645, -1.9720251560211182, -1.9832067489624023, -1.9949907064437866, -2.0074234008789062, -2.0205559730529785, -2.0344438552856445, -2.0491487979888916, -2.0647377967834473, -2.081284761428833, -2.0988707542419434, -2.1175851821899414, -2.1375255584716797, -2.158798933029175, -2.1815223693847656, -2.2058229446411133, -2.231839418411255, -2.259720802307129, -2.289626359939575, -2.321725368499756, -2.356194496154785, -2.393214702606201, -2.432966470718384, -2.475623369216919, -2.521343231201172, -2.5702552795410156, -2.6224465370178223, -2.677945137023926, -2.7367007732391357, -2.7985687255859375, -2.863292932510376, -2.930499315261841, -2.9996955394744873, -3.0702850818634033, 3.1415927410125732, 3.0648207664489746, 2.988943338394165, 2.9147937297821045, 2.8430936336517334, 2.774418830871582, 2.7091848850250244, 2.647651195526123, 2.589937686920166, 2.53604793548584, 2.4858970642089844, 2.439335823059082, 2.3961732387542725, 2.356194496154785, 2.319174289703369, 2.2848870754241943, 2.25311279296875, 2.2236430644989014, 2.1962814331054688, 2.170846462249756, 2.1471714973449707, 2.125103712081909, 2.1045045852661133, 2.085247755050659, 2.0672190189361572, 2.0503156185150146, 2.0344438552856445, 2.019519567489624, 2.0054664611816406, 1.9922155141830444, 1.9797041416168213, 1.9678757190704346, 1.9566789865493774, 1.9460670948028564, 1.935997724533081, 1.9264322519302368, 1.9173351526260376, 1.9086744785308838, 1.9004207849502563, 1.8925468921661377, 1.8850282430648804, 1.8778420686721802, 1.8709675073623657, 1.8643853664398193, 1.8580777645111084, 1.852028489112854, 1.8462224006652832, 1.840645432472229, 1.83528470993042, 1.8301280736923218, 1.8251644372940063, 1.8203833103179932, 1.8157750368118286, 1.8113305568695068, 1.8070416450500488, 1.8029001951217651, 1.7988989353179932, 1.7950310707092285, 1.791290044784546, 1.7876698970794678, 1.7841650247573853, 1.7807698249816895, 1.7774795293807983, 1.7742893695831299, -1.7711949348449707, -1.7742893695831299, -1.7774795293807983, -1.7807698249816895, -1.7841650247573853, -1.7876698970794678, -1.791290044784546, -1.7950310707092285, -1.7988989353179932, -1.8029001951217651, -1.8070416450500488, -1.8113305568695068, -1.8157750368118286, -1.8203833103179932, -1.8251644372940063, -1.8301280736923218, -1.83528470993042, -1.840645432472229, -1.8462224006652832, -1.852028489112854, -1.8580777645111084, -1.8643853664398193, -1.8709675073623657, -1.8778420686721802, -1.8850282430648804, -1.8925468921661377, -1.9004207849502563, -1.9086744785308838, -1.9173351526260376, -1.9264322519302368, -1.935997724533081, -1.9460670948028564, -1.9566789865493774, -1.9678757190704346, -1.9797041416168213, -1.9922155141830444, -2.0054664611816406, -2.019519567489624, -2.0344438552856445, -2.0503156185150146, -2.0672190189361572, -2.085247755050659, -2.1045045852661133, -2.125103712081909, -2.1471714973449707, -2.170846462249756, -2.1962814331054688, -2.2236430644989014, -2.25311279296875, -2.2848870754241943, -2.319174289703369, -2.356194496154785, -2.3961732387542725, -2.439335823059082, -2.4858970642089844, -2.53604793548584, -2.589937686920166, -2.647651195526123, -2.7091848850250244, -2.774418830871582, -2.8430936336517334, -2.9147937297821045, -2.988943338394165, -3.0648207664489746, 3.1415927410125732, 3.0584514141082764, 2.9764440059661865, 2.8966140747070312, 2.8198421001434326, 2.7468016147613525, 2.677945137023926, 2.613518238067627, 2.5535900592803955, 2.498091459274292, 2.44685435295105, 2.3996453285217285, 2.356194496154785, 2.316215753555298, 2.2794225215911865, 2.245537281036377, 2.2142975330352783, 2.1854593753814697, 2.158798933029175, 2.134112596511841, 2.111215829849243, 2.089942455291748, 2.070142984390259, 2.0516836643218994, 2.0344438552856445, 2.0183162689208984, 2.003204107284546, 1.9890207052230835, 1.975688099861145, 1.9631364345550537, 1.9513026475906372, 1.9401299953460693, 1.9295669794082642, 1.919567346572876, 1.9100888967514038, 1.9010937213897705, 1.8925468921661377, 1.884416937828064, 1.8766752481460571, 1.8692952394485474, 1.8622530698776245, 1.8555268049240112, 1.8490959405899048, 1.842942237854004, 1.8370484113693237, 1.8313987255096436, 1.8259787559509277, 1.8207749128341675, 1.8157750368118286, 1.8109673261642456, 1.806341290473938, 1.801887035369873, 1.7975951433181763, 1.793457269668579, 1.789465308189392, 1.7856117486953735, 1.7818896770477295, 1.7782925367355347, 1.774814248085022, 1.7714492082595825, 1.768191933631897, 1.7650372982025146, 1.7619807720184326, 1.759017825126648, -1.7561442852020264, -1.759017825126648, -1.7619807720184326, -1.7650372982025146, -1.768191933631897, -1.7714492082595825, -1.774814248085022, -1.7782925367355347, -1.7818896770477295, -1.7856117486953735, -1.789465308189392, -1.793457269668579, -1.7975951433181763, -1.801887035369873, -1.806341290473938, -1.8109673261642456, -1.8157750368118286, -1.8207749128341675, -1.8259787559509277, -1.8313987255096436, -1.8370484113693237, -1.842942237854004, -1.8490959405899048, -1.8555268049240112, -1.8622530698776245, -1.8692952394485474, -1.8766752481460571, -1.884416937828064, -1.8925468921661377, -1.9010937213897705, -1.9100888967514038, -1.919567346572876, -1.9295669794082642, -1.9401299953460693, -1.9513026475906372, -1.9631364345550537, -1.975688099861145, -1.9890207052230835, -2.003204107284546, -2.0183162689208984, -2.0344438552856445, -2.0516836643218994, -2.070142984390259, -2.089942455291748, -2.111215829849243, -2.134112596511841, -2.158798933029175, -2.1854593753814697, -2.2142975330352783, -2.245537281036377, -2.2794225215911865, -2.316215753555298, -2.356194496154785, -2.3996453285217285, -2.44685435295105, -2.498091459274292, -2.5535900592803955, -2.613518238067627, -2.677945137023926, -2.7468016147613525, -2.8198421001434326, -2.8966140747070312, -2.9764440059661865, -3.0584514141082764, 3.1415927410125732, 3.0509328842163086, 2.9617390632629395, 2.875340700149536, 2.7928216457366943, 2.7149651050567627, 2.6422460079193115, 2.5748634338378906, 2.512796401977539, 2.4558632373809814, 2.403777599334717, 2.356194496154785, 2.312743663787842, 2.2730531692504883, 2.2367656230926514, 2.203545093536377, 2.173083782196045, 2.1451010704040527, 2.1193456649780273, 2.0955920219421387, 2.0736396312713623, 2.053309679031372, 2.0344438552856445, 2.016901969909668, 2.000558614730835, 1.9853031635284424, 1.9710370302200317, 1.9576719999313354, 1.9451299905776978, 1.9333405494689941, 1.9222410917282104, 1.9117752313613892, 1.9018924236297607, 1.8925468921661377, 1.883697509765625, 1.8753072023391724, 1.8673421144485474, 1.859771728515625, 1.8525681495666504, 1.8457062244415283, 1.8391625881195068, 1.8329161405563354, 1.8269476890563965, 1.8212394714355469, 1.8157750368118286, 1.8105394840240479, 1.8055189847946167, 1.8007007837295532, 1.796073079109192, 1.7916251420974731, 1.787346601486206, 1.7832283973693848, 1.779261589050293, 1.7754381895065308, 1.771750569343567, 1.768191933631897, 1.7647554874420166, 1.7614352703094482, 1.758225440979004, 1.7551207542419434, 1.752116084098816, 1.749206781387329, 1.7463884353637695, 1.7436569929122925, -1.7410082817077637, -1.7436569929122925, -1.7463884353637695, -1.749206781387329, -1.752116084098816, -1.7551207542419434, -1.758225440979004, -1.7614352703094482, -1.7647554874420166, -1.768191933631897, -1.771750569343567, -1.7754381895065308, -1.779261589050293, -1.7832283973693848, -1.787346601486206, -1.7916251420974731, -1.796073079109192, -1.8007007837295532, -1.8055189847946167, -1.8105394840240479, -1.8157750368118286, -1.8212394714355469, -1.8269476890563965, -1.8329161405563354, -1.8391625881195068, -1.8457062244415283, -1.8525681495666504, -1.859771728515625, -1.8673421144485474, -1.8753072023391724, -1.883697509765625, -1.8925468921661377, -1.9018924236297607, -1.9117752313613892, -1.9222410917282104, -1.9333405494689941, -1.9451299905776978, -1.9576719999313354, -1.9710370302200317, -1.9853031635284424, -2.000558614730835, -2.016901969909668, -2.0344438552856445, -2.053309679031372, -2.0736396312713623, -2.0955920219421387, -2.1193456649780273, -2.1451010704040527, -2.173083782196045, -2.203545093536377, -2.2367656230926514, -2.2730531692504883, -2.312743663787842, -2.356194496154785, -2.403777599334717, -2.4558632373809814, -2.512796401977539, -2.5748634338378906, -2.6422460079193115, -2.7149651050567627, -2.7928216457366943, -2.875340700149536, -2.9617390632629395, -3.0509328842163086, 3.1415927410125732, 3.041923999786377, 2.944197177886963, 2.8501358032226562, 2.7610862255096436, 2.677945137023926, 2.601173162460327, 2.5308666229248047, 2.4668517112731934, 2.4087774753570557, 2.356194496154785, 2.3086113929748535, 2.2655346393585205, 2.226491928100586, 2.1910457611083984, 2.158798933029175, 2.1293957233428955, 2.10252046585083, 2.077894926071167, 2.055274248123169, 2.0344438552856445, 2.0152156352996826, 1.997423768043518, 1.9809236526489258, 1.9655874967575073, 1.9513026475906372, 1.9379701614379883, 1.9255019426345825, 1.9138202667236328, 1.9028557538986206, 1.8925468921661377, 1.882838487625122, 1.8736811876296997, 1.8650308847427368, 1.8568477630615234, 1.8490959405899048, 1.8417432308197021, 1.834760069847107, 1.8281199932098389, 1.8217990398406982, 1.8157750368118286, 1.8100279569625854, 1.8045395612716675, 1.7992929220199585, 1.7942728996276855, 1.789465308189392, 1.7848570346832275, 1.7804361581802368, 1.7761917114257812, 1.7721134424209595, 1.768191933631897, 1.764418363571167, 1.76078462600708, 1.7572832107543945, 1.7539070844650269, 1.7506498098373413, 1.7475051879882812, 1.7444674968719482, 1.741531491279602, 1.738692283630371, 1.7359449863433838, 1.7332854270935059, 1.730709433555603, 1.7282131910324097, -1.7257931232452393, -1.7282131910324097, -1.730709433555603, -1.7332854270935059, -1.7359449863433838, -1.738692283630371, -1.741531491279602, -1.7444674968719482, -1.7475051879882812, -1.7506498098373413, -1.7539070844650269, -1.7572832107543945, -1.76078462600708, -1.764418363571167, -1.768191933631897, -1.7721134424209595, -1.7761917114257812, -1.7804361581802368, -1.7848570346832275, -1.789465308189392, -1.7942728996276855, -1.7992929220199585, -1.8045395612716675, -1.8100279569625854, -1.8157750368118286, -1.8217990398406982, -1.8281199932098389, -1.834760069847107, -1.8417432308197021, -1.8490959405899048, -1.8568477630615234, -1.8650308847427368, -1.8736811876296997, -1.882838487625122, -1.8925468921661377, -1.9028557538986206, -1.9138202667236328, -1.9255019426345825, -1.9379701614379883, -1.9513026475906372, -1.9655874967575073, -1.9809236526489258, -1.997423768043518, -2.0152156352996826, -2.0344438552856445, -2.055274248123169, -2.077894926071167, -2.10252046585083, -2.1293957233428955, -2.158798933029175, -2.1910457611083984, -2.226491928100586, -2.2655346393585205, -2.3086113929748535, -2.356194496154785, -2.4087774753570557, -2.4668517112731934, -2.5308666229248047, -2.601173162460327, -2.677945137023926, -2.7610862255096436, -2.8501358032226562, -2.944197177886963, -3.041923999786377, 3.1415927410125732, 3.030935525894165, 2.9229238033294678, 2.8198421001434326, 2.7233684062957764, 2.6344940662384033, 2.5535900592803955, 2.4805495738983154, 2.414950370788574, 2.356194496154785, 2.3036115169525146, 2.256525754928589, 2.2142975330352783, 2.1763410568237305, 2.1421337127685547, 2.111215829849243, 2.0831856727600098, 2.0576956272125244, 2.0344438552856445, 2.0131704807281494, 1.993650197982788, 1.975688099861145, 1.9591150283813477, 1.9437839984893799, 1.9295669794082642, 1.9163519144058228, 1.9040405750274658, 1.8925468921661377, 1.8817945718765259, 1.8717166185379028, 1.8622530698776245, 1.8533512353897095, 1.844963788986206, 1.8370484113693237, 1.8295671939849854, 1.8224862813949585, 1.8157750368118286, 1.8094056844711304, 1.8033533096313477, 1.7975951433181763, 1.792110800743103, 1.7868813276290894, 1.7818896770477295, 1.7771202325820923, 1.7725586891174316, 1.768191933631897, 1.764007806777954, 1.7599953413009644, 1.7561442852020264, 1.752445101737976, 1.7488892078399658, 1.7454684972763062, 1.7421754598617554, 1.73900306224823, 1.7359449863433838, 1.7329951524734497, 1.7301479578018188, 1.727398157119751, 1.724740982055664, 1.7221717834472656, 1.7196862697601318, 1.7172805070877075, 1.714950680732727, 1.7126933336257935, -1.7105052471160889, -1.7126933336257935, -1.714950680732727, -1.7172805070877075, -1.7196862697601318, -1.7221717834472656, -1.724740982055664, -1.727398157119751, -1.7301479578018188, -1.7329951524734497, -1.7359449863433838, -1.73900306224823, -1.7421754598617554, -1.7454684972763062, -1.7488892078399658, -1.752445101737976, -1.7561442852020264, -1.7599953413009644, -1.764007806777954, -1.768191933631897, -1.7725586891174316, -1.7771202325820923, -1.7818896770477295, -1.7868813276290894, -1.792110800743103, -1.7975951433181763, -1.8033533096313477, -1.8094056844711304, -1.8157750368118286, -1.8224862813949585, -1.8295671939849854, -1.8370484113693237, -1.844963788986206, -1.8533512353897095, -1.8622530698776245, -1.8717166185379028, -1.8817945718765259, -1.8925468921661377, -1.9040405750274658, -1.9163519144058228, -1.9295669794082642, -1.9437839984893799, -1.9591150283813477, -1.975688099861145, -1.993650197982788, -2.0131704807281494, -2.0344438552856445, -2.0576956272125244, -2.0831856727600098, -2.111215829849243, -2.1421337127685547, -2.1763410568237305, -2.2142975330352783, -2.256525754928589, -2.3036115169525146, -2.356194496154785, -2.414950370788574, -2.4805495738983154, -2.5535900592803955, -2.6344940662384033, -2.7233684062957764, -2.8198421001434326, -2.9229238033294678, -3.030935525894165, 3.1415927410125732, 3.017237663269043, 2.8966140747070312, 2.7828218936920166, 2.677945137023926, 2.582993268966675, 2.498091459274292, 2.422762632369995, 2.356194496154785, 2.297438621520996, 2.245537281036377, 2.1995925903320312, 2.158798933029175, 2.1224513053894043, 2.089942455291748, 2.060753583908081, 2.0344438552856445, 2.010638952255249, 1.9890207052230835, 1.9693187475204468, 1.9513026475906372, 1.9347752332687378, 1.919567346572876, 1.9055331945419312, 1.8925468921661377, 1.880499243736267, 1.8692952394485474, 1.8588517904281616, 1.8490959405899048, 1.8399637937545776, 1.8313987255096436, 1.8233505487442017, 1.8157750368118286, 1.808632254600525, 1.801887035369873, 1.795507550239563, 1.789465308189392, 1.783734679222107, 1.7782925367355347, 1.7731178998947144, 1.768191933631897, 1.7634971141815186, 1.759017825126648, 1.754739761352539, 1.7506498098373413, 1.74673593044281, 1.7429871559143066, 1.7393932342529297, 1.7359449863433838, 1.7326337099075317, 1.7294515371322632, 1.7263911962509155, 1.7234456539154053, 1.7206088304519653, 1.7178746461868286, 1.7152378559112549, 1.7126933336257935, 1.7102364301681519, 1.7078624963760376, 1.7055675983428955, 1.7033478021621704, 1.7011996507644653, 1.6991195678710938, 1.6971044540405273, -1.6951513290405273, -1.6971044540405273, -1.6991195678710938, -1.7011996507644653, -1.7033478021621704, -1.7055675983428955, -1.7078624963760376, -1.7102364301681519, -1.7126933336257935, -1.7152378559112549, -1.7178746461868286, -1.7206088304519653, -1.7234456539154053, -1.7263911962509155, -1.7294515371322632, -1.7326337099075317, -1.7359449863433838, -1.7393932342529297, -1.7429871559143066, -1.74673593044281, -1.7506498098373413, -1.754739761352539, -1.759017825126648, -1.7634971141815186, -1.768191933631897, -1.7731178998947144, -1.7782925367355347, -1.783734679222107, -1.789465308189392, -1.795507550239563, -1.801887035369873, -1.808632254600525, -1.8157750368118286, -1.8233505487442017, -1.8313987255096436, -1.8399637937545776, -1.8490959405899048, -1.8588517904281616, -1.8692952394485474, -1.880499243736267, -1.8925468921661377, -1.9055331945419312, -1.919567346572876, -1.9347752332687378, -1.9513026475906372, -1.9693187475204468, -1.9890207052230835, -2.010638952255249, -2.0344438552856445, -2.060753583908081, -2.089942455291748, -2.1224513053894043, -2.158798933029175, -2.1995925903320312, -2.245537281036377, -2.297438621520996, -2.356194496154785, -2.422762632369995, -2.498091459274292, -2.582993268966675, -2.677945137023926, -2.7828218936920166, -2.8966140747070312, -3.017237663269043, 3.1415927410125732, 2.9996955394744873, 2.863292932510376, 2.7367007732391357, 2.6224465370178223, 2.521343231201172, 2.432966470718384, 2.356194496154785, 2.289626359939575, 2.231839418411255, 2.1815223693847656, 2.1375255584716797, 2.0988707542419434, 2.0647377967834473, 2.0344438552856445, 2.0074234008789062, 1.9832067489624023, 1.9614033699035645, 1.9416875839233398, 1.9237867593765259, 1.9074711799621582, 1.8925468921661377, 1.8788491487503052, 1.8662371635437012, 1.8545904159545898, 1.8438050746917725, 1.8337910175323486, 1.8244704008102417, 1.8157750368118286, 1.8076450824737549, 1.8000282049179077, 1.792878270149231, 1.78615403175354, 1.7798192501068115, 1.7738415002822876, 1.768191933631897, 1.7628443241119385, 1.7577755451202393, 1.7529646158218384, 1.7483924627304077, 1.7440420389175415, 1.739897608757019, 1.7359449863433838, 1.7321714162826538, 1.7285650968551636, 1.7251150608062744, 1.7218116521835327, 1.718645691871643, 1.715608835220337, 1.7126933336257935, 1.7098922729492188, 1.707198977470398, 1.7046072483062744, 1.7021117210388184, 1.6997071504592896, 1.6973884105682373, 1.6951513290405273, 1.6929914951324463, 1.6909050941467285, 1.6888883113861084, 1.686937928199768, 1.6850506067276, 1.6832234859466553, 1.6814535856246948, -1.6797382831573486, -1.6814535856246948, -1.6832234859466553, -1.6850506067276, -1.686937928199768, -1.6888883113861084, -1.6909050941467285, -1.6929914951324463, -1.6951513290405273, -1.6973884105682373, -1.6997071504592896, -1.7021117210388184, -1.7046072483062744, -1.707198977470398, -1.7098922729492188, -1.7126933336257935, -1.715608835220337, -1.718645691871643, -1.7218116521835327, -1.7251150608062744, -1.7285650968551636, -1.7321714162826538, -1.7359449863433838, -1.739897608757019, -1.7440420389175415, -1.7483924627304077, -1.7529646158218384, -1.7577755451202393, -1.7628443241119385, -1.768191933631897, -1.7738415002822876, -1.7798192501068115, -1.78615403175354, -1.792878270149231, -1.8000282049179077, -1.8076450824737549, -1.8157750368118286, -1.8244704008102417, -1.8337910175323486, -1.8438050746917725, -1.8545904159545898, -1.8662371635437012, -1.8788491487503052, -1.8925468921661377, -1.9074711799621582, -1.9237867593765259, -1.9416875839233398, -1.9614033699035645, -1.9832067489624023, -2.0074234008789062, -2.0344438552856445, -2.0647377967834473, -2.0988707542419434, -2.1375255584716797, -2.1815223693847656, -2.231839418411255, -2.289626359939575, -2.356194496154785, -2.432966470718384, -2.521343231201172, -2.6224465370178223, -2.7367007732391357, -2.863292932510376, -2.9996955394744873, 3.1415927410125732, 2.9764440059661865, 2.8198421001434326, 2.677945137023926, 2.5535900592803955, 2.44685435295105, 2.356194496154785, 2.2794225215911865, 2.2142975330352783, 2.158798933029175, 2.111215829849243, 2.070142984390259, 2.0344438552856445, 2.003204107284546, 1.975688099861145, 1.9513026475906372, 1.9295669794082642, 1.9100888967514038, 1.8925468921661377, 1.8766752481460571, 1.8622530698776245, 1.8490959405899048, 1.8370484113693237, 1.8259787559509277, 1.8157750368118286, 1.806341290473938, 1.7975951433181763, 1.789465308189392, 1.7818896770477295, 1.774814248085022, 1.768191933631897, 1.7619807720184326, 1.7561442852020264, 1.7506498098373413, 1.7454684972763062, 1.740574598312378, 1.7359449863433838, 1.7315590381622314, 1.727398157119751, 1.7234456539154053, 1.7196862697601318, 1.7161062955856323, 1.7126933336257935, 1.709436058998108, 1.7063239812850952, 1.7033478021621704, 1.7004988193511963, 1.6977691650390625, 1.6951513290405273, 1.6926387548446655, 1.6902252435684204, 1.6879050731658936, 1.6856728792190552, 1.6835238933563232, 1.6814535856246948, 1.6794575452804565, 1.6775319576263428, 1.675673246383667, 1.6738779544830322, 1.6721428632736206, 1.6704649925231934, 1.6688416004180908, 1.6672700643539429, 1.6657480001449585, -1.6642731428146362, -1.6657480001449585, -1.6672700643539429, -1.6688416004180908, -1.6704649925231934, -1.6721428632736206, -1.6738779544830322, -1.675673246383667, -1.6775319576263428, -1.6794575452804565, -1.6814535856246948, -1.6835238933563232, -1.6856728792190552, -1.6879050731658936, -1.6902252435684204, -1.6926387548446655, -1.6951513290405273, -1.6977691650390625, -1.7004988193511963, -1.7033478021621704, -1.7063239812850952, -1.709436058998108, -1.7126933336257935, -1.7161062955856323, -1.7196862697601318, -1.7234456539154053, -1.727398157119751, -1.7315590381622314, -1.7359449863433838, -1.740574598312378, -1.7454684972763062, -1.7506498098373413, -1.7561442852020264, -1.7619807720184326, -1.768191933631897, -1.774814248085022, -1.7818896770477295, -1.789465308189392, -1.7975951433181763, -1.806341290473938, -1.8157750368118286, -1.8259787559509277, -1.8370484113693237, -1.8490959405899048, -1.8622530698776245, -1.8766752481460571, -1.8925468921661377, -1.9100888967514038, -1.9295669794082642, -1.9513026475906372, -1.975688099861145, -2.003204107284546, -2.0344438552856445, -2.070142984390259, -2.111215829849243, -2.158798933029175, -2.2142975330352783, -2.2794225215911865, -2.356194496154785, -2.44685435295105, -2.5535900592803955, -2.677945137023926, -2.8198421001434326, -2.9764440059661865, 3.1415927410125732, 2.944197177886963, 2.7610862255096436, 2.601173162460327, 2.4668517112731934, 2.356194496154785, 2.2655346393585205, 2.1910457611083984, 2.1293957233428955, 2.077894926071167, 2.0344438552856445, 1.997423768043518, 1.9655874967575073, 1.9379701614379883, 1.9138202667236328, 1.8925468921661377, 1.8736811876296997, 1.8568477630615234, 1.8417432308197021, 1.8281199932098389, 1.8157750368118286, 1.8045395612716675, 1.7942728996276855, 1.7848570346832275, 1.7761917114257812, 1.768191933631897, 1.76078462600708, 1.7539070844650269, 1.7475051879882812, 1.741531491279602, 1.7359449863433838, 1.730709433555603, 1.7257931232452393, 1.721167802810669, 1.716808557510376, 1.7126933336257935, 1.708802342414856, 1.7051178216934204, 1.7016236782073975, 1.6983058452606201, 1.6951513290405273, 1.6921483278274536, 1.689286231994629, 1.6865555047988892, 1.6839473247528076, 1.6814535856246948, 1.6790668964385986, 1.6767807006835938, 1.674588680267334, 1.6724852323532104, 1.6704649925231934, 1.6685231924057007, 1.666655421257019, 1.6648575067520142, 1.6631256341934204, 1.6614562273025513, 1.6598459482192993, 1.6582916975021362, 1.6567906141281128, 1.6553400754928589, 1.653937578201294, 1.652580738067627, 1.6512672901153564, 1.6499954462051392, -1.6487629413604736, -1.6499954462051392, -1.6512672901153564, -1.652580738067627, -1.653937578201294, -1.6553400754928589, -1.6567906141281128, -1.6582916975021362, -1.6598459482192993, -1.6614562273025513, -1.6631256341934204, -1.6648575067520142, -1.666655421257019, -1.6685231924057007, -1.6704649925231934, -1.6724852323532104, -1.674588680267334, -1.6767807006835938, -1.6790668964385986, -1.6814535856246948, -1.6839473247528076, -1.6865555047988892, -1.689286231994629, -1.6921483278274536, -1.6951513290405273, -1.6983058452606201, -1.7016236782073975, -1.7051178216934204, -1.708802342414856, -1.7126933336257935, -1.716808557510376, -1.721167802810669, -1.7257931232452393, -1.730709433555603, -1.7359449863433838, -1.741531491279602, -1.7475051879882812, -1.7539070844650269, -1.76078462600708, -1.768191933631897, -1.7761917114257812, -1.7848570346832275, -1.7942728996276855, -1.8045395612716675, -1.8157750368118286, -1.8281199932098389, -1.8417432308197021, -1.8568477630615234, -1.8736811876296997, -1.8925468921661377, -1.9138202667236328, -1.9379701614379883, -1.9655874967575073, -1.997423768043518, -2.0344438552856445, -2.077894926071167, -2.1293957233428955, -2.1910457611083984, -2.2655346393585205, -2.356194496154785, -2.4668517112731934, -2.601173162460327, -2.7610862255096436, -2.944197177886963, 3.1415927410125732, 2.8966140747070312, 2.677945137023926, 2.498091459274292, 2.356194496154785, 2.245537281036377, 2.158798933029175, 2.089942455291748, 2.0344438552856445, 1.9890207052230835, 1.9513026475906372, 1.919567346572876, 1.8925468921661377, 1.8692952394485474, 1.8490959405899048, 1.8313987255096436, 1.8157750368118286, 1.801887035369873, 1.789465308189392, 1.7782925367355347, 1.768191933631897, 1.759017825126648, 1.7506498098373413, 1.7429871559143066, 1.7359449863433838, 1.7294515371322632, 1.7234456539154053, 1.7178746461868286, 1.7126933336257935, 1.7078624963760376, 1.7033478021621704, 1.6991195678710938, 1.6951513290405273, 1.6914199590682983, 1.6879050731658936, 1.6845883131027222, 1.6814535856246948, 1.6784862279891968, 1.675673246383667, 1.673003077507019, 1.6704649925231934, 1.6680495738983154, 1.6657480001449585, 1.6635526418685913, 1.6614562273025513, 1.659452199935913, 1.6575347185134888, 1.6556980609893799, 1.653937578201294, 1.6522483825683594, 1.650626301765442, 1.6490675210952759, 1.6475682258605957, 1.6461251974105835, 1.644735336303711, 1.6433957815170288, 1.6421037912368774, 1.6408568620681763, 1.6396528482437134, 1.6384893655776978, 1.6373645067214966, 1.636276364326477, 1.635223150253296, 1.634203314781189, -1.6332151889801025, -1.634203314781189, -1.635223150253296, -1.636276364326477, -1.6373645067214966, -1.6384893655776978, -1.6396528482437134, -1.6408568620681763, -1.6421037912368774, -1.6433957815170288, -1.644735336303711, -1.6461251974105835, -1.6475682258605957, -1.6490675210952759, -1.650626301765442, -1.6522483825683594, -1.653937578201294, -1.6556980609893799, -1.6575347185134888, -1.659452199935913, -1.6614562273025513, -1.6635526418685913, -1.6657480001449585, -1.6680495738983154, -1.6704649925231934, -1.673003077507019, -1.675673246383667, -1.6784862279891968, -1.6814535856246948, -1.6845883131027222, -1.6879050731658936, -1.6914199590682983, -1.6951513290405273, -1.6991195678710938, -1.7033478021621704, -1.7078624963760376, -1.7126933336257935, -1.7178746461868286, -1.7234456539154053, -1.7294515371322632, -1.7359449863433838, -1.7429871559143066, -1.7506498098373413, -1.759017825126648, -1.768191933631897, -1.7782925367355347, -1.789465308189392, -1.801887035369873, -1.8157750368118286, -1.8313987255096436, -1.8490959405899048, -1.8692952394485474, -1.8925468921661377, -1.919567346572876, -1.9513026475906372, -1.9890207052230835, -2.0344438552856445, -2.089942455291748, -2.158798933029175, -2.245537281036377, -2.356194496154785, -2.498091459274292, -2.677945137023926, -2.8966140747070312, 3.1415927410125732, 2.8198421001434326, 2.5535900592803955, 2.356194496154785, 2.2142975330352783, 2.111215829849243, 2.0344438552856445, 1.975688099861145, 1.9295669794082642, 1.8925468921661377, 1.8622530698776245, 1.8370484113693237, 1.8157750368118286, 1.7975951433181763, 1.7818896770477295, 1.768191933631897, 1.7561442852020264, 1.7454684972763062, 1.7359449863433838, 1.727398157119751, 1.7196862697601318, 1.7126933336257935, 1.7063239812850952, 1.7004988193511963, 1.6951513290405273, 1.6902252435684204, 1.6856728792190552, 1.6814535856246948, 1.6775319576263428, 1.6738779544830322, 1.6704649925231934, 1.6672700643539429, 1.6642731428146362, 1.6614562273025513, 1.6588037014007568, 1.6563016176223755, 1.653937578201294, 1.6517003774642944, 1.6495802402496338, 1.6475682258605957, 1.6456562280654907, 1.6438368558883667, 1.6421037912368774, 1.6404509544372559, 1.638872742652893, 1.6373645067214966, 1.6359214782714844, 1.6345396041870117, 1.6332151889801025, 1.6319445371627808, 1.6307244300842285, 1.6295521259307861, 1.6284247636795044, 1.6273397207260132, 1.6262948513031006, 1.6252877712249756, 1.6243165731430054, 1.6233793497085571, 1.6224744319915771, 1.6216000318527222, 1.6207547187805176, 1.6199370622634888, 1.6191457509994507, 1.6183794736862183, -1.617637038230896, -1.6183794736862183, -1.6191457509994507, -1.6199370622634888, -1.6207547187805176, -1.6216000318527222, -1.6224744319915771, -1.6233793497085571, -1.6243165731430054, -1.6252877712249756, -1.6262948513031006, -1.6273397207260132, -1.6284247636795044, -1.6295521259307861, -1.6307244300842285, -1.6319445371627808, -1.6332151889801025, -1.6345396041870117, -1.6359214782714844, -1.6373645067214966, -1.638872742652893, -1.6404509544372559, -1.6421037912368774, -1.6438368558883667, -1.6456562280654907, -1.6475682258605957, -1.6495802402496338, -1.6517003774642944, -1.653937578201294, -1.6563016176223755, -1.6588037014007568, -1.6614562273025513, -1.6642731428146362, -1.6672700643539429, -1.6704649925231934, -1.6738779544830322, -1.6775319576263428, -1.6814535856246948, -1.6856728792190552, -1.6902252435684204, -1.6951513290405273, -1.7004988193511963, -1.7063239812850952, -1.7126933336257935, -1.7196862697601318, -1.727398157119751, -1.7359449863433838, -1.7454684972763062, -1.7561442852020264, -1.768191933631897, -1.7818896770477295, -1.7975951433181763, -1.8157750368118286, -1.8370484113693237, -1.8622530698776245, -1.8925468921661377, -1.9295669794082642, -1.975688099861145, -2.0344438552856445, -2.111215829849243, -2.2142975330352783, -2.356194496154785, -2.5535900592803955, -2.8198421001434326, 3.1415927410125732, 2.677945137023926, 2.356194496154785, 2.158798933029175, 2.0344438552856445, 1.9513026475906372, 1.8925468921661377, 1.8490959405899048, 1.8157750368118286, 1.789465308189392, 1.768191933631897, 1.7506498098373413, 1.7359449863433838, 1.7234456539154053, 1.7126933336257935, 1.7033478021621704, 1.6951513290405273, 1.6879050731658936, 1.6814535856246948, 1.675673246383667, 1.6704649925231934, 1.6657480001449585, 1.6614562273025513, 1.6575347185134888, 1.653937578201294, 1.650626301765442, 1.6475682258605957, 1.644735336303711, 1.6421037912368774, 1.6396528482437134, 1.6373645067214966, 1.635223150253296, 1.6332151889801025, 1.6313283443450928, 1.6295521259307861, 1.627877116203308, 1.6262948513031006, 1.6247978210449219, 1.6233793497085571, 1.6220334768295288, 1.6207547187805176, 1.6195381879806519, 1.6183794736862183, 1.6172744035720825, 1.6162196397781372, 1.6152114868164062, 1.61424720287323, 1.6133238077163696, 1.6124389171600342, 1.611590027809143, 1.6107749938964844, 1.6099919080734253, 1.609238862991333, 1.6085143089294434, 1.607816457748413, 1.6071439981460571, 1.6064953804016113, 1.6058696508407593, 1.6052653789520264, 1.6046816110610962, 1.6041172742843628, 1.6035714149475098, 1.6030431985855103, 1.6025316715240479, -1.6020361185073853, -1.6025316715240479, -1.6030431985855103, -1.6035714149475098, -1.6041172742843628, -1.6046816110610962, -1.6052653789520264, -1.6058696508407593, -1.6064953804016113, -1.6071439981460571, -1.607816457748413, -1.6085143089294434, -1.609238862991333, -1.6099919080734253, -1.6107749938964844, -1.611590027809143, -1.6124389171600342, -1.6133238077163696, -1.61424720287323, -1.6152114868164062, -1.6162196397781372, -1.6172744035720825, -1.6183794736862183, -1.6195381879806519, -1.6207547187805176, -1.6220334768295288, -1.6233793497085571, -1.6247978210449219, -1.6262948513031006, -1.627877116203308, -1.6295521259307861, -1.6313283443450928, -1.6332151889801025, -1.635223150253296, -1.6373645067214966, -1.6396528482437134, -1.6421037912368774, -1.644735336303711, -1.6475682258605957, -1.650626301765442, -1.653937578201294, -1.6575347185134888, -1.6614562273025513, -1.6657480001449585, -1.6704649925231934, -1.675673246383667, -1.6814535856246948, -1.6879050731658936, -1.6951513290405273, -1.7033478021621704, -1.7126933336257935, -1.7234456539154053, -1.7359449863433838, -1.7506498098373413, -1.768191933631897, -1.789465308189392, -1.8157750368118286, -1.8490959405899048, -1.8925468921661377, -1.9513026475906372, -2.0344438552856445, -2.158798933029175, -2.356194496154785, -2.677945137023926, 3.1415927410125732, 2.356194496154785, 2.0344438552856445, 1.8925468921661377, 1.8157750368118286, 1.768191933631897, 1.7359449863433838, 1.7126933336257935, 1.6951513290405273, 1.6814535856246948, 1.6704649925231934, 1.6614562273025513, 1.653937578201294, 1.6475682258605957, 1.6421037912368774, 1.6373645067214966, 1.6332151889801025, 1.6295521259307861, 1.6262948513031006, 1.6233793497085571, 1.6207547187805176, 1.6183794736862183, 1.6162196397781372, 1.61424720287323, 1.6124389171600342, 1.6107749938964844, 1.609238862991333, 1.607816457748413, 1.6064953804016113, 1.6052653789520264, 1.6041172742843628, 1.6030431985855103, 1.6020361185073853, 1.6010900735855103, 1.600199580192566, 1.5993599891662598, 1.598567008972168, 1.597816824913025, 1.5971060991287231, 1.5964317321777344, 1.5957911014556885, 1.5951817035675049, 1.5946013927459717, 1.5940479040145874, 1.593519687652588, 1.5930148363113403, 1.5925320386886597, 1.5920697450637817, 1.5916266441345215, 1.591201663017273, 1.5907936096191406, 1.5904016494750977, 1.590024709701538, 1.589661955833435, 1.5893126726150513, 1.5889761447906494, 1.5886515378952026, 1.5883383750915527, 1.5880359411239624, 1.587743878364563, 1.5874614715576172, 1.5871882438659668, 1.5869239568710327, 1.5866680145263672, -1.5864200592041016, -1.5866680145263672, -1.5869239568710327, -1.5871882438659668, -1.5874614715576172, -1.587743878364563, -1.5880359411239624, -1.5883383750915527, -1.5886515378952026, -1.5889761447906494, -1.5893126726150513, -1.589661955833435, -1.590024709701538, -1.5904016494750977, -1.5907936096191406, -1.591201663017273, -1.5916266441345215, -1.5920697450637817, -1.5925320386886597, -1.5930148363113403, -1.593519687652588, -1.5940479040145874, -1.5946013927459717, -1.5951817035675049, -1.5957911014556885, -1.5964317321777344, -1.5971060991287231, -1.597816824913025, -1.598567008972168, -1.5993599891662598, -1.600199580192566, -1.6010900735855103, -1.6020361185073853, -1.6030431985855103, -1.6041172742843628, -1.6052653789520264, -1.6064953804016113, -1.607816457748413, -1.609238862991333, -1.6107749938964844, -1.6124389171600342, -1.61424720287323, -1.6162196397781372, -1.6183794736862183, -1.6207547187805176, -1.6233793497085571, -1.6262948513031006, -1.6295521259307861, -1.6332151889801025, -1.6373645067214966, -1.6421037912368774, -1.6475682258605957, -1.653937578201294, -1.6614562273025513, -1.6704649925231934, -1.6814535856246948, -1.6951513290405273, -1.7126933336257935, -1.7359449863433838, -1.768191933631897, -1.8157750368118286, -1.8925468921661377, -2.0344438552856445, -2.356194496154785, };
const data_t my_LUT_r[] = {0.0, 0.03125, 0.0625, 0.09375, 0.125, 0.15625, 0.1875, 0.21875, 0.25, 0.28125, 0.3125, 0.34375, 0.375, 0.40625, 0.4375, 0.46875, 0.5, 0.53125, 0.5625, 0.59375, 0.625, 0.65625, 0.6875, 0.71875, 0.75, 0.78125, 0.8125, 0.84375, 0.875, 0.90625, 0.9375, 0.96875, 1.0, 1.03125, 1.0625, 1.09375, 1.125, 1.15625, 1.1875, 1.21875, 1.25, 1.28125, 1.3125, 1.34375, 1.375, 1.40625, 1.4375, 1.46875, 1.5, 1.53125, 1.5625, 1.59375, 1.625, 1.65625, 1.6875, 1.71875, 1.75, 1.78125, 1.8125, 1.84375, 1.875, 1.90625, 1.9375, 1.96875, 2.0, 1.96875, 1.9375, 1.90625, 1.875, 1.84375, 1.8125, 1.78125, 1.75, 1.71875, 1.6875, 1.65625, 1.625, 1.59375, 1.5625, 1.53125, 1.5, 1.46875, 1.4375, 1.40625, 1.375, 1.34375, 1.3125, 1.28125, 1.25, 1.21875, 1.1875, 1.15625, 1.125, 1.09375, 1.0625, 1.03125, 1.0, 0.96875, 0.9375, 0.90625, 0.875, 0.84375, 0.8125, 0.78125, 0.75, 0.71875, 0.6875, 0.65625, 0.625, 0.59375, 0.5625, 0.53125, 0.5, 0.46875, 0.4375, 0.40625, 0.375, 0.34375, 0.3125, 0.28125, 0.25, 0.21875, 0.1875, 0.15625, 0.125, 0.09375, 0.0625, 0.03125, 0.03125, 0.04419417306780815, 0.06987712532281876, 0.09882117807865143, 0.12884704768657684, 0.1593443602323532, 0.19008633494377136, 0.22097086906433105, 0.2519455552101135, 0.2829807996749878, 0.3140586018562317, 0.34516751766204834, 0.37629982829093933, 0.4074501395225525, 0.4386146366596222, 0.469790518283844, 0.5009756088256836, 0.5321683287620544, 0.5633673667907715, 0.5945718288421631, 0.6257807612419128, 0.6569936275482178, 0.6882098317146301, 0.7194290161132812, 0.7506507635116577, 0.7818747758865356, 0.8131007552146912, 0.8443285226821899, 0.8755578398704529, 0.9067886471748352, 0.9380207061767578, 0.9692538976669312, 1.0004881620407104, 1.0317233800888062, 1.0629594326019287, 1.0941963195800781, 1.1254339218139648, 1.1566722393035889, 1.1879111528396606, 1.2191505432128906, 1.2503905296325684, 1.2816309928894043, 1.3128719329833984, 1.3441133499145508, 1.3753551244735718, 1.4065971374511719, 1.4378396272659302, 1.4690823554992676, 1.5003254413604736, 1.5315688848495483, 1.5628124475479126, 1.5940563678741455, 1.625300407409668, 1.656544804573059, 1.6877893209457397, 1.7190340757369995, 1.7502789497375488, 1.7815240621566772, 1.8127694129943848, 1.8440147638320923, 1.875260353088379, 1.9065061807632446, 1.9377520084381104, 1.9689979553222656, 2.000244140625, 1.9689979553222656, 1.9377520084381104, 1.9065061807632446, 1.875260353088379, 1.8440147638320923, 1.8127694129943848, 1.7815240621566772, 1.7502789497375488, 1.7190340757369995, 1.6877893209457397, 1.656544804573059, 1.625300407409668, 1.5940563678741455, 1.5628124475479126, 1.5315688848495483, 1.5003254413604736, 1.4690823554992676, 1.4378396272659302, 1.4065971374511719, 1.3753551244735718, 1.3441133499145508, 1.3128719329833984, 1.2816309928894043, 1.2503905296325684, 1.2191505432128906, 1.1879111528396606, 1.1566722393035889, 1.1254339218139648, 1.0941963195800781, 1.0629594326019287, 1.0317233800888062, 1.0004881620407104, 0.9692538976669312, 0.9380207061767578, 0.9067886471748352, 0.8755578398704529, 0.8443285226821899, 0.8131007552146912, 0.7818747758865356, 0.7506507635116577, 0.7194290161132812, 0.6882098317146301, 0.6569936275482178, 0.6257807612419128, 0.5945718288421631, 0.5633673667907715, 0.5321683287620544, 0.5009756088256836, 0.469790518283844, 0.4386146366596222, 0.4074501395225525, 0.37629982829093933, 0.34516751766204834, 0.3140586018562317, 0.2829807996749878, 0.2519455552101135, 0.22097086906433105, 0.19008633494377136, 0.1593443602323532, 0.12884704768657684, 0.09882117807865143, 0.06987712532281876, 0.04419417306780815, 0.0625, 0.06987712532281876, 0.0883883461356163, 0.11267347633838654, 0.1397542506456375, 0.16828639805316925, 0.19764235615730286, 0.2275034338235855, 0.2576940953731537, 0.28811076283454895, 0.3186887204647064, 0.3493856191635132, 0.3801726698875427, 0.411029577255249, 0.4419417381286621, 0.47289830446243286, 0.503891110420227, 0.5349138379096985, 0.5659615993499756, 0.5970304012298584, 0.6281172037124634, 0.6592194437980652, 0.6903350353240967, 0.7214622497558594, 0.7525996565818787, 0.7837460041046143, 0.814900279045105, 0.846061646938324, 0.8772292733192444, 0.9084026217460632, 0.939581036567688, 0.9707640409469604, 1.0019512176513672, 1.0331422090530396, 1.0643366575241089, 1.0955342054367065, 1.126734733581543, 1.157938003540039, 1.1891436576843262, 1.2203514575958252, 1.2515615224838257, 1.282773494720459, 1.3139872550964355, 1.3452026844024658, 1.3764196634292603, 1.4076381921768188, 1.4388580322265625, 1.4700791835784912, 1.5013015270233154, 1.5325249433517456, 1.5637495517730713, 1.5949749946594238, 1.6262015104293823, 1.6574288606643677, 1.6886570453643799, 1.7198859453201294, 1.7511156797409058, 1.7823461294174194, 1.8135772943496704, 1.8448090553283691, 1.8760414123535156, 1.9072743654251099, 1.9385077953338623, 1.9697418212890625, 2.000976324081421, 1.9697418212890625, 1.9385077953338623, 1.9072743654251099, 1.8760414123535156, 1.8448090553283691, 1.8135772943496704, 1.7823461294174194, 1.7511156797409058, 1.7198859453201294, 1.6886570453643799, 1.6574288606643677, 1.6262015104293823, 1.5949749946594238, 1.5637495517730713, 1.5325249433517456, 1.5013015270233154, 1.4700791835784912, 1.4388580322265625, 1.4076381921768188, 1.3764196634292603, 1.3452026844024658, 1.3139872550964355, 1.282773494720459, 1.2515615224838257, 1.2203514575958252, 1.1891436576843262, 1.157938003540039, 1.126734733581543, 1.0955342054367065, 1.0643366575241089, 1.0331422090530396, 1.0019512176513672, 0.9707640409469604, 0.939581036567688, 0.9084026217460632, 0.8772292733192444, 0.846061646938324, 0.814900279045105, 0.7837460041046143, 0.7525996565818787, 0.7214622497558594, 0.6903350353240967, 0.6592194437980652, 0.6281172037124634, 0.5970304012298584, 0.5659615993499756, 0.5349138379096985, 0.503891110420227, 0.47289830446243286, 0.4419417381286621, 0.411029577255249, 0.3801726698875427, 0.3493856191635132, 0.3186887204647064, 0.28811076283454895, 0.2576940953731537, 0.2275034338235855, 0.19764235615730286, 0.16828639805316925, 0.1397542506456375, 0.11267347633838654, 0.0883883461356163, 0.06987712532281876, 0.09375, 0.09882117807865143, 0.11267347633838654, 0.13258251547813416, 0.15625, 0.18221724033355713, 0.20963136851787567, 0.23799291253089905, 0.26700010895729065, 0.2964635193347931, 0.326259583234787, 0.3563048243522644, 0.3865411579608917, 0.4169270098209381, 0.44743192195892334, 0.47803306579589844, 0.5087131261825562, 0.5394586324691772, 0.5702589750289917, 0.6011057496070862, 0.6319921612739563, 0.6629126071929932, 0.6938626170158386, 0.7248383164405823, 0.7558366656303406, 0.7868549227714539, 0.8178907632827759, 0.8489423394203186, 0.8800079822540283, 0.9110862612724304, 0.9421758651733398, 0.9732757210731506, 1.0043848752975464, 1.035502552986145, 1.0666279792785645, 1.097760558128357, 1.1288994550704956, 1.1600444316864014, 1.1911948919296265, 1.2223504781723022, 1.2535107135772705, 1.2846752405166626, 1.315843939781189, 1.3470163345336914, 1.3781923055648804, 1.4093714952468872, 1.4405537843704224, 1.4717389345169067, 1.5029268264770508, 1.5341172218322754, 1.565310001373291, 1.5965049266815186, 1.6277021169662476, 1.6589012145996094, 1.690102219581604, 1.7213048934936523, 1.752509355545044, 1.7837153673171997, 1.8149229288101196, 1.8461319208145142, 1.8773423433303833, 1.908553957939148, 1.939766764640808, 1.9709808826446533, 2.0021960735321045, 1.9709808826446533, 1.939766764640808, 1.908553957939148, 1.8773423433303833, 1.8461319208145142, 1.8149229288101196, 1.7837153673171997, 1.752509355545044, 1.7213048934936523, 1.690102219581604, 1.6589012145996094, 1.6277021169662476, 1.5965049266815186, 1.565310001373291, 1.5341172218322754, 1.5029268264770508, 1.4717389345169067, 1.4405537843704224, 1.4093714952468872, 1.3781923055648804, 1.3470163345336914, 1.315843939781189, 1.2846752405166626, 1.2535107135772705, 1.2223504781723022, 1.1911948919296265, 1.1600444316864014, 1.1288994550704956, 1.097760558128357, 1.0666279792785645, 1.035502552986145, 1.0043848752975464, 0.9732757210731506, 0.9421758651733398, 0.9110862612724304, 0.8800079822540283, 0.8489423394203186, 0.8178907632827759, 0.7868549227714539, 0.7558366656303406, 0.7248383164405823, 0.6938626170158386, 0.6629126071929932, 0.6319921612739563, 0.6011057496070862, 0.5702589750289917, 0.5394586324691772, 0.5087131261825562, 0.47803306579589844, 0.44743192195892334, 0.4169270098209381, 0.3865411579608917, 0.3563048243522644, 0.326259583234787, 0.2964635193347931, 0.26700010895729065, 0.23799291253089905, 0.20963136851787567, 0.18221724033355713, 0.15625, 0.13258251547813416, 0.11267347633838654, 0.09882117807865143, 0.125, 0.12884704768657684, 0.1397542506456375, 0.15625, 0.1767766922712326, 0.20009763538837433, 0.22534695267677307, 0.2519455552101135, 0.279508501291275, 0.3077768087387085, 0.3365727961063385, 0.3657718598842621, 0.3952847123146057, 0.4250459671020508, 0.455006867647171, 0.4851304590702057, 0.5153881907463074, 0.5457577705383301, 0.5762215256690979, 0.6067652702331543, 0.6373774409294128, 0.6680486798286438, 0.6987712383270264, 0.72953861951828, 0.7603453397750854, 0.7911868095397949, 0.822059154510498, 0.8529589772224426, 0.8838834762573242, 0.9148300886154175, 0.9457966089248657, 0.9767812490463257, 1.007782220840454, 1.0387980937957764, 1.069827675819397, 1.1008696556091309, 1.1319231986999512, 1.1629871129989624, 1.1940608024597168, 1.2251434326171875, 1.2562344074249268, 1.2873331308364868, 1.3184388875961304, 1.3495514392852783, 1.3806700706481934, 1.411794662475586, 1.4429244995117188, 1.4740595817565918, 1.5051993131637573, 1.5363435745239258, 1.5674920082092285, 1.598644495010376, 1.62980055809021, 1.66096031665802, 1.692123293876648, 1.7232894897460938, 1.7544585466384888, 1.7856305837631226, 1.8168052434921265, 1.847982406616211, 1.879162073135376, 1.9103440046310425, 1.941528081893921, 1.9727143049240112, 2.0039024353027344, 1.9727143049240112, 1.941528081893921, 1.9103440046310425, 1.879162073135376, 1.847982406616211, 1.8168052434921265, 1.7856305837631226, 1.7544585466384888, 1.7232894897460938, 1.692123293876648, 1.66096031665802, 1.62980055809021, 1.598644495010376, 1.5674920082092285, 1.5363435745239258, 1.5051993131637573, 1.4740595817565918, 1.4429244995117188, 1.411794662475586, 1.3806700706481934, 1.3495514392852783, 1.3184388875961304, 1.2873331308364868, 1.2562344074249268, 1.2251434326171875, 1.1940608024597168, 1.1629871129989624, 1.1319231986999512, 1.1008696556091309, 1.069827675819397, 1.0387980937957764, 1.007782220840454, 0.9767812490463257, 0.9457966089248657, 0.9148300886154175, 0.8838834762573242, 0.8529589772224426, 0.822059154510498, 0.7911868095397949, 0.7603453397750854, 0.72953861951828, 0.6987712383270264, 0.6680486798286438, 0.6373774409294128, 0.6067652702331543, 0.5762215256690979, 0.5457577705383301, 0.5153881907463074, 0.4851304590702057, 0.455006867647171, 0.4250459671020508, 0.3952847123146057, 0.3657718598842621, 0.3365727961063385, 0.3077768087387085, 0.279508501291275, 0.2519455552101135, 0.22534695267677307, 0.20009763538837433, 0.1767766922712326, 0.15625, 0.1397542506456375, 0.12884704768657684, 0.15625, 0.1593443602323532, 0.16828639805316925, 0.18221724033355713, 0.20009763538837433, 0.22097086906433105, 0.24407030642032623, 0.26882266998291016, 0.2948119044303894, 0.32173845171928406, 0.3493856191635132, 0.3775951862335205, 0.40625, 0.43526214361190796, 0.46456465125083923, 0.49410587549209595, 0.5238454341888428, 0.5537514090538025, 0.5837981700897217, 0.6139650940895081, 0.6442352533340454, 0.6745947599411011, 0.7050321102142334, 0.7355376482009888, 0.7661031484603882, 0.7967218160629272, 0.8273876309394836, 0.858095645904541, 0.8888413906097412, 0.9196211695671082, 0.9504316449165344, 0.981269896030426, 1.0121334791183472, 1.0430200099945068, 1.0739275217056274, 1.1048543453216553, 1.1357988119125366, 1.1667596101760864, 1.1977355480194092, 1.2287251949310303, 1.2597277164459229, 1.29074227809906, 1.3217679262161255, 1.3528038263320923, 1.3838493824005127, 1.4149038791656494, 1.4459669589996338, 1.477037787437439, 1.5081160068511963, 1.539201259613037, 1.5702930688858032, 1.6013909578323364, 1.6324946880340576, 1.6636039018630981, 1.694718360900879, 1.7258377075195312, 1.7569615840911865, 1.7880899906158447, 1.8192224502563477, 1.8503589630126953, 1.881499171257019, 1.9126429557800293, 1.9437901973724365, 1.9749406576156616, 2.006094217300415, 1.9749406576156616, 1.9437901973724365, 1.9126429557800293, 1.881499171257019, 1.8503589630126953, 1.8192224502563477, 1.7880899906158447, 1.7569615840911865, 1.7258377075195312, 1.694718360900879, 1.6636039018630981, 1.6324946880340576, 1.6013909578323364, 1.5702930688858032, 1.539201259613037, 1.5081160068511963, 1.477037787437439, 1.4459669589996338, 1.4149038791656494, 1.3838493824005127, 1.3528038263320923, 1.3217679262161255, 1.29074227809906, 1.2597277164459229, 1.2287251949310303, 1.1977355480194092, 1.1667596101760864, 1.1357988119125366, 1.1048543453216553, 1.0739275217056274, 1.0430200099945068, 1.0121334791183472, 0.981269896030426, 0.9504316449165344, 0.9196211695671082, 0.8888413906097412, 0.858095645904541, 0.8273876309394836, 0.7967218160629272, 0.7661031484603882, 0.7355376482009888, 0.7050321102142334, 0.6745947599411011, 0.6442352533340454, 0.6139650940895081, 0.5837981700897217, 0.5537514090538025, 0.5238454341888428, 0.49410587549209595, 0.46456465125083923, 0.43526214361190796, 0.40625, 0.3775951862335205, 0.3493856191635132, 0.32173845171928406, 0.2948119044303894, 0.26882266998291016, 0.24407030642032623, 0.22097086906433105, 0.20009763538837433, 0.18221724033355713, 0.16828639805316925, 0.1593443602323532, 0.1875, 0.19008633494377136, 0.19764235615730286, 0.20963136851787567, 0.22534695267677307, 0.24407030642032623, 0.2651650309562683, 0.28811076283454895, 0.3125, 0.3380204439163208, 0.36443448066711426, 0.3915613889694214, 0.41926273703575134, 0.44743192195892334, 0.4759858250617981, 0.504859209060669, 0.5340002179145813, 0.5633673667907715, 0.5929270386695862, 0.6226518154144287, 0.652519166469574, 0.6825103163719177, 0.7126096487045288, 0.7428039908409119, 0.7730823159217834, 0.8034350275993347, 0.8338540196418762, 0.8643323183059692, 0.8948638439178467, 0.9254432916641235, 0.9560661315917969, 0.986728310585022, 1.0174262523651123, 1.0481568574905396, 1.0789172649383545, 1.1097050905227661, 1.1405179500579834, 1.171354055404663, 1.2022114992141724, 1.233088731765747, 1.2639843225479126, 1.2948968410491943, 1.3258252143859863, 1.3567683696746826, 1.3877252340316772, 1.4186949729919434, 1.4496766328811646, 1.4806697368621826, 1.5116733312606812, 1.542686939239502, 1.5737098455429077, 1.6047414541244507, 1.6357815265655518, 1.6668294668197632, 1.6978846788406372, 1.7289470434188843, 1.7600159645080566, 1.7910912036895752, 1.8221725225448608, 1.8532593250274658, 1.8843517303466797, 1.9154491424560547, 1.9465514421463013, 1.9776583909988403, 2.0087697505950928, 1.9776583909988403, 1.9465514421463013, 1.9154491424560547, 1.8843517303466797, 1.8532593250274658, 1.8221725225448608, 1.7910912036895752, 1.7600159645080566, 1.7289470434188843, 1.6978846788406372, 1.6668294668197632, 1.6357815265655518, 1.6047414541244507, 1.5737098455429077, 1.542686939239502, 1.5116733312606812, 1.4806697368621826, 1.4496766328811646, 1.4186949729919434, 1.3877252340316772, 1.3567683696746826, 1.3258252143859863, 1.2948968410491943, 1.2639843225479126, 1.233088731765747, 1.2022114992141724, 1.171354055404663, 1.1405179500579834, 1.1097050905227661, 1.0789172649383545, 1.0481568574905396, 1.0174262523651123, 0.986728310585022, 0.9560661315917969, 0.9254432916641235, 0.8948638439178467, 0.8643323183059692, 0.8338540196418762, 0.8034350275993347, 0.7730823159217834, 0.7428039908409119, 0.7126096487045288, 0.6825103163719177, 0.652519166469574, 0.6226518154144287, 0.5929270386695862, 0.5633673667907715, 0.5340002179145813, 0.504859209060669, 0.4759858250617981, 0.44743192195892334, 0.41926273703575134, 0.3915613889694214, 0.36443448066711426, 0.3380204439163208, 0.3125, 0.28811076283454895, 0.2651650309562683, 0.24407030642032623, 0.22534695267677307, 0.20963136851787567, 0.19764235615730286, 0.19008633494377136, 0.21875, 0.22097086906433105, 0.2275034338235855, 0.23799291253089905, 0.2519455552101135, 0.26882266998291016, 0.28811076283454895, 0.30935922265052795, 0.332192063331604, 0.3563048243522644, 0.38145485520362854, 0.4074501395225525, 0.43413886427879333, 0.46140071749687195, 0.4891398847103119, 0.5172795653343201, 0.5457577705383301, 0.5745242834091187, 0.6035377383232117, 0.6327642798423767, 0.6621756553649902, 0.6917482614517212, 0.7214622497558594, 0.7513009309768677, 0.78125, 0.8112971782684326, 0.8414319753646851, 0.8716453313827515, 0.9019293785095215, 0.9322771430015564, 0.9626826047897339, 0.9931405186653137, 1.0236462354660034, 1.054195523262024, 1.0847846269607544, 1.115410566329956, 1.1460700035095215, 1.1767606735229492, 1.2074799537658691, 1.2382258176803589, 1.268996238708496, 1.2997896671295166, 1.3306043148040771, 1.3614387512207031, 1.392291784286499, 1.4231622219085693, 1.454048752784729, 1.4849505424499512, 1.5158666372299194, 1.5467960834503174, 1.5777381658554077, 1.6086921691894531, 1.6396574974060059, 1.670633316040039, 1.7016191482543945, 1.732614517211914, 1.76361882686615, 1.7946317195892334, 1.8256527185440063, 1.8566813468933105, 1.8877172470092773, 1.9187601804733276, 1.9498096704483032, 1.980865478515625, 2.011927366256714, 1.980865478515625, 1.9498096704483032, 1.9187601804733276, 1.8877172470092773, 1.8566813468933105, 1.8256527185440063, 1.7946317195892334, 1.76361882686615, 1.732614517211914, 1.7016191482543945, 1.670633316040039, 1.6396574974060059, 1.6086921691894531, 1.5777381658554077, 1.5467960834503174, 1.5158666372299194, 1.4849505424499512, 1.454048752784729, 1.4231622219085693, 1.392291784286499, 1.3614387512207031, 1.3306043148040771, 1.2997896671295166, 1.268996238708496, 1.2382258176803589, 1.2074799537658691, 1.1767606735229492, 1.1460700035095215, 1.115410566329956, 1.0847846269607544, 1.054195523262024, 1.0236462354660034, 0.9931405186653137, 0.9626826047897339, 0.9322771430015564, 0.9019293785095215, 0.8716453313827515, 0.8414319753646851, 0.8112971782684326, 0.78125, 0.7513009309768677, 0.7214622497558594, 0.6917482614517212, 0.6621756553649902, 0.6327642798423767, 0.6035377383232117, 0.5745242834091187, 0.5457577705383301, 0.5172795653343201, 0.4891398847103119, 0.46140071749687195, 0.43413886427879333, 0.4074501395225525, 0.38145485520362854, 0.3563048243522644, 0.332192063331604, 0.30935922265052795, 0.28811076283454895, 0.26882266998291016, 0.2519455552101135, 0.23799291253089905, 0.2275034338235855, 0.22097086906433105, 0.25, 0.2519455552101135, 0.2576940953731537, 0.26700010895729065, 0.279508501291275, 0.2948119044303894, 0.3125, 0.332192063331604, 0.3535533845424652, 0.37629982829093933, 0.40019527077674866, 0.4250459671020508, 0.45069390535354614, 0.4770105481147766, 0.503891110420227, 0.53125, 0.55901700258255, 0.5871341824531555, 0.615553617477417, 0.6442352533340454, 0.673145592212677, 0.7022563815116882, 0.7315437197685242, 0.7609872221946716, 0.7905694246292114, 0.8202753067016602, 0.8500919342041016, 0.8800079822540283, 0.910013735294342, 0.9401005506515503, 0.9702609181404114, 1.0004881620407104, 1.0307763814926147, 1.0611203908920288, 1.0915155410766602, 1.1219576597213745, 1.1524430513381958, 1.1829683780670166, 1.2135305404663086, 1.244126796722412, 1.2747548818588257, 1.3054124116897583, 1.3360973596572876, 1.3668079376220703, 1.3975424766540527, 1.4282993078231812, 1.45907723903656, 1.4898747205734253, 1.520690679550171, 1.5515239238739014, 1.5823736190795898, 1.6132386922836304, 1.644118309020996, 1.6750116348266602, 1.7059179544448853, 1.7368366718292236, 1.7677669525146484, 1.7987083196640015, 1.829660177230835, 1.8606219291687012, 1.8915932178497314, 1.9225735664367676, 1.9535624980926514, 1.9845595359802246, 2.015564441680908, 1.9845595359802246, 1.9535624980926514, 1.9225735664367676, 1.8915932178497314, 1.8606219291687012, 1.829660177230835, 1.7987083196640015, 1.7677669525146484, 1.7368366718292236, 1.7059179544448853, 1.6750116348266602, 1.644118309020996, 1.6132386922836304, 1.5823736190795898, 1.5515239238739014, 1.520690679550171, 1.4898747205734253, 1.45907723903656, 1.4282993078231812, 1.3975424766540527, 1.3668079376220703, 1.3360973596572876, 1.3054124116897583, 1.2747548818588257, 1.244126796722412, 1.2135305404663086, 1.1829683780670166, 1.1524430513381958, 1.1219576597213745, 1.0915155410766602, 1.0611203908920288, 1.0307763814926147, 1.0004881620407104, 0.9702609181404114, 0.9401005506515503, 0.910013735294342, 0.8800079822540283, 0.8500919342041016, 0.8202753067016602, 0.7905694246292114, 0.7609872221946716, 0.7315437197685242, 0.7022563815116882, 0.673145592212677, 0.6442352533340454, 0.615553617477417, 0.5871341824531555, 0.55901700258255, 0.53125, 0.503891110420227, 0.4770105481147766, 0.45069390535354614, 0.4250459671020508, 0.40019527077674866, 0.37629982829093933, 0.3535533845424652, 0.332192063331604, 0.3125, 0.2948119044303894, 0.279508501291275, 0.26700010895729065, 0.2576940953731537, 0.2519455552101135, 0.28125, 0.2829807996749878, 0.28811076283454895, 0.2964635193347931, 0.3077768087387085, 0.32173845171928406, 0.3380204439163208, 0.3563048243522644, 0.37629982829093933, 0.39774757623672485, 0.42042574286460876, 0.44414594769477844, 0.46875, 0.49410587549209595, 0.5201036334037781, 0.5466517210006714, 0.5736737251281738, 0.6011057496070862, 0.6288940906524658, 0.6569936275482178, 0.6853660345077515, 0.7139787077903748, 0.7428039908409119, 0.7718180418014526, 0.8010003566741943, 0.8303331136703491, 0.8598010540008545, 0.8893905878067017, 0.9190900921821594, 0.9488891363143921, 0.9787787199020386, 1.0087507963180542, 1.0387980937957764, 1.0689144134521484, 1.099094033241272, 1.1293319463729858, 1.1596235036849976, 1.1899645328521729, 1.2203514575958252, 1.2507810592651367, 1.28125, 1.3117557764053345, 1.34229576587677, 1.3728677034378052, 1.403469443321228, 1.4340991973876953, 1.4647551774978638, 1.4954357147216797, 1.5261393785476685, 1.556864857673645, 1.5876107215881348, 1.6183758974075317, 1.64915931224823, 1.679960012435913, 1.710776925086975, 1.7416093349456787, 1.772456407546997, 1.8033173084259033, 1.8341913223266602, 1.8650779724121094, 1.8959764242172241, 1.9268862009048462, 1.957806944847107, 1.9887378215789795, 2.0196785926818848, 1.9887378215789795, 1.957806944847107, 1.9268862009048462, 1.8959764242172241, 1.8650779724121094, 1.8341913223266602, 1.8033173084259033, 1.772456407546997, 1.7416093349456787, 1.710776925086975, 1.679960012435913, 1.64915931224823, 1.6183758974075317, 1.5876107215881348, 1.556864857673645, 1.5261393785476685, 1.4954357147216797, 1.4647551774978638, 1.4340991973876953, 1.403469443321228, 1.3728677034378052, 1.34229576587677, 1.3117557764053345, 1.28125, 1.2507810592651367, 1.2203514575958252, 1.1899645328521729, 1.1596235036849976, 1.1293319463729858, 1.099094033241272, 1.0689144134521484, 1.0387980937957764, 1.0087507963180542, 0.9787787199020386, 0.9488891363143921, 0.9190900921821594, 0.8893905878067017, 0.8598010540008545, 0.8303331136703491, 0.8010003566741943, 0.7718180418014526, 0.7428039908409119, 0.7139787077903748, 0.6853660345077515, 0.6569936275482178, 0.6288940906524658, 0.6011057496070862, 0.5736737251281738, 0.5466517210006714, 0.5201036334037781, 0.49410587549209595, 0.46875, 0.44414594769477844, 0.42042574286460876, 0.39774757623672485, 0.37629982829093933, 0.3563048243522644, 0.3380204439163208, 0.32173845171928406, 0.3077768087387085, 0.2964635193347931, 0.28811076283454895, 0.2829807996749878, 0.3125, 0.3140586018562317, 0.3186887204647064, 0.326259583234787, 0.3365727961063385, 0.3493856191635132, 0.36443448066711426, 0.38145485520362854, 0.40019527077674866, 0.42042574286460876, 0.4419417381286621, 0.46456465125083923, 0.48814061284065247, 0.5125381350517273, 0.5376453399658203, 0.5633673667907715, 0.5896238088607788, 0.6163463592529297, 0.6434769034385681, 0.6709659695625305, 0.6987712383270264, 0.7268564701080322, 0.755190372467041, 0.7837460041046143, 0.8125, 0.8414319753646851, 0.8705242872238159, 0.8997612595558167, 0.9291293025016785, 0.9586163759231567, 0.9882117509841919, 1.0179060697555542, 1.0476908683776855, 1.0775587558746338, 1.107502818107605, 1.1375172138214111, 1.1675963401794434, 1.1977355480194092, 1.2279301881790161, 1.258176326751709, 1.2884705066680908, 1.3188092708587646, 1.3491895198822021, 1.3796087503433228, 1.4100642204284668, 1.4405537843704224, 1.4710752964019775, 1.50162672996521, 1.5322062969207764, 1.5628124475479126, 1.5934436321258545, 1.624098300933838, 1.6547752618789673, 1.6854733228683472, 1.716191291809082, 1.746928095817566, 1.7776827812194824, 1.8084545135498047, 1.8392423391342163, 1.87004554271698, 1.9008632898330688, 1.9316949844360352, 1.962539792060852, 1.9933973550796509, 2.0242669582366943, 1.9933973550796509, 1.962539792060852, 1.9316949844360352, 1.9008632898330688, 1.87004554271698, 1.8392423391342163, 1.8084545135498047, 1.7776827812194824, 1.746928095817566, 1.716191291809082, 1.6854733228683472, 1.6547752618789673, 1.624098300933838, 1.5934436321258545, 1.5628124475479126, 1.5322062969207764, 1.50162672996521, 1.4710752964019775, 1.4405537843704224, 1.4100642204284668, 1.3796087503433228, 1.3491895198822021, 1.3188092708587646, 1.2884705066680908, 1.258176326751709, 1.2279301881790161, 1.1977355480194092, 1.1675963401794434, 1.1375172138214111, 1.107502818107605, 1.0775587558746338, 1.0476908683776855, 1.0179060697555542, 0.9882117509841919, 0.9586163759231567, 0.9291293025016785, 0.8997612595558167, 0.8705242872238159, 0.8414319753646851, 0.8125, 0.7837460041046143, 0.755190372467041, 0.7268564701080322, 0.6987712383270264, 0.6709659695625305, 0.6434769034385681, 0.6163463592529297, 0.5896238088607788, 0.5633673667907715, 0.5376453399658203, 0.5125381350517273, 0.48814061284065247, 0.46456465125083923, 0.4419417381286621, 0.42042574286460876, 0.40019527077674866, 0.38145485520362854, 0.36443448066711426, 0.3493856191635132, 0.3365727961063385, 0.326259583234787, 0.3186887204647064, 0.3140586018562317, 0.34375, 0.34516751766204834, 0.3493856191635132, 0.3563048243522644, 0.3657718598842621, 0.3775951862335205, 0.3915613889694214, 0.4074501395225525, 0.4250459671020508, 0.44414594769477844, 0.46456465125083923, 0.48613590002059937, 0.5087131261825562, 0.5321683287620544, 0.5563904047012329, 0.5812836289405823, 0.6067652702331543, 0.6327642798423767, 0.6592194437980652, 0.6860780715942383, 0.713294506072998, 0.740829348564148, 0.7686483860015869, 0.7967218160629272, 0.8250236511230469, 0.8535312414169312, 0.8822246193885803, 0.9110862612724304, 0.9401005506515503, 0.9692538976669312, 0.998534083366394, 1.0279302597045898, 1.057432770729065, 1.0870329141616821, 1.1167230606079102, 1.146496057510376, 1.1763455867767334, 1.206266164779663, 1.2362525463104248, 1.2662999629974365, 1.296404242515564, 1.3265615701675415, 1.3567683696746826, 1.3870213031768799, 1.417317509651184, 1.447654366493225, 1.4780292510986328, 1.5084397792816162, 1.5388840436935425, 1.5693598985671997, 1.5998656749725342, 1.6303997039794922, 1.66096031665802, 1.691546082496643, 1.7221556901931763, 1.7527879476547241, 1.7834416627883911, 1.8141156435012817, 1.8448090553283691, 1.8755207061767578, 1.90625, 1.9369958639144897, 1.9677577018737793, 1.9985345602035522, 2.0293259620666504, 1.9985345602035522, 1.9677577018737793, 1.9369958639144897, 1.90625, 1.8755207061767578, 1.8448090553283691, 1.8141156435012817, 1.7834416627883911, 1.7527879476547241, 1.7221556901931763, 1.691546082496643, 1.66096031665802, 1.6303997039794922, 1.5998656749725342, 1.5693598985671997, 1.5388840436935425, 1.5084397792816162, 1.4780292510986328, 1.447654366493225, 1.417317509651184, 1.3870213031768799, 1.3567683696746826, 1.3265615701675415, 1.296404242515564, 1.2662999629974365, 1.2362525463104248, 1.206266164779663, 1.1763455867767334, 1.146496057510376, 1.1167230606079102, 1.0870329141616821, 1.057432770729065, 1.0279302597045898, 0.998534083366394, 0.9692538976669312, 0.9401005506515503, 0.9110862612724304, 0.8822246193885803, 0.8535312414169312, 0.8250236511230469, 0.7967218160629272, 0.7686483860015869, 0.740829348564148, 0.713294506072998, 0.6860780715942383, 0.6592194437980652, 0.6327642798423767, 0.6067652702331543, 0.5812836289405823, 0.5563904047012329, 0.5321683287620544, 0.5087131261825562, 0.48613590002059937, 0.46456465125083923, 0.44414594769477844, 0.4250459671020508, 0.4074501395225525, 0.3915613889694214, 0.3775951862335205, 0.3657718598842621, 0.3563048243522644, 0.3493856191635132, 0.34516751766204834, 0.375, 0.37629982829093933, 0.3801726698875427, 0.3865411579608917, 0.3952847123146057, 0.40625, 0.41926273703575134, 0.43413886427879333, 0.45069390535354614, 0.46875, 0.48814061284065247, 0.5087131261825562, 0.5303300619125366, 0.5528689622879028, 0.5762215256690979, 0.6002929210662842, 0.625, 0.650270402431488, 0.6760408878326416, 0.7022563815116882, 0.7288689613342285, 0.7558366656303406, 0.7831227779388428, 0.8106951117515564, 0.8385254740715027, 0.8665890097618103, 0.8948638439178467, 0.9233304262161255, 0.9519716501235962, 0.9807721972465515, 1.009718418121338, 1.0387980937957764, 1.0680004358291626, 1.0973156690597534, 1.126734733581543, 1.15625, 1.1858540773391724, 1.2155406475067139, 1.2453036308288574, 1.2751379013061523, 1.305038332939148, 1.3350006341934204, 1.3650206327438354, 1.395094633102417, 1.4252192974090576, 1.4553914070129395, 1.4856079816818237, 1.5158666372299194, 1.546164631843567, 1.5764998197555542, 1.6068700551986694, 1.6372733116149902, 1.6677080392837524, 1.6981722116470337, 1.7286646366119385, 1.7591835260391235, 1.7897276878356934, 1.8202956914901733, 1.850886583328247, 1.881499171257019, 1.9121322631835938, 1.9427851438522339, 1.973456621170044, 2.004146099090576, 2.0348525047302246, 2.004146099090576, 1.973456621170044, 1.9427851438522339, 1.9121322631835938, 1.881499171257019, 1.850886583328247, 1.8202956914901733, 1.7897276878356934, 1.7591835260391235, 1.7286646366119385, 1.6981722116470337, 1.6677080392837524, 1.6372733116149902, 1.6068700551986694, 1.5764998197555542, 1.546164631843567, 1.5158666372299194, 1.4856079816818237, 1.4553914070129395, 1.4252192974090576, 1.395094633102417, 1.3650206327438354, 1.3350006341934204, 1.305038332939148, 1.2751379013061523, 1.2453036308288574, 1.2155406475067139, 1.1858540773391724, 1.15625, 1.126734733581543, 1.0973156690597534, 1.0680004358291626, 1.0387980937957764, 1.009718418121338, 0.9807721972465515, 0.9519716501235962, 0.9233304262161255, 0.8948638439178467, 0.8665890097618103, 0.8385254740715027, 0.8106951117515564, 0.7831227779388428, 0.7558366656303406, 0.7288689613342285, 0.7022563815116882, 0.6760408878326416, 0.650270402431488, 0.625, 0.6002929210662842, 0.5762215256690979, 0.5528689622879028, 0.5303300619125366, 0.5087131261825562, 0.48814061284065247, 0.46875, 0.45069390535354614, 0.43413886427879333, 0.41926273703575134, 0.40625, 0.3952847123146057, 0.3865411579608917, 0.3801726698875427, 0.37629982829093933, 0.40625, 0.4074501395225525, 0.411029577255249, 0.4169270098209381, 0.4250459671020508, 0.43526214361190796, 0.44743192195892334, 0.46140071749687195, 0.4770105481147766, 0.49410587549209595, 0.5125381350517273, 0.5321683287620544, 0.5528689622879028, 0.5745242834091187, 0.5970304012298584, 0.6202948093414307, 0.6442352533340454, 0.668779194355011, 0.6938626170158386, 0.7194290161132812, 0.7454288005828857, 0.7718180418014526, 0.7985582947731018, 0.8256152868270874, 0.8529589772224426, 0.8805626630783081, 0.9084026217460632, 0.9364577531814575, 0.9647093415260315, 0.9931405186653137, 1.0217363834381104, 1.0504834651947021, 1.0793697834014893, 1.1083842515945435, 1.1375172138214111, 1.1667596101760864, 1.1961036920547485, 1.2255419492721558, 1.2550678253173828, 1.2846752405166626, 1.3143588304519653, 1.3441133499145508, 1.373934268951416, 1.4038172960281372, 1.4337587356567383, 1.4637547731399536, 1.4938023090362549, 1.5238981246948242, 1.5540395975112915, 1.584223985671997, 1.61444890499115, 1.644712209701538, 1.6750116348266602, 1.7053455114364624, 1.7357118129730225, 1.7661088705062866, 1.7965352535247803, 1.8269895315170288, 1.857470154762268, 1.8879759311676025, 1.9185056686401367, 1.9490582942962646, 1.9796326160430908, 2.010227680206299, 2.0408427715301514, 2.010227680206299, 1.9796326160430908, 1.9490582942962646, 1.9185056686401367, 1.8879759311676025, 1.857470154762268, 1.8269895315170288, 1.7965352535247803, 1.7661088705062866, 1.7357118129730225, 1.7053455114364624, 1.6750116348266602, 1.644712209701538, 1.61444890499115, 1.584223985671997, 1.5540395975112915, 1.5238981246948242, 1.4938023090362549, 1.4637547731399536, 1.4337587356567383, 1.4038172960281372, 1.373934268951416, 1.3441133499145508, 1.3143588304519653, 1.2846752405166626, 1.2550678253173828, 1.2255419492721558, 1.1961036920547485, 1.1667596101760864, 1.1375172138214111, 1.1083842515945435, 1.0793697834014893, 1.0504834651947021, 1.0217363834381104, 0.9931405186653137, 0.9647093415260315, 0.9364577531814575, 0.9084026217460632, 0.8805626630783081, 0.8529589772224426, 0.8256152868270874, 0.7985582947731018, 0.7718180418014526, 0.7454288005828857, 0.7194290161132812, 0.6938626170158386, 0.668779194355011, 0.6442352533340454, 0.6202948093414307, 0.5970304012298584, 0.5745242834091187, 0.5528689622879028, 0.5321683287620544, 0.5125381350517273, 0.49410587549209595, 0.4770105481147766, 0.46140071749687195, 0.44743192195892334, 0.43526214361190796, 0.4250459671020508, 0.4169270098209381, 0.411029577255249, 0.4074501395225525, 0.4375, 0.4386146366596222, 0.4419417381286621, 0.44743192195892334, 0.455006867647171, 0.46456465125083923, 0.4759858250617981, 0.4891398847103119, 0.503891110420227, 0.5201036334037781, 0.5376453399658203, 0.5563904047012329, 0.5762215256690979, 0.5970304012298584, 0.6187184453010559, 0.6411963701248169, 0.664384126663208, 0.6882098317146301, 0.7126096487045288, 0.7375264763832092, 0.7629097104072571, 0.7887143492698669, 0.814900279045105, 0.8414319753646851, 0.8682777285575867, 0.8954092860221863, 0.9228014349937439, 0.9504316449165344, 0.9782797694206238, 1.0063276290893555, 1.0345591306686401, 1.0629594326019287, 1.0915155410766602, 1.1202155351638794, 1.1490485668182373, 1.1780048608779907, 1.2070754766464233, 1.2362525463104248, 1.2655285596847534, 1.2948968410491943, 1.3243513107299805, 1.3538862466812134, 1.3834965229034424, 1.4131773710250854, 1.4429244995117188, 1.472733974456787, 1.5026018619537354, 1.5325249433517456, 1.5625, 1.5925240516662598, 1.6225943565368652, 1.6527085304260254, 1.6828639507293701, 1.7130587100982666, 1.743290662765503, 1.7735579013824463, 1.803858757019043, 1.8341913223266602, 1.8645542860031128, 1.8949459791183472, 1.9253652095794678, 1.9558106660842896, 1.9862810373306274, 2.016775369644165, 2.047292470932007, 2.016775369644165, 1.9862810373306274, 1.9558106660842896, 1.9253652095794678, 1.8949459791183472, 1.8645542860031128, 1.8341913223266602, 1.803858757019043, 1.7735579013824463, 1.743290662765503, 1.7130587100982666, 1.6828639507293701, 1.6527085304260254, 1.6225943565368652, 1.5925240516662598, 1.5625, 1.5325249433517456, 1.5026018619537354, 1.472733974456787, 1.4429244995117188, 1.4131773710250854, 1.3834965229034424, 1.3538862466812134, 1.3243513107299805, 1.2948968410491943, 1.2655285596847534, 1.2362525463104248, 1.2070754766464233, 1.1780048608779907, 1.1490485668182373, 1.1202155351638794, 1.0915155410766602, 1.0629594326019287, 1.0345591306686401, 1.0063276290893555, 0.9782797694206238, 0.9504316449165344, 0.9228014349937439, 0.8954092860221863, 0.8682777285575867, 0.8414319753646851, 0.814900279045105, 0.7887143492698669, 0.7629097104072571, 0.7375264763832092, 0.7126096487045288, 0.6882098317146301, 0.664384126663208, 0.6411963701248169, 0.6187184453010559, 0.5970304012298584, 0.5762215256690979, 0.5563904047012329, 0.5376453399658203, 0.5201036334037781, 0.503891110420227, 0.4891398847103119, 0.4759858250617981, 0.46456465125083923, 0.455006867647171, 0.44743192195892334, 0.4419417381286621, 0.4386146366596222, 0.46875, 0.469790518283844, 0.47289830446243286, 0.47803306579589844, 0.4851304590702057, 0.49410587549209595, 0.504859209060669, 0.5172795653343201, 0.53125, 0.5466517210006714, 0.5633673667907715, 0.5812836289405823, 0.6002929210662842, 0.6202948093414307, 0.6411963701248169, 0.6629126071929932, 0.6853660345077515, 0.7084864974021912, 0.7322109341621399, 0.7564824223518372, 0.78125, 0.8064680099487305, 0.8320954442024231, 0.858095645904541, 0.8844357132911682, 0.9110862612724304, 0.9380207061767578, 0.9652153253555298, 0.9926487803459167, 1.0203016996383667, 1.0481568574905396, 1.0761984586715698, 1.104412317276001, 1.1327855587005615, 1.1613065004348755, 1.1899645328521729, 1.21875, 1.2476540803909302, 1.276668667793274, 1.305786371231079, 1.3350006341934204, 1.364305019378662, 1.3936939239501953, 1.4231622219085693, 1.452704906463623, 1.4823176860809326, 1.5119962692260742, 1.5417370796203613, 1.5715364217758179, 1.6013909578323364, 1.6312979459762573, 1.6612542867660522, 1.691257357597351, 1.7213048934936523, 1.751394510269165, 1.7815240621566772, 1.8116916418075562, 1.8418952226638794, 1.8721332550048828, 1.9024039506912231, 1.9327057600021362, 1.963037371635437, 1.9933973550796509, 2.0237843990325928, 2.054197311401367, 2.0237843990325928, 1.9933973550796509, 1.963037371635437, 1.9327057600021362, 1.9024039506912231, 1.8721332550048828, 1.8418952226638794, 1.8116916418075562, 1.7815240621566772, 1.751394510269165, 1.7213048934936523, 1.691257357597351, 1.6612542867660522, 1.6312979459762573, 1.6013909578323364, 1.5715364217758179, 1.5417370796203613, 1.5119962692260742, 1.4823176860809326, 1.452704906463623, 1.4231622219085693, 1.3936939239501953, 1.364305019378662, 1.3350006341934204, 1.305786371231079, 1.276668667793274, 1.2476540803909302, 1.21875, 1.1899645328521729, 1.1613065004348755, 1.1327855587005615, 1.104412317276001, 1.0761984586715698, 1.0481568574905396, 1.0203016996383667, 0.9926487803459167, 0.9652153253555298, 0.9380207061767578, 0.9110862612724304, 0.8844357132911682, 0.858095645904541, 0.8320954442024231, 0.8064680099487305, 0.78125, 0.7564824223518372, 0.7322109341621399, 0.7084864974021912, 0.6853660345077515, 0.6629126071929932, 0.6411963701248169, 0.6202948093414307, 0.6002929210662842, 0.5812836289405823, 0.5633673667907715, 0.5466517210006714, 0.53125, 0.5172795653343201, 0.504859209060669, 0.49410587549209595, 0.4851304590702057, 0.47803306579589844, 0.47289830446243286, 0.469790518283844, 0.5, 0.5009756088256836, 0.503891110420227, 0.5087131261825562, 0.5153881907463074, 0.5238454341888428, 0.5340002179145813, 0.5457577705383301, 0.55901700258255, 0.5736737251281738, 0.5896238088607788, 0.6067652702331543, 0.625, 0.6442352533340454, 0.664384126663208, 0.6853660345077515, 0.7071067690849304, 0.72953861951828, 0.7525996565818787, 0.7762339115142822, 0.8003905415534973, 0.8250236511230469, 0.8500919342041016, 0.8755578398704529, 0.9013878107070923, 0.9275513887405396, 0.9540210962295532, 0.9807721972465515, 1.007782220840454, 1.0350309610366821, 1.0625, 1.0901727676391602, 1.1180340051651, 1.1460700035095215, 1.174268364906311, 1.2026176452636719, 1.231107234954834, 1.2597277164459229, 1.2884705066680908, 1.3173273801803589, 1.346291184425354, 1.3753551244735718, 1.4045127630233765, 1.4337587356567383, 1.4630874395370483, 1.4924942255020142, 1.5219744443893433, 1.5515239238739014, 1.5811388492584229, 1.6108155250549316, 1.6405506134033203, 1.6703410148620605, 1.7001838684082031, 1.7300763130187988, 1.7600159645080566, 1.7900004386901855, 1.820027470588684, 1.8500950336456299, 1.8802011013031006, 1.9103440046310425, 1.9405218362808228, 1.9707331657409668, 2.000976324081421, 2.03125, 2.0615527629852295, 2.03125, 2.000976324081421, 1.9707331657409668, 1.9405218362808228, 1.9103440046310425, 1.8802011013031006, 1.8500950336456299, 1.820027470588684, 1.7900004386901855, 1.7600159645080566, 1.7300763130187988, 1.7001838684082031, 1.6703410148620605, 1.6405506134033203, 1.6108155250549316, 1.5811388492584229, 1.5515239238739014, 1.5219744443893433, 1.4924942255020142, 1.4630874395370483, 1.4337587356567383, 1.4045127630233765, 1.3753551244735718, 1.346291184425354, 1.3173273801803589, 1.2884705066680908, 1.2597277164459229, 1.231107234954834, 1.2026176452636719, 1.174268364906311, 1.1460700035095215, 1.1180340051651, 1.0901727676391602, 1.0625, 1.0350309610366821, 1.007782220840454, 0.9807721972465515, 0.9540210962295532, 0.9275513887405396, 0.9013878107070923, 0.8755578398704529, 0.8500919342041016, 0.8250236511230469, 0.8003905415534973, 0.7762339115142822, 0.7525996565818787, 0.72953861951828, 0.7071067690849304, 0.6853660345077515, 0.664384126663208, 0.6442352533340454, 0.625, 0.6067652702331543, 0.5896238088607788, 0.5736737251281738, 0.55901700258255, 0.5457577705383301, 0.5340002179145813, 0.5238454341888428, 0.5153881907463074, 0.5087131261825562, 0.503891110420227, 0.5009756088256836, 0.53125, 0.5321683287620544, 0.5349138379096985, 0.5394586324691772, 0.5457577705383301, 0.5537514090538025, 0.5633673667907715, 0.5745242834091187, 0.5871341824531555, 0.6011057496070862, 0.6163463592529297, 0.6327642798423767, 0.650270402431488, 0.668779194355011, 0.6882098317146301, 0.7084864974021912, 0.72953861951828, 0.7513009309768677, 0.7737136483192444, 0.7967218160629272, 0.8202753067016602, 0.8443285226821899, 0.8688399195671082, 0.8937718272209167, 0.9190900921821594, 0.9447635412216187, 0.9707640409469604, 0.9970660209655762, 1.0236462354660034, 1.0504834651947021, 1.0775587558746338, 1.1048543453216553, 1.1323543787002563, 1.1600444316864014, 1.1879111528396606, 1.2159422636032104, 1.244126796722412, 1.2724546194076538, 1.3009161949157715, 1.3295029401779175, 1.358207106590271, 1.3870213031768799, 1.4159388542175293, 1.4449535608291626, 1.4740595817565918, 1.5032516717910767, 1.5325249433517456, 1.5618748664855957, 1.5912971496582031, 1.6207878589630127, 1.6503432989120483, 1.679960012435913, 1.7096349000930786, 1.7393649816513062, 1.769147515296936, 1.7989797592163086, 1.8288593292236328, 1.8587840795516968, 1.8887516260147095, 1.9187601804733276, 1.948807716369629, 1.9788925647735596, 2.0090129375457764, 2.0391671657562256, 2.0693540573120117, 2.0391671657562256, 2.0090129375457764, 1.9788925647735596, 1.948807716369629, 1.9187601804733276, 1.8887516260147095, 1.8587840795516968, 1.8288593292236328, 1.7989797592163086, 1.769147515296936, 1.7393649816513062, 1.7096349000930786, 1.679960012435913, 1.6503432989120483, 1.6207878589630127, 1.5912971496582031, 1.5618748664855957, 1.5325249433517456, 1.5032516717910767, 1.4740595817565918, 1.4449535608291626, 1.4159388542175293, 1.3870213031768799, 1.358207106590271, 1.3295029401779175, 1.3009161949157715, 1.2724546194076538, 1.244126796722412, 1.2159422636032104, 1.1879111528396606, 1.1600444316864014, 1.1323543787002563, 1.1048543453216553, 1.0775587558746338, 1.0504834651947021, 1.0236462354660034, 0.9970660209655762, 0.9707640409469604, 0.9447635412216187, 0.9190900921821594, 0.8937718272209167, 0.8688399195671082, 0.8443285226821899, 0.8202753067016602, 0.7967218160629272, 0.7737136483192444, 0.7513009309768677, 0.72953861951828, 0.7084864974021912, 0.6882098317146301, 0.668779194355011, 0.650270402431488, 0.6327642798423767, 0.6163463592529297, 0.6011057496070862, 0.5871341824531555, 0.5745242834091187, 0.5633673667907715, 0.5537514090538025, 0.5457577705383301, 0.5394586324691772, 0.5349138379096985, 0.5321683287620544, 0.5625, 0.5633673667907715, 0.5659615993499756, 0.5702589750289917, 0.5762215256690979, 0.5837981700897217, 0.5929270386695862, 0.6035377383232117, 0.615553617477417, 0.6288940906524658, 0.6434769034385681, 0.6592194437980652, 0.6760408878326416, 0.6938626170158386, 0.7126096487045288, 0.7322109341621399, 0.7525996565818787, 0.7737136483192444, 0.7954951524734497, 0.8178907632827759, 0.8408514857292175, 0.8643323183059692, 0.8882918953895569, 0.9126926064491272, 0.9375, 0.9626826047897339, 0.9882117509841919, 1.0140613317489624, 1.0402072668075562, 1.0666279792785645, 1.0933034420013428, 1.1202155351638794, 1.1473474502563477, 1.1746841669082642, 1.2022114992141724, 1.2299168109893799, 1.2577881813049316, 1.2858150005340576, 1.3139872550964355, 1.34229576587677, 1.370732069015503, 1.399288296699524, 1.4279574155807495, 1.4567327499389648, 1.4856079816818237, 1.5145776271820068, 1.5436360836029053, 1.5727787017822266, 1.6020007133483887, 1.6312979459762573, 1.6606662273406982, 1.690102219581604, 1.719602108001709, 1.7491627931594849, 1.7787811756134033, 1.8084545135498047, 1.8381801843643188, 1.8679555654525757, 1.8977782726287842, 1.927646279335022, 1.9575574398040771, 1.987509846687317, 2.0175015926361084, 2.0475308895111084, 2.0775961875915527, 2.0475308895111084, 2.0175015926361084, 1.987509846687317, 1.9575574398040771, 1.927646279335022, 1.8977782726287842, 1.8679555654525757, 1.8381801843643188, 1.8084545135498047, 1.7787811756134033, 1.7491627931594849, 1.719602108001709, 1.690102219581604, 1.6606662273406982, 1.6312979459762573, 1.6020007133483887, 1.5727787017822266, 1.5436360836029053, 1.5145776271820068, 1.4856079816818237, 1.4567327499389648, 1.4279574155807495, 1.399288296699524, 1.370732069015503, 1.34229576587677, 1.3139872550964355, 1.2858150005340576, 1.2577881813049316, 1.2299168109893799, 1.2022114992141724, 1.1746841669082642, 1.1473474502563477, 1.1202155351638794, 1.0933034420013428, 1.0666279792785645, 1.0402072668075562, 1.0140613317489624, 0.9882117509841919, 0.9626826047897339, 0.9375, 0.9126926064491272, 0.8882918953895569, 0.8643323183059692, 0.8408514857292175, 0.8178907632827759, 0.7954951524734497, 0.7737136483192444, 0.7525996565818787, 0.7322109341621399, 0.7126096487045288, 0.6938626170158386, 0.6760408878326416, 0.6592194437980652, 0.6434769034385681, 0.6288940906524658, 0.615553617477417, 0.6035377383232117, 0.5929270386695862, 0.5837981700897217, 0.5762215256690979, 0.5702589750289917, 0.5659615993499756, 0.5633673667907715, 0.59375, 0.5945718288421631, 0.5970304012298584, 0.6011057496070862, 0.6067652702331543, 0.6139650940895081, 0.6226518154144287, 0.6327642798423767, 0.6442352533340454, 0.6569936275482178, 0.6709659695625305, 0.6860780715942383, 0.7022563815116882, 0.7194290161132812, 0.7375264763832092, 0.7564824223518372, 0.7762339115142822, 0.7967218160629272, 0.8178907632827759, 0.839689314365387, 0.8620696663856506, 0.8849876523017883, 0.9084026217460632, 0.9322771430015564, 0.9565767645835876, 0.981269896030426, 1.0063276290893555, 1.0317233800888062, 1.057432770729065, 1.0834335088729858, 1.1097050905227661, 1.1362286806106567, 1.1629871129989624, 1.1899645328521729, 1.217146396636963, 1.2445192337036133, 1.2720707654953003, 1.2997896671295166, 1.3276653289794922, 1.355688214302063, 1.3838493824005127, 1.4121404886245728, 1.4405537843704224, 1.4690823554992676, 1.497719645500183, 1.5264593362808228, 1.5552959442138672, 1.584223985671997, 1.6132386922836304, 1.6423354148864746, 1.671509861946106, 1.7007580995559692, 1.7300763130187988, 1.7594610452651978, 1.7889089584350586, 1.8184170722961426, 1.847982406616211, 1.8776023387908936, 1.9072743654251099, 1.9369958639144897, 1.9667649269104004, 1.9965790510177612, 2.0264365673065186, 2.05633544921875, 2.0862739086151123, 2.05633544921875, 2.0264365673065186, 1.9965790510177612, 1.9667649269104004, 1.9369958639144897, 1.9072743654251099, 1.8776023387908936, 1.847982406616211, 1.8184170722961426, 1.7889089584350586, 1.7594610452651978, 1.7300763130187988, 1.7007580995559692, 1.671509861946106, 1.6423354148864746, 1.6132386922836304, 1.584223985671997, 1.5552959442138672, 1.5264593362808228, 1.497719645500183, 1.4690823554992676, 1.4405537843704224, 1.4121404886245728, 1.3838493824005127, 1.355688214302063, 1.3276653289794922, 1.2997896671295166, 1.2720707654953003, 1.2445192337036133, 1.217146396636963, 1.1899645328521729, 1.1629871129989624, 1.1362286806106567, 1.1097050905227661, 1.0834335088729858, 1.057432770729065, 1.0317233800888062, 1.0063276290893555, 0.981269896030426, 0.9565767645835876, 0.9322771430015564, 0.9084026217460632, 0.8849876523017883, 0.8620696663856506, 0.839689314365387, 0.8178907632827759, 0.7967218160629272, 0.7762339115142822, 0.7564824223518372, 0.7375264763832092, 0.7194290161132812, 0.7022563815116882, 0.6860780715942383, 0.6709659695625305, 0.6569936275482178, 0.6442352533340454, 0.6327642798423767, 0.6226518154144287, 0.6139650940895081, 0.6067652702331543, 0.6011057496070862, 0.5970304012298584, 0.5945718288421631, 0.625, 0.6257807612419128, 0.6281172037124634, 0.6319921612739563, 0.6373774409294128, 0.6442352533340454, 0.652519166469574, 0.6621756553649902, 0.673145592212677, 0.6853660345077515, 0.6987712383270264, 0.713294506072998, 0.7288689613342285, 0.7454288005828857, 0.7629097104072571, 0.78125, 0.8003905415534973, 0.8202753067016602, 0.8408514857292175, 0.8620696663856506, 0.8838834762573242, 0.90625, 0.9291293025016785, 0.9524844288825989, 0.9762812256813049, 1.0004881620407104, 1.0250762701034546, 1.050018548965454, 1.0752906799316406, 1.1008696556091309, 1.126734733581543, 1.1528667211532593, 1.1792476177215576, 1.2058613300323486, 1.2326927185058594, 1.2597277164459229, 1.2869538068771362, 1.3143588304519653, 1.341931939125061, 1.369662880897522, 1.3975424766540527, 1.425561785697937, 1.4537129402160645, 1.4819881916046143, 1.510380744934082, 1.5388840436935425, 1.5674920082092285, 1.5961991548538208, 1.625, 1.653889775276184, 1.6828639507293701, 1.7119182348251343, 1.7410485744476318, 1.7702511548995972, 1.7995225191116333, 1.8288593292236328, 1.858258605003357, 1.8877172470092773, 1.9172327518463135, 1.9468022584915161, 1.9764235019683838, 2.006094217300415, 2.0358121395111084, 2.065575361251831, 2.095381736755371, 2.065575361251831, 2.0358121395111084, 2.006094217300415, 1.9764235019683838, 1.9468022584915161, 1.9172327518463135, 1.8877172470092773, 1.858258605003357, 1.8288593292236328, 1.7995225191116333, 1.7702511548995972, 1.7410485744476318, 1.7119182348251343, 1.6828639507293701, 1.653889775276184, 1.625, 1.5961991548538208, 1.5674920082092285, 1.5388840436935425, 1.510380744934082, 1.4819881916046143, 1.4537129402160645, 1.425561785697937, 1.3975424766540527, 1.369662880897522, 1.341931939125061, 1.3143588304519653, 1.2869538068771362, 1.2597277164459229, 1.2326927185058594, 1.2058613300323486, 1.1792476177215576, 1.1528667211532593, 1.126734733581543, 1.1008696556091309, 1.0752906799316406, 1.050018548965454, 1.0250762701034546, 1.0004881620407104, 0.9762812256813049, 0.9524844288825989, 0.9291293025016785, 0.90625, 0.8838834762573242, 0.8620696663856506, 0.8408514857292175, 0.8202753067016602, 0.8003905415534973, 0.78125, 0.7629097104072571, 0.7454288005828857, 0.7288689613342285, 0.713294506072998, 0.6987712383270264, 0.6853660345077515, 0.673145592212677, 0.6621756553649902, 0.652519166469574, 0.6442352533340454, 0.6373774409294128, 0.6319921612739563, 0.6281172037124634, 0.6257807612419128, 0.65625, 0.6569936275482178, 0.6592194437980652, 0.6629126071929932, 0.6680486798286438, 0.6745947599411011, 0.6825103163719177, 0.6917482614517212, 0.7022563815116882, 0.7139787077903748, 0.7268564701080322, 0.740829348564148, 0.7558366656303406, 0.7718180418014526, 0.7887143492698669, 0.8064680099487305, 0.8250236511230469, 0.8443285226821899, 0.8643323183059692, 0.8849876523017883, 0.90625, 0.9280776381492615, 0.9504316449165344, 0.9732757210731506, 0.996576189994812, 1.0203016996383667, 1.0444234609603882, 1.0689144134521484, 1.09375, 1.11890709400177, 1.144364595413208, 1.170102834701538, 1.1961036920547485, 1.2223504781723022, 1.248827576637268, 1.2755206823349, 1.3024166822433472, 1.3295029401779175, 1.3567683696746826, 1.3842021226882935, 1.411794662475586, 1.4395365715026855, 1.4674196243286133, 1.4954357147216797, 1.5235776901245117, 1.5518386363983154, 1.580212116241455, 1.6086921691894531, 1.6372733116149902, 1.6659504175186157, 1.694718360900879, 1.7235727310180664, 1.752509355545044, 1.7815240621566772, 1.8106132745742798, 1.8397732973098755, 1.869000792503357, 1.8982927799224854, 1.927646279335022, 1.9570585489273071, 1.9865268468856812, 2.0160489082336426, 2.0456223487854004, 2.075244665145874, 2.1049141883850098, 2.075244665145874, 2.0456223487854004, 2.0160489082336426, 1.9865268468856812, 1.9570585489273071, 1.927646279335022, 1.8982927799224854, 1.869000792503357, 1.8397732973098755, 1.8106132745742798, 1.7815240621566772, 1.752509355545044, 1.7235727310180664, 1.694718360900879, 1.6659504175186157, 1.6372733116149902, 1.6086921691894531, 1.580212116241455, 1.5518386363983154, 1.5235776901245117, 1.4954357147216797, 1.4674196243286133, 1.4395365715026855, 1.411794662475586, 1.3842021226882935, 1.3567683696746826, 1.3295029401779175, 1.3024166822433472, 1.2755206823349, 1.248827576637268, 1.2223504781723022, 1.1961036920547485, 1.170102834701538, 1.144364595413208, 1.11890709400177, 1.09375, 1.0689144134521484, 1.0444234609603882, 1.0203016996383667, 0.996576189994812, 0.9732757210731506, 0.9504316449165344, 0.9280776381492615, 0.90625, 0.8849876523017883, 0.8643323183059692, 0.8443285226821899, 0.8250236511230469, 0.8064680099487305, 0.7887143492698669, 0.7718180418014526, 0.7558366656303406, 0.740829348564148, 0.7268564701080322, 0.7139787077903748, 0.7022563815116882, 0.6917482614517212, 0.6825103163719177, 0.6745947599411011, 0.6680486798286438, 0.6629126071929932, 0.6592194437980652, 0.6569936275482178, 0.6875, 0.6882098317146301, 0.6903350353240967, 0.6938626170158386, 0.6987712383270264, 0.7050321102142334, 0.7126096487045288, 0.7214622497558594, 0.7315437197685242, 0.7428039908409119, 0.755190372467041, 0.7686483860015869, 0.7831227779388428, 0.7985582947731018, 0.814900279045105, 0.8320954442024231, 0.8500919342041016, 0.8688399195671082, 0.8882918953895569, 0.9084026217460632, 0.9291293025016785, 0.9504316449165344, 0.9722718000411987, 0.9946144223213196, 1.0174262523651123, 1.0406765937805176, 1.0643366575241089, 1.0883796215057373, 1.1127808094024658, 1.1375172138214111, 1.1625672578811646, 1.1879111528396606, 1.2135305404663086, 1.239408254623413, 1.2655285596847534, 1.2918766736984253, 1.3184388875961304, 1.3452026844024658, 1.3721561431884766, 1.399288296699524, 1.426589012145996, 1.454048752784729, 1.481658697128296, 1.5094106197357178, 1.5372967720031738, 1.565310001373291, 1.5934436321258545, 1.621691346168518, 1.6500473022460938, 1.6785061359405518, 1.7070624828338623, 1.7357118129730225, 1.7644492387771606, 1.7932708263397217, 1.8221725225448608, 1.851150393486023, 1.8802011013031006, 1.9093213081359863, 1.9385077953338623, 1.9677577018737793, 1.997068166732788, 2.0264365673065186, 2.0558605194091797, 2.0853376388549805, 2.11486554145813, 2.0853376388549805, 2.0558605194091797, 2.0264365673065186, 1.997068166732788, 1.9677577018737793, 1.9385077953338623, 1.9093213081359863, 1.8802011013031006, 1.851150393486023, 1.8221725225448608, 1.7932708263397217, 1.7644492387771606, 1.7357118129730225, 1.7070624828338623, 1.6785061359405518, 1.6500473022460938, 1.621691346168518, 1.5934436321258545, 1.565310001373291, 1.5372967720031738, 1.5094106197357178, 1.481658697128296, 1.454048752784729, 1.426589012145996, 1.399288296699524, 1.3721561431884766, 1.3452026844024658, 1.3184388875961304, 1.2918766736984253, 1.2655285596847534, 1.239408254623413, 1.2135305404663086, 1.1879111528396606, 1.1625672578811646, 1.1375172138214111, 1.1127808094024658, 1.0883796215057373, 1.0643366575241089, 1.0406765937805176, 1.0174262523651123, 0.9946144223213196, 0.9722718000411987, 0.9504316449165344, 0.9291293025016785, 0.9084026217460632, 0.8882918953895569, 0.8688399195671082, 0.8500919342041016, 0.8320954442024231, 0.814900279045105, 0.7985582947731018, 0.7831227779388428, 0.7686483860015869, 0.755190372467041, 0.7428039908409119, 0.7315437197685242, 0.7214622497558594, 0.7126096487045288, 0.7050321102142334, 0.6987712383270264, 0.6938626170158386, 0.6903350353240967, 0.6882098317146301, 0.71875, 0.7194290161132812, 0.7214622497558594, 0.7248383164405823, 0.72953861951828, 0.7355376482009888, 0.7428039908409119, 0.7513009309768677, 0.7609872221946716, 0.7718180418014526, 0.7837460041046143, 0.7967218160629272, 0.8106951117515564, 0.8256152868270874, 0.8414319753646851, 0.858095645904541, 0.8755578398704529, 0.8937718272209167, 0.9126926064491272, 0.9322771430015564, 0.9524844288825989, 0.9732757210731506, 0.9946144223213196, 1.0164660215377808, 1.0387980937957764, 1.0615805387496948, 1.0847846269607544, 1.1083842515945435, 1.1323543787002563, 1.1566722393035889, 1.1813161373138428, 1.206266164779663, 1.2315037250518799, 1.2570115327835083, 1.282773494720459, 1.308774471282959, 1.3350006341934204, 1.3614387512207031, 1.3880770206451416, 1.4149038791656494, 1.4419089555740356, 1.4690823554992676, 1.4964150190353394, 1.5238981246948242, 1.5515239238739014, 1.5792847871780396, 1.6071738004684448, 1.635184407234192, 1.6633104085922241, 1.691546082496643, 1.7198859453201294, 1.7483251094818115, 1.7768585681915283, 1.8054821491241455, 1.8341913223266602, 1.8629822731018066, 1.8918513059616089, 1.92079496383667, 1.9498096704483032, 1.9788925647735596, 2.008040428161621, 2.0372507572174072, 2.0665206909179688, 2.0958478450775146, 2.125229835510254, 2.0958478450775146, 2.0665206909179688, 2.0372507572174072, 2.008040428161621, 1.9788925647735596, 1.9498096704483032, 1.92079496383667, 1.8918513059616089, 1.8629822731018066, 1.8341913223266602, 1.8054821491241455, 1.7768585681915283, 1.7483251094818115, 1.7198859453201294, 1.691546082496643, 1.6633104085922241, 1.635184407234192, 1.6071738004684448, 1.5792847871780396, 1.5515239238739014, 1.5238981246948242, 1.4964150190353394, 1.4690823554992676, 1.4419089555740356, 1.4149038791656494, 1.3880770206451416, 1.3614387512207031, 1.3350006341934204, 1.308774471282959, 1.282773494720459, 1.2570115327835083, 1.2315037250518799, 1.206266164779663, 1.1813161373138428, 1.1566722393035889, 1.1323543787002563, 1.1083842515945435, 1.0847846269607544, 1.0615805387496948, 1.0387980937957764, 1.0164660215377808, 0.9946144223213196, 0.9732757210731506, 0.9524844288825989, 0.9322771430015564, 0.9126926064491272, 0.8937718272209167, 0.8755578398704529, 0.858095645904541, 0.8414319753646851, 0.8256152868270874, 0.8106951117515564, 0.7967218160629272, 0.7837460041046143, 0.7718180418014526, 0.7609872221946716, 0.7513009309768677, 0.7428039908409119, 0.7355376482009888, 0.72953861951828, 0.7248383164405823, 0.7214622497558594, 0.7194290161132812, 0.75, 0.7506507635116577, 0.7525996565818787, 0.7558366656303406, 0.7603453397750854, 0.7661031484603882, 0.7730823159217834, 0.78125, 0.7905694246292114, 0.8010003566741943, 0.8125, 0.8250236511230469, 0.8385254740715027, 0.8529589772224426, 0.8682777285575867, 0.8844357132911682, 0.9013878107070923, 0.9190900921821594, 0.9375, 0.9565767645835876, 0.9762812256813049, 0.996576189994812, 1.0174262523651123, 1.0387980937957764, 1.0606601238250732, 1.0829826593399048, 1.1057379245758057, 1.1288994550704956, 1.1524430513381958, 1.1763455867767334, 1.2005858421325684, 1.2251434326171875, 1.25, 1.2751379013061523, 1.300540804862976, 1.3261934518814087, 1.3520817756652832, 1.3781923055648804, 1.4045127630233765, 1.431031584739685, 1.457737922668457, 1.4846216440200806, 1.5116733312606812, 1.5388840436935425, 1.5662455558776855, 1.59375, 1.6213902235031128, 1.64915931224823, 1.6770509481430054, 1.7050590515136719, 1.7331780195236206, 1.7614026069641113, 1.7897276878356934, 1.8181484937667847, 1.846660852432251, 1.875260353088379, 1.9039433002471924, 1.9327057600021362, 1.961544394493103, 1.9904557466506958, 2.019436836242676, 2.0484845638275146, 2.0775961875915527, 2.106769323348999, 2.136000871658325, 2.106769323348999, 2.0775961875915527, 2.0484845638275146, 2.019436836242676, 1.9904557466506958, 1.961544394493103, 1.9327057600021362, 1.9039433002471924, 1.875260353088379, 1.846660852432251, 1.8181484937667847, 1.7897276878356934, 1.7614026069641113, 1.7331780195236206, 1.7050590515136719, 1.6770509481430054, 1.64915931224823, 1.6213902235031128, 1.59375, 1.5662455558776855, 1.5388840436935425, 1.5116733312606812, 1.4846216440200806, 1.457737922668457, 1.431031584739685, 1.4045127630233765, 1.3781923055648804, 1.3520817756652832, 1.3261934518814087, 1.300540804862976, 1.2751379013061523, 1.25, 1.2251434326171875, 1.2005858421325684, 1.1763455867767334, 1.1524430513381958, 1.1288994550704956, 1.1057379245758057, 1.0829826593399048, 1.0606601238250732, 1.0387980937957764, 1.0174262523651123, 0.996576189994812, 0.9762812256813049, 0.9565767645835876, 0.9375, 0.9190900921821594, 0.9013878107070923, 0.8844357132911682, 0.8682777285575867, 0.8529589772224426, 0.8385254740715027, 0.8250236511230469, 0.8125, 0.8010003566741943, 0.7905694246292114, 0.78125, 0.7730823159217834, 0.7661031484603882, 0.7603453397750854, 0.7558366656303406, 0.7525996565818787, 0.7506507635116577, 0.78125, 0.7818747758865356, 0.7837460041046143, 0.7868549227714539, 0.7911868095397949, 0.7967218160629272, 0.8034350275993347, 0.8112971782684326, 0.8202753067016602, 0.8303331136703491, 0.8414319753646851, 0.8535312414169312, 0.8665890097618103, 0.8805626630783081, 0.8954092860221863, 0.9110862612724304, 0.9275513887405396, 0.9447635412216187, 0.9626826047897339, 0.981269896030426, 1.0004881620407104, 1.0203016996383667, 1.0406765937805176, 1.0615805387496948, 1.0829826593399048, 1.1048543453216553, 1.12716805934906, 1.1498980522155762, 1.1730202436447144, 1.1965118646621704, 1.2203514575958252, 1.2445192337036133, 1.268996238708496, 1.2937650680541992, 1.3188092708587646, 1.3441133499145508, 1.369662880897522, 1.395444631576538, 1.4214457273483276, 1.447654366493225, 1.4740595817565918, 1.5006508827209473, 1.5274187326431274, 1.5543537139892578, 1.5814476013183594, 1.6086921691894531, 1.636080026626587, 1.6636039018630981, 1.691257357597351, 1.7190340757369995, 1.746928095817566, 1.774933934211731, 1.803046464920044, 1.8312606811523438, 1.859571933746338, 1.8879759311676025, 1.9164685010910034, 1.945045828819275, 1.9737040996551514, 2.0024399757385254, 2.03125, 2.060131311416626, 2.089080572128296, 2.1180953979492188, 2.1471729278564453, 2.1180953979492188, 2.089080572128296, 2.060131311416626, 2.03125, 2.0024399757385254, 1.9737040996551514, 1.945045828819275, 1.9164685010910034, 1.8879759311676025, 1.859571933746338, 1.8312606811523438, 1.803046464920044, 1.774933934211731, 1.746928095817566, 1.7190340757369995, 1.691257357597351, 1.6636039018630981, 1.636080026626587, 1.6086921691894531, 1.5814476013183594, 1.5543537139892578, 1.5274187326431274, 1.5006508827209473, 1.4740595817565918, 1.447654366493225, 1.4214457273483276, 1.395444631576538, 1.369662880897522, 1.3441133499145508, 1.3188092708587646, 1.2937650680541992, 1.268996238708496, 1.2445192337036133, 1.2203514575958252, 1.1965118646621704, 1.1730202436447144, 1.1498980522155762, 1.12716805934906, 1.1048543453216553, 1.0829826593399048, 1.0615805387496948, 1.0406765937805176, 1.0203016996383667, 1.0004881620407104, 0.981269896030426, 0.9626826047897339, 0.9447635412216187, 0.9275513887405396, 0.9110862612724304, 0.8954092860221863, 0.8805626630783081, 0.8665890097618103, 0.8535312414169312, 0.8414319753646851, 0.8303331136703491, 0.8202753067016602, 0.8112971782684326, 0.8034350275993347, 0.7967218160629272, 0.7911868095397949, 0.7868549227714539, 0.7837460041046143, 0.7818747758865356, 0.8125, 0.8131007552146912, 0.814900279045105, 0.8178907632827759, 0.822059154510498, 0.8273876309394836, 0.8338540196418762, 0.8414319753646851, 0.8500919342041016, 0.8598010540008545, 0.8705242872238159, 0.8822246193885803, 0.8948638439178467, 0.9084026217460632, 0.9228014349937439, 0.9380207061767578, 0.9540210962295532, 0.9707640409469604, 0.9882117509841919, 1.0063276290893555, 1.0250762701034546, 1.0444234609603882, 1.0643366575241089, 1.0847846269607544, 1.1057379245758057, 1.12716805934906, 1.1490485668182373, 1.171354055404663, 1.1940608024597168, 1.217146396636963, 1.2405896186828613, 1.2643705606460571, 1.2884705066680908, 1.3128719329833984, 1.337558388710022, 1.3625143766403198, 1.3877252340316772, 1.4131773710250854, 1.4388580322265625, 1.4647551774978638, 1.4908576011657715, 1.5171544551849365, 1.5436360836029053, 1.5702930688858032, 1.5971165895462036, 1.624098300933838, 1.6512305736541748, 1.6785061359405518, 1.7059179544448853, 1.7334598302841187, 1.7611253261566162, 1.7889089584350586, 1.8168052434921265, 1.8448090553283691, 1.872915506362915, 1.9011201858520508, 1.929418683052063, 1.957806944847107, 1.9862810373306274, 2.0148375034332275, 2.0434727668762207, 2.072183609008789, 2.1009669303894043, 2.129819869995117, 2.1587395668029785, 2.129819869995117, 2.1009669303894043, 2.072183609008789, 2.0434727668762207, 2.0148375034332275, 1.9862810373306274, 1.957806944847107, 1.929418683052063, 1.9011201858520508, 1.872915506362915, 1.8448090553283691, 1.8168052434921265, 1.7889089584350586, 1.7611253261566162, 1.7334598302841187, 1.7059179544448853, 1.6785061359405518, 1.6512305736541748, 1.624098300933838, 1.5971165895462036, 1.5702930688858032, 1.5436360836029053, 1.5171544551849365, 1.4908576011657715, 1.4647551774978638, 1.4388580322265625, 1.4131773710250854, 1.3877252340316772, 1.3625143766403198, 1.337558388710022, 1.3128719329833984, 1.2884705066680908, 1.2643705606460571, 1.2405896186828613, 1.217146396636963, 1.1940608024597168, 1.171354055404663, 1.1490485668182373, 1.12716805934906, 1.1057379245758057, 1.0847846269607544, 1.0643366575241089, 1.0444234609603882, 1.0250762701034546, 1.0063276290893555, 0.9882117509841919, 0.9707640409469604, 0.9540210962295532, 0.9380207061767578, 0.9228014349937439, 0.9084026217460632, 0.8948638439178467, 0.8822246193885803, 0.8705242872238159, 0.8598010540008545, 0.8500919342041016, 0.8414319753646851, 0.8338540196418762, 0.8273876309394836, 0.822059154510498, 0.8178907632827759, 0.814900279045105, 0.8131007552146912, 0.84375, 0.8443285226821899, 0.846061646938324, 0.8489423394203186, 0.8529589772224426, 0.858095645904541, 0.8643323183059692, 0.8716453313827515, 0.8800079822540283, 0.8893905878067017, 0.8997612595558167, 0.9110862612724304, 0.9233304262161255, 0.9364577531814575, 0.9504316449165344, 0.9652153253555298, 0.9807721972465515, 0.9970660209655762, 1.0140613317489624, 1.0317233800888062, 1.050018548965454, 1.0689144134521484, 1.0883796215057373, 1.1083842515945435, 1.1288994550704956, 1.1498980522155762, 1.171354055404663, 1.1932426691055298, 1.2155406475067139, 1.2382258176803589, 1.261277198791504, 1.2846752405166626, 1.308401346206665, 1.3324378728866577, 1.3567683696746826, 1.3813772201538086, 1.40625, 1.4313727617263794, 1.4567327499389648, 1.4823176860809326, 1.5081160068511963, 1.5341172218322754, 1.560310959815979, 1.5866878032684326, 1.6132386922836304, 1.6399551630020142, 1.6668294668197632, 1.693853735923767, 1.7210211753845215, 1.7483251094818115, 1.7757591009140015, 1.8033173084259033, 1.8309940099716187, 1.8587840795516968, 1.886682391166687, 1.9146841764450073, 1.9427851438522339, 1.9709808826446533, 1.9992674589157104, 2.0276410579681396, 2.056097984313965, 2.084635019302368, 2.113248825073242, 2.1419363021850586, 2.170694351196289, 2.1419363021850586, 2.113248825073242, 2.084635019302368, 2.056097984313965, 2.0276410579681396, 1.9992674589157104, 1.9709808826446533, 1.9427851438522339, 1.9146841764450073, 1.886682391166687, 1.8587840795516968, 1.8309940099716187, 1.8033173084259033, 1.7757591009140015, 1.7483251094818115, 1.7210211753845215, 1.693853735923767, 1.6668294668197632, 1.6399551630020142, 1.6132386922836304, 1.5866878032684326, 1.560310959815979, 1.5341172218322754, 1.5081160068511963, 1.4823176860809326, 1.4567327499389648, 1.4313727617263794, 1.40625, 1.3813772201538086, 1.3567683696746826, 1.3324378728866577, 1.308401346206665, 1.2846752405166626, 1.261277198791504, 1.2382258176803589, 1.2155406475067139, 1.1932426691055298, 1.171354055404663, 1.1498980522155762, 1.1288994550704956, 1.1083842515945435, 1.0883796215057373, 1.0689144134521484, 1.050018548965454, 1.0317233800888062, 1.0140613317489624, 0.9970660209655762, 0.9807721972465515, 0.9652153253555298, 0.9504316449165344, 0.9364577531814575, 0.9233304262161255, 0.9110862612724304, 0.8997612595558167, 0.8893905878067017, 0.8800079822540283, 0.8716453313827515, 0.8643323183059692, 0.858095645904541, 0.8529589772224426, 0.8489423394203186, 0.846061646938324, 0.8443285226821899, 0.875, 0.8755578398704529, 0.8772292733192444, 0.8800079822540283, 0.8838834762573242, 0.8888413906097412, 0.8948638439178467, 0.9019293785095215, 0.910013735294342, 0.9190900921821594, 0.9291293025016785, 0.9401005506515503, 0.9519716501235962, 0.9647093415260315, 0.9782797694206238, 0.9926487803459167, 1.007782220840454, 1.0236462354660034, 1.0402072668075562, 1.057432770729065, 1.0752906799316406, 1.09375, 1.1127808094024658, 1.1323543787002563, 1.1524430513381958, 1.1730202436447144, 1.1940608024597168, 1.2155406475067139, 1.2374368906021118, 1.2597277164459229, 1.2823927402496338, 1.3054124116897583, 1.328768253326416, 1.3524428606033325, 1.3764196634292603, 1.4006834030151367, 1.4252192974090576, 1.450013518333435, 1.4750529527664185, 1.5003254413604736, 1.5258194208145142, 1.5515239238739014, 1.5774286985397339, 1.6035239696502686, 1.62980055809021, 1.65625, 1.6828639507293701, 1.7096349000930786, 1.7365554571151733, 1.76361882686615, 1.7908185720443726, 1.8181484937667847, 1.8456028699874878, 1.8731762170791626, 1.9008632898330688, 1.9286593198776245, 1.9565595388412476, 1.9845595359802246, 2.012655258178711, 2.0408427715301514, 2.0691182613372803, 2.097477912902832, 2.1259188652038574, 2.15443754196167, 2.1830310821533203, 2.15443754196167, 2.1259188652038574, 2.097477912902832, 2.0691182613372803, 2.0408427715301514, 2.012655258178711, 1.9845595359802246, 1.9565595388412476, 1.9286593198776245, 1.9008632898330688, 1.8731762170791626, 1.8456028699874878, 1.8181484937667847, 1.7908185720443726, 1.76361882686615, 1.7365554571151733, 1.7096349000930786, 1.6828639507293701, 1.65625, 1.62980055809021, 1.6035239696502686, 1.5774286985397339, 1.5515239238739014, 1.5258194208145142, 1.5003254413604736, 1.4750529527664185, 1.450013518333435, 1.4252192974090576, 1.4006834030151367, 1.3764196634292603, 1.3524428606033325, 1.328768253326416, 1.3054124116897583, 1.2823927402496338, 1.2597277164459229, 1.2374368906021118, 1.2155406475067139, 1.1940608024597168, 1.1730202436447144, 1.1524430513381958, 1.1323543787002563, 1.1127808094024658, 1.09375, 1.0752906799316406, 1.057432770729065, 1.0402072668075562, 1.0236462354660034, 1.007782220840454, 0.9926487803459167, 0.9782797694206238, 0.9647093415260315, 0.9519716501235962, 0.9401005506515503, 0.9291293025016785, 0.9190900921821594, 0.910013735294342, 0.9019293785095215, 0.8948638439178467, 0.8888413906097412, 0.8838834762573242, 0.8800079822540283, 0.8772292733192444, 0.8755578398704529, 0.90625, 0.9067886471748352, 0.9084026217460632, 0.9110862612724304, 0.9148300886154175, 0.9196211695671082, 0.9254432916641235, 0.9322771430015564, 0.9401005506515503, 0.9488891363143921, 0.9586163759231567, 0.9692538976669312, 0.9807721972465515, 0.9931405186653137, 1.0063276290893555, 1.0203016996383667, 1.0350309610366821, 1.0504834651947021, 1.0666279792785645, 1.0834335088729858, 1.1008696556091309, 1.11890709400177, 1.1375172138214111, 1.1566722393035889, 1.1763455867767334, 1.1965118646621704, 1.217146396636963, 1.2382258176803589, 1.2597277164459229, 1.2816309928894043, 1.3039153814315796, 1.3265615701675415, 1.3495514392852783, 1.3728677034378052, 1.396493911743164, 1.4204148054122925, 1.4446154832839966, 1.4690823554992676, 1.4938023090362549, 1.5187628269195557, 1.543952465057373, 1.5693598985671997, 1.5949749946594238, 1.6207878589630127, 1.6467890739440918, 1.6729698181152344, 1.699321985244751, 1.7258377075195312, 1.752509355545044, 1.7793301343917847, 1.806293249130249, 1.8333925008773804, 1.8606219291687012, 1.8879759311676025, 1.9154491424560547, 1.943036437034607, 1.9707331657409668, 1.9985345602035522, 2.0264365673065186, 2.0544350147247314, 2.0825259685516357, 2.110705614089966, 2.1389706134796143, 2.1673176288604736, 2.1957433223724365, 2.1673176288604736, 2.1389706134796143, 2.110705614089966, 2.0825259685516357, 2.0544350147247314, 2.0264365673065186, 1.9985345602035522, 1.9707331657409668, 1.943036437034607, 1.9154491424560547, 1.8879759311676025, 1.8606219291687012, 1.8333925008773804, 1.806293249130249, 1.7793301343917847, 1.752509355545044, 1.7258377075195312, 1.699321985244751, 1.6729698181152344, 1.6467890739440918, 1.6207878589630127, 1.5949749946594238, 1.5693598985671997, 1.543952465057373, 1.5187628269195557, 1.4938023090362549, 1.4690823554992676, 1.4446154832839966, 1.4204148054122925, 1.396493911743164, 1.3728677034378052, 1.3495514392852783, 1.3265615701675415, 1.3039153814315796, 1.2816309928894043, 1.2597277164459229, 1.2382258176803589, 1.217146396636963, 1.1965118646621704, 1.1763455867767334, 1.1566722393035889, 1.1375172138214111, 1.11890709400177, 1.1008696556091309, 1.0834335088729858, 1.0666279792785645, 1.0504834651947021, 1.0350309610366821, 1.0203016996383667, 1.0063276290893555, 0.9931405186653137, 0.9807721972465515, 0.9692538976669312, 0.9586163759231567, 0.9488891363143921, 0.9401005506515503, 0.9322771430015564, 0.9254432916641235, 0.9196211695671082, 0.9148300886154175, 0.9110862612724304, 0.9084026217460632, 0.9067886471748352, 0.9375, 0.9380207061767578, 0.939581036567688, 0.9421758651733398, 0.9457966089248657, 0.9504316449165344, 0.9560661315917969, 0.9626826047897339, 0.9702609181404114, 0.9787787199020386, 0.9882117509841919, 0.998534083366394, 1.009718418121338, 1.0217363834381104, 1.0345591306686401, 1.0481568574905396, 1.0625, 1.0775587558746338, 1.0933034420013428, 1.1097050905227661, 1.126734733581543, 1.144364595413208, 1.1625672578811646, 1.1813161373138428, 1.2005858421325684, 1.2203514575958252, 1.2405896186828613, 1.261277198791504, 1.2823927402496338, 1.3039153814315796, 1.3258252143859863, 1.348103404045105, 1.370732069015503, 1.3936939239501953, 1.4169729948043823, 1.4405537843704224, 1.4644218683242798, 1.4885631799697876, 1.5129648447036743, 1.537614345550537, 1.5625, 1.5876107215881348, 1.612936019897461, 1.6384658813476562, 1.6641908884048462, 1.690102219581604, 1.716191291809082, 1.74245023727417, 1.7688714265823364, 1.795447826385498, 1.8221725225448608, 1.849039077758789, 1.8760414123535156, 1.903173804283142, 1.9304306507110596, 1.957806944847107, 1.9852975606918335, 2.0128979682922363, 2.0406033992767334, 2.0684101581573486, 2.096313714981079, 2.1243104934692383, 2.1523969173431396, 2.1805694103240967, 2.208824634552002, 2.1805694103240967, 2.1523969173431396, 2.1243104934692383, 2.096313714981079, 2.0684101581573486, 2.0406033992767334, 2.0128979682922363, 1.9852975606918335, 1.957806944847107, 1.9304306507110596, 1.903173804283142, 1.8760414123535156, 1.849039077758789, 1.8221725225448608, 1.795447826385498, 1.7688714265823364, 1.74245023727417, 1.716191291809082, 1.690102219581604, 1.6641908884048462, 1.6384658813476562, 1.612936019897461, 1.5876107215881348, 1.5625, 1.537614345550537, 1.5129648447036743, 1.4885631799697876, 1.4644218683242798, 1.4405537843704224, 1.4169729948043823, 1.3936939239501953, 1.370732069015503, 1.348103404045105, 1.3258252143859863, 1.3039153814315796, 1.2823927402496338, 1.261277198791504, 1.2405896186828613, 1.2203514575958252, 1.2005858421325684, 1.1813161373138428, 1.1625672578811646, 1.144364595413208, 1.126734733581543, 1.1097050905227661, 1.0933034420013428, 1.0775587558746338, 1.0625, 1.0481568574905396, 1.0345591306686401, 1.0217363834381104, 1.009718418121338, 0.998534083366394, 0.9882117509841919, 0.9787787199020386, 0.9702609181404114, 0.9626826047897339, 0.9560661315917969, 0.9504316449165344, 0.9457966089248657, 0.9421758651733398, 0.939581036567688, 0.9380207061767578, 0.96875, 0.9692538976669312, 0.9707640409469604, 0.9732757210731506, 0.9767812490463257, 0.981269896030426, 0.986728310585022, 0.9931405186653137, 1.0004881620407104, 1.0087507963180542, 1.0179060697555542, 1.0279302597045898, 1.0387980937957764, 1.0504834651947021, 1.0629594326019287, 1.0761984586715698, 1.0901727676391602, 1.1048543453216553, 1.1202155351638794, 1.1362286806106567, 1.1528667211532593, 1.170102834701538, 1.1879111528396606, 1.206266164779663, 1.2251434326171875, 1.2445192337036133, 1.2643705606460571, 1.2846752405166626, 1.3054124116897583, 1.3265615701675415, 1.348103404045105, 1.3700194358825684, 1.392291784286499, 1.4149038791656494, 1.4378396272659302, 1.4610837697982788, 1.4846216440200806, 1.5084397792816162, 1.5325249433517456, 1.556864857673645, 1.5814476013183594, 1.60626220703125, 1.6312979459762573, 1.656544804573059, 1.6819933652877808, 1.7076345682144165, 1.7334598302841187, 1.7594610452651978, 1.7856305837631226, 1.8119611740112305, 1.838445782661438, 1.8650779724121094, 1.8918513059616089, 1.9187601804733276, 1.9457987546920776, 1.9729617834091187, 2.000244140625, 2.0276410579681396, 2.055147886276245, 2.0827603340148926, 2.1104743480682373, 2.1382856369018555, 2.1661908626556396, 2.194186210632324, 2.2222683429718018, 2.194186210632324, 2.1661908626556396, 2.1382856369018555, 2.1104743480682373, 2.0827603340148926, 2.055147886276245, 2.0276410579681396, 2.000244140625, 1.9729617834091187, 1.9457987546920776, 1.9187601804733276, 1.8918513059616089, 1.8650779724121094, 1.838445782661438, 1.8119611740112305, 1.7856305837631226, 1.7594610452651978, 1.7334598302841187, 1.7076345682144165, 1.6819933652877808, 1.656544804573059, 1.6312979459762573, 1.60626220703125, 1.5814476013183594, 1.556864857673645, 1.5325249433517456, 1.5084397792816162, 1.4846216440200806, 1.4610837697982788, 1.4378396272659302, 1.4149038791656494, 1.392291784286499, 1.3700194358825684, 1.348103404045105, 1.3265615701675415, 1.3054124116897583, 1.2846752405166626, 1.2643705606460571, 1.2445192337036133, 1.2251434326171875, 1.206266164779663, 1.1879111528396606, 1.170102834701538, 1.1528667211532593, 1.1362286806106567, 1.1202155351638794, 1.1048543453216553, 1.0901727676391602, 1.0761984586715698, 1.0629594326019287, 1.0504834651947021, 1.0387980937957764, 1.0279302597045898, 1.0179060697555542, 1.0087507963180542, 1.0004881620407104, 0.9931405186653137, 0.986728310585022, 0.981269896030426, 0.9767812490463257, 0.9732757210731506, 0.9707640409469604, 0.9692538976669312, 1.0, 1.0004881620407104, 1.0019512176513672, 1.0043848752975464, 1.007782220840454, 1.0121334791183472, 1.0174262523651123, 1.0236462354660034, 1.0307763814926147, 1.0387980937957764, 1.0476908683776855, 1.057432770729065, 1.0680004358291626, 1.0793697834014893, 1.0915155410766602, 1.104412317276001, 1.1180340051651, 1.1323543787002563, 1.1473474502563477, 1.1629871129989624, 1.1792476177215576, 1.1961036920547485, 1.2135305404663086, 1.2315037250518799, 1.25, 1.268996238708496, 1.2884705066680908, 1.308401346206665, 1.328768253326416, 1.3495514392852783, 1.370732069015503, 1.392291784286499, 1.4142135381698608, 1.4364806413650513, 1.45907723903656, 1.4819881916046143, 1.5051993131637573, 1.528696894645691, 1.5524678230285645, 1.5764998197555542, 1.6007810831069946, 1.625300407409668, 1.6500473022460938, 1.6750116348266602, 1.7001838684082031, 1.7255547046661377, 1.7511156797409058, 1.7768585681915283, 1.8027756214141846, 1.8288593292236328, 1.855102777481079, 1.881499171257019, 1.9080421924591064, 1.9347258806228638, 1.961544394493103, 1.9884922504425049, 2.015564441680908, 2.0427558422088623, 2.0700619220733643, 2.097477912902832, 2.125, 2.1526236534118652, 2.1803455352783203, 2.2081613540649414, 2.2360680103302, 2.2081613540649414, 2.1803455352783203, 2.1526236534118652, 2.125, 2.097477912902832, 2.0700619220733643, 2.0427558422088623, 2.015564441680908, 1.9884922504425049, 1.961544394493103, 1.9347258806228638, 1.9080421924591064, 1.881499171257019, 1.855102777481079, 1.8288593292236328, 1.8027756214141846, 1.7768585681915283, 1.7511156797409058, 1.7255547046661377, 1.7001838684082031, 1.6750116348266602, 1.6500473022460938, 1.625300407409668, 1.6007810831069946, 1.5764998197555542, 1.5524678230285645, 1.528696894645691, 1.5051993131637573, 1.4819881916046143, 1.45907723903656, 1.4364806413650513, 1.4142135381698608, 1.392291784286499, 1.370732069015503, 1.3495514392852783, 1.328768253326416, 1.308401346206665, 1.2884705066680908, 1.268996238708496, 1.25, 1.2315037250518799, 1.2135305404663086, 1.1961036920547485, 1.1792476177215576, 1.1629871129989624, 1.1473474502563477, 1.1323543787002563, 1.1180340051651, 1.104412317276001, 1.0915155410766602, 1.0793697834014893, 1.0680004358291626, 1.057432770729065, 1.0476908683776855, 1.0387980937957764, 1.0307763814926147, 1.0236462354660034, 1.0174262523651123, 1.0121334791183472, 1.007782220840454, 1.0043848752975464, 1.0019512176513672, 1.0004881620407104, 1.03125, 1.0317233800888062, 1.0331422090530396, 1.035502552986145, 1.0387980937957764, 1.0430200099945068, 1.0481568574905396, 1.054195523262024, 1.0611203908920288, 1.0689144134521484, 1.0775587558746338, 1.0870329141616821, 1.0973156690597534, 1.1083842515945435, 1.1202155351638794, 1.1327855587005615, 1.1460700035095215, 1.1600444316864014, 1.1746841669082642, 1.1899645328521729, 1.2058613300323486, 1.2223504781723022, 1.239408254623413, 1.2570115327835083, 1.2751379013061523, 1.2937650680541992, 1.3128719329833984, 1.3324378728866577, 1.3524428606033325, 1.3728677034378052, 1.3936939239501953, 1.4149038791656494, 1.4364806413650513, 1.4584077596664429, 1.4806697368621826, 1.5032516717910767, 1.5261393785476685, 1.5493193864822388, 1.5727787017822266, 1.5965049266815186, 1.6204864978790283, 1.644712209701538, 1.6691713333129883, 1.693853735923767, 1.71875, 1.743850827217102, 1.769147515296936, 1.7946317195892334, 1.8202956914901733, 1.8461319208145142, 1.8721332550048828, 1.8982927799224854, 1.9246042966842651, 1.9510613679885864, 1.9776583909988403, 2.004389762878418, 2.03125, 2.058234214782715, 2.0853376388549805, 2.112555503845215, 2.139883518218994, 2.1673176288604736, 2.1948537826538086, 2.2224881649017334, 2.2502169609069824, 2.2224881649017334, 2.1948537826538086, 2.1673176288604736, 2.139883518218994, 2.112555503845215, 2.0853376388549805, 2.058234214782715, 2.03125, 2.004389762878418, 1.9776583909988403, 1.9510613679885864, 1.9246042966842651, 1.8982927799224854, 1.8721332550048828, 1.8461319208145142, 1.8202956914901733, 1.7946317195892334, 1.769147515296936, 1.743850827217102, 1.71875, 1.693853735923767, 1.6691713333129883, 1.644712209701538, 1.6204864978790283, 1.5965049266815186, 1.5727787017822266, 1.5493193864822388, 1.5261393785476685, 1.5032516717910767, 1.4806697368621826, 1.4584077596664429, 1.4364806413650513, 1.4149038791656494, 1.3936939239501953, 1.3728677034378052, 1.3524428606033325, 1.3324378728866577, 1.3128719329833984, 1.2937650680541992, 1.2751379013061523, 1.2570115327835083, 1.239408254623413, 1.2223504781723022, 1.2058613300323486, 1.1899645328521729, 1.1746841669082642, 1.1600444316864014, 1.1460700035095215, 1.1327855587005615, 1.1202155351638794, 1.1083842515945435, 1.0973156690597534, 1.0870329141616821, 1.0775587558746338, 1.0689144134521484, 1.0611203908920288, 1.054195523262024, 1.0481568574905396, 1.0430200099945068, 1.0387980937957764, 1.035502552986145, 1.0331422090530396, 1.0317233800888062, 1.0625, 1.0629594326019287, 1.0643366575241089, 1.0666279792785645, 1.069827675819397, 1.0739275217056274, 1.0789172649383545, 1.0847846269607544, 1.0915155410766602, 1.099094033241272, 1.107502818107605, 1.1167230606079102, 1.126734733581543, 1.1375172138214111, 1.1490485668182373, 1.1613065004348755, 1.174268364906311, 1.1879111528396606, 1.2022114992141724, 1.217146396636963, 1.2326927185058594, 1.248827576637268, 1.2655285596847534, 1.282773494720459, 1.300540804862976, 1.3188092708587646, 1.337558388710022, 1.3567683696746826, 1.3764196634292603, 1.396493911743164, 1.4169729948043823, 1.4378396272659302, 1.45907723903656, 1.4806697368621826, 1.5026018619537354, 1.524859070777893, 1.5474272966384888, 1.5702930688858032, 1.5934436321258545, 1.6168667078018188, 1.6405506134033203, 1.6644842624664307, 1.6886570453643799, 1.7130587100982666, 1.7376798391342163, 1.762511134147644, 1.7875436544418335, 1.8127694129943848, 1.8381801843643188, 1.863768458366394, 1.8895270824432373, 1.9154491424560547, 1.941528081893921, 1.9677577018737793, 1.9941320419311523, 2.0206453800201416, 2.047292470932007, 2.0740678310394287, 2.1009669303894043, 2.1279850006103516, 2.1551175117492676, 2.1823599338531494, 2.2097086906433105, 2.237159490585327, 2.2647087574005127, 2.237159490585327, 2.2097086906433105, 2.1823599338531494, 2.1551175117492676, 2.1279850006103516, 2.1009669303894043, 2.0740678310394287, 2.047292470932007, 2.0206453800201416, 1.9941320419311523, 1.9677577018737793, 1.941528081893921, 1.9154491424560547, 1.8895270824432373, 1.863768458366394, 1.8381801843643188, 1.8127694129943848, 1.7875436544418335, 1.762511134147644, 1.7376798391342163, 1.7130587100982666, 1.6886570453643799, 1.6644842624664307, 1.6405506134033203, 1.6168667078018188, 1.5934436321258545, 1.5702930688858032, 1.5474272966384888, 1.524859070777893, 1.5026018619537354, 1.4806697368621826, 1.45907723903656, 1.4378396272659302, 1.4169729948043823, 1.396493911743164, 1.3764196634292603, 1.3567683696746826, 1.337558388710022, 1.3188092708587646, 1.300540804862976, 1.282773494720459, 1.2655285596847534, 1.248827576637268, 1.2326927185058594, 1.217146396636963, 1.2022114992141724, 1.1879111528396606, 1.174268364906311, 1.1613065004348755, 1.1490485668182373, 1.1375172138214111, 1.126734733581543, 1.1167230606079102, 1.107502818107605, 1.099094033241272, 1.0915155410766602, 1.0847846269607544, 1.0789172649383545, 1.0739275217056274, 1.069827675819397, 1.0666279792785645, 1.0643366575241089, 1.0629594326019287, 1.09375, 1.0941963195800781, 1.0955342054367065, 1.097760558128357, 1.1008696556091309, 1.1048543453216553, 1.1097050905227661, 1.115410566329956, 1.1219576597213745, 1.1293319463729858, 1.1375172138214111, 1.146496057510376, 1.15625, 1.1667596101760864, 1.1780048608779907, 1.1899645328521729, 1.2026176452636719, 1.2159422636032104, 1.2299168109893799, 1.2445192337036133, 1.2597277164459229, 1.2755206823349, 1.2918766736984253, 1.308774471282959, 1.3261934518814087, 1.3441133499145508, 1.3625143766403198, 1.3813772201538086, 1.4006834030151367, 1.4204148054122925, 1.4405537843704224, 1.4610837697982788, 1.4819881916046143, 1.5032516717910767, 1.524859070777893, 1.5467960834503174, 1.5690487623214722, 1.5916039943695068, 1.61444890499115, 1.6375715732574463, 1.66096031665802, 1.6846040487289429, 1.7084921598434448, 1.732614517211914, 1.7569615840911865, 1.7815240621566772, 1.806293249130249, 1.8312606811523438, 1.8564183712005615, 1.881758689880371, 1.9072743654251099, 1.9329583644866943, 1.9588042497634888, 1.9848055839538574, 2.010956287384033, 2.0372507572174072, 2.063683271408081, 2.0902488231658936, 2.1169424057006836, 2.14375901222229, 2.170694351196289, 2.1977438926696777, 2.2249033451080322, 2.252169132232666, 2.2795369625091553, 2.252169132232666, 2.2249033451080322, 2.1977438926696777, 2.170694351196289, 2.14375901222229, 2.1169424057006836, 2.0902488231658936, 2.063683271408081, 2.0372507572174072, 2.010956287384033, 1.9848055839538574, 1.9588042497634888, 1.9329583644866943, 1.9072743654251099, 1.881758689880371, 1.8564183712005615, 1.8312606811523438, 1.806293249130249, 1.7815240621566772, 1.7569615840911865, 1.732614517211914, 1.7084921598434448, 1.6846040487289429, 1.66096031665802, 1.6375715732574463, 1.61444890499115, 1.5916039943695068, 1.5690487623214722, 1.5467960834503174, 1.524859070777893, 1.5032516717910767, 1.4819881916046143, 1.4610837697982788, 1.4405537843704224, 1.4204148054122925, 1.4006834030151367, 1.3813772201538086, 1.3625143766403198, 1.3441133499145508, 1.3261934518814087, 1.308774471282959, 1.2918766736984253, 1.2755206823349, 1.2597277164459229, 1.2445192337036133, 1.2299168109893799, 1.2159422636032104, 1.2026176452636719, 1.1899645328521729, 1.1780048608779907, 1.1667596101760864, 1.15625, 1.146496057510376, 1.1375172138214111, 1.1293319463729858, 1.1219576597213745, 1.115410566329956, 1.1097050905227661, 1.1048543453216553, 1.1008696556091309, 1.097760558128357, 1.0955342054367065, 1.0941963195800781, 1.125, 1.1254339218139648, 1.126734733581543, 1.1288994550704956, 1.1319231986999512, 1.1357988119125366, 1.1405179500579834, 1.1460700035095215, 1.1524430513381958, 1.1596235036849976, 1.1675963401794434, 1.1763455867767334, 1.1858540773391724, 1.1961036920547485, 1.2070754766464233, 1.21875, 1.231107234954834, 1.244126796722412, 1.2577881813049316, 1.2720707654953003, 1.2869538068771362, 1.3024166822433472, 1.3184388875961304, 1.3350006341934204, 1.3520817756652832, 1.369662880897522, 1.3877252340316772, 1.40625, 1.4252192974090576, 1.4446154832839966, 1.4644218683242798, 1.4846216440200806, 1.5051993131637573, 1.5261393785476685, 1.5474272966384888, 1.5690487623214722, 1.5909903049468994, 1.6132386922836304, 1.6357815265655518, 1.658606767654419, 1.681702971458435, 1.7050590515136719, 1.7286646366119385, 1.752509355545044, 1.7765837907791138, 1.800878643989563, 1.8253852128982544, 1.8500950336456299, 1.875, 1.9000924825668335, 1.9253652095794678, 1.9508111476898193, 1.9764235019683838, 2.0021960735321045, 2.028122663497925, 2.054197311401367, 2.0804145336151123, 2.106769323348999, 2.133255958557129, 2.159870147705078, 2.1866068840026855, 2.2134621143341064, 2.240431070327759, 2.267509937286377, 2.2946949005126953, 2.267509937286377, 2.240431070327759, 2.2134621143341064, 2.1866068840026855, 2.159870147705078, 2.133255958557129, 2.106769323348999, 2.0804145336151123, 2.054197311401367, 2.028122663497925, 2.0021960735321045, 1.9764235019683838, 1.9508111476898193, 1.9253652095794678, 1.9000924825668335, 1.875, 1.8500950336456299, 1.8253852128982544, 1.800878643989563, 1.7765837907791138, 1.752509355545044, 1.7286646366119385, 1.7050590515136719, 1.681702971458435, 1.658606767654419, 1.6357815265655518, 1.6132386922836304, 1.5909903049468994, 1.5690487623214722, 1.5474272966384888, 1.5261393785476685, 1.5051993131637573, 1.4846216440200806, 1.4644218683242798, 1.4446154832839966, 1.4252192974090576, 1.40625, 1.3877252340316772, 1.369662880897522, 1.3520817756652832, 1.3350006341934204, 1.3184388875961304, 1.3024166822433472, 1.2869538068771362, 1.2720707654953003, 1.2577881813049316, 1.244126796722412, 1.231107234954834, 1.21875, 1.2070754766464233, 1.1961036920547485, 1.1858540773391724, 1.1763455867767334, 1.1675963401794434, 1.1596235036849976, 1.1524430513381958, 1.1460700035095215, 1.1405179500579834, 1.1357988119125366, 1.1319231986999512, 1.1288994550704956, 1.126734733581543, 1.1254339218139648, 1.15625, 1.1566722393035889, 1.157938003540039, 1.1600444316864014, 1.1629871129989624, 1.1667596101760864, 1.171354055404663, 1.1767606735229492, 1.1829683780670166, 1.1899645328521729, 1.1977355480194092, 1.206266164779663, 1.2155406475067139, 1.2255419492721558, 1.2362525463104248, 1.2476540803909302, 1.2597277164459229, 1.2724546194076538, 1.2858150005340576, 1.2997896671295166, 1.3143588304519653, 1.3295029401779175, 1.3452026844024658, 1.3614387512207031, 1.3781923055648804, 1.395444631576538, 1.4131773710250854, 1.4313727617263794, 1.450013518333435, 1.4690823554992676, 1.4885631799697876, 1.5084397792816162, 1.528696894645691, 1.5493193864822388, 1.5702930688858032, 1.5916039943695068, 1.6132386922836304, 1.635184407234192, 1.6574288606643677, 1.679960012435913, 1.7027665376663208, 1.7258377075195312, 1.7491627931594849, 1.7727317810058594, 1.7965352535247803, 1.8205639123916626, 1.8448090553283691, 1.8692620992660522, 1.893915057182312, 1.9187601804733276, 1.9437901973724365, 1.9689979553222656, 1.9943768978118896, 2.0199203491210938, 2.0456223487854004, 2.071476697921753, 2.097477912902832, 2.1236209869384766, 2.149899959564209, 2.1763107776641846, 2.202847957611084, 2.2295074462890625, 2.256284713745117, 2.283175468444824, 2.310176134109497, 2.283175468444824, 2.256284713745117, 2.2295074462890625, 2.202847957611084, 2.1763107776641846, 2.149899959564209, 2.1236209869384766, 2.097477912902832, 2.071476697921753, 2.0456223487854004, 2.0199203491210938, 1.9943768978118896, 1.9689979553222656, 1.9437901973724365, 1.9187601804733276, 1.893915057182312, 1.8692620992660522, 1.8448090553283691, 1.8205639123916626, 1.7965352535247803, 1.7727317810058594, 1.7491627931594849, 1.7258377075195312, 1.7027665376663208, 1.679960012435913, 1.6574288606643677, 1.635184407234192, 1.6132386922836304, 1.5916039943695068, 1.5702930688858032, 1.5493193864822388, 1.528696894645691, 1.5084397792816162, 1.4885631799697876, 1.4690823554992676, 1.450013518333435, 1.4313727617263794, 1.4131773710250854, 1.395444631576538, 1.3781923055648804, 1.3614387512207031, 1.3452026844024658, 1.3295029401779175, 1.3143588304519653, 1.2997896671295166, 1.2858150005340576, 1.2724546194076538, 1.2597277164459229, 1.2476540803909302, 1.2362525463104248, 1.2255419492721558, 1.2155406475067139, 1.206266164779663, 1.1977355480194092, 1.1899645328521729, 1.1829683780670166, 1.1767606735229492, 1.171354055404663, 1.1667596101760864, 1.1629871129989624, 1.1600444316864014, 1.157938003540039, 1.1566722393035889, 1.1875, 1.1879111528396606, 1.1891436576843262, 1.1911948919296265, 1.1940608024597168, 1.1977355480194092, 1.2022114992141724, 1.2074799537658691, 1.2135305404663086, 1.2203514575958252, 1.2279301881790161, 1.2362525463104248, 1.2453036308288574, 1.2550678253173828, 1.2655285596847534, 1.276668667793274, 1.2884705066680908, 1.3009161949157715, 1.3139872550964355, 1.3276653289794922, 1.341931939125061, 1.3567683696746826, 1.3721561431884766, 1.3880770206451416, 1.4045127630233765, 1.4214457273483276, 1.4388580322265625, 1.4567327499389648, 1.4750529527664185, 1.4938023090362549, 1.5129648447036743, 1.5325249433517456, 1.5524678230285645, 1.5727787017822266, 1.5934436321258545, 1.61444890499115, 1.6357815265655518, 1.6574288606643677, 1.679378628730774, 1.7016191482543945, 1.7241393327713013, 1.746928095817566, 1.7699753046035767, 1.7932708263397217, 1.8168052434921265, 1.840569257736206, 1.8645542860031128, 1.8887516260147095, 1.9131535291671753, 1.9377520084381104, 1.962539792060852, 1.987509846687317, 2.012655258178711, 2.0379695892333984, 2.0634467601776123, 2.089080572128296, 2.11486554145813, 2.140796184539795, 2.1668670177459717, 2.193073272705078, 2.2194101810455322, 2.245872974395752, 2.2724573612213135, 2.299159049987793, 2.325974225997925, 2.299159049987793, 2.2724573612213135, 2.245872974395752, 2.2194101810455322, 2.193073272705078, 2.1668670177459717, 2.140796184539795, 2.11486554145813, 2.089080572128296, 2.0634467601776123, 2.0379695892333984, 2.012655258178711, 1.987509846687317, 1.962539792060852, 1.9377520084381104, 1.9131535291671753, 1.8887516260147095, 1.8645542860031128, 1.840569257736206, 1.8168052434921265, 1.7932708263397217, 1.7699753046035767, 1.746928095817566, 1.7241393327713013, 1.7016191482543945, 1.679378628730774, 1.6574288606643677, 1.6357815265655518, 1.61444890499115, 1.5934436321258545, 1.5727787017822266, 1.5524678230285645, 1.5325249433517456, 1.5129648447036743, 1.4938023090362549, 1.4750529527664185, 1.4567327499389648, 1.4388580322265625, 1.4214457273483276, 1.4045127630233765, 1.3880770206451416, 1.3721561431884766, 1.3567683696746826, 1.341931939125061, 1.3276653289794922, 1.3139872550964355, 1.3009161949157715, 1.2884705066680908, 1.276668667793274, 1.2655285596847534, 1.2550678253173828, 1.2453036308288574, 1.2362525463104248, 1.2279301881790161, 1.2203514575958252, 1.2135305404663086, 1.2074799537658691, 1.2022114992141724, 1.1977355480194092, 1.1940608024597168, 1.1911948919296265, 1.1891436576843262, 1.1879111528396606, 1.21875, 1.2191505432128906, 1.2203514575958252, 1.2223504781723022, 1.2251434326171875, 1.2287251949310303, 1.233088731765747, 1.2382258176803589, 1.244126796722412, 1.2507810592651367, 1.258176326751709, 1.2662999629974365, 1.2751379013061523, 1.2846752405166626, 1.2948968410491943, 1.305786371231079, 1.3173273801803589, 1.3295029401779175, 1.34229576587677, 1.355688214302063, 1.369662880897522, 1.3842021226882935, 1.399288296699524, 1.4149038791656494, 1.431031584739685, 1.447654366493225, 1.4647551774978638, 1.4823176860809326, 1.5003254413604736, 1.5187628269195557, 1.537614345550537, 1.556864857673645, 1.5764998197555542, 1.5965049266815186, 1.6168667078018188, 1.6375715732574463, 1.658606767654419, 1.679960012435913, 1.7016191482543945, 1.7235727310180664, 1.7458096742630005, 1.7683192491531372, 1.7910912036895752, 1.8141156435012817, 1.8373830318450928, 1.8608843088150024, 1.8846107721328735, 1.908553957939148, 1.9327057600021362, 1.9570585489273071, 1.981604814529419, 2.0063376426696777, 2.03125, 2.05633544921875, 2.081587791442871, 2.1070010662078857, 2.1325693130493164, 2.1582870483398438, 2.1841492652893066, 2.2101504802703857, 2.2362864017486572, 2.262551784515381, 2.288942575454712, 2.3154542446136475, 2.3420827388763428, 2.3154542446136475, 2.288942575454712, 2.262551784515381, 2.2362864017486572, 2.2101504802703857, 2.1841492652893066, 2.1582870483398438, 2.1325693130493164, 2.1070010662078857, 2.081587791442871, 2.05633544921875, 2.03125, 2.0063376426696777, 1.981604814529419, 1.9570585489273071, 1.9327057600021362, 1.908553957939148, 1.8846107721328735, 1.8608843088150024, 1.8373830318450928, 1.8141156435012817, 1.7910912036895752, 1.7683192491531372, 1.7458096742630005, 1.7235727310180664, 1.7016191482543945, 1.679960012435913, 1.658606767654419, 1.6375715732574463, 1.6168667078018188, 1.5965049266815186, 1.5764998197555542, 1.556864857673645, 1.537614345550537, 1.5187628269195557, 1.5003254413604736, 1.4823176860809326, 1.4647551774978638, 1.447654366493225, 1.431031584739685, 1.4149038791656494, 1.399288296699524, 1.3842021226882935, 1.369662880897522, 1.355688214302063, 1.34229576587677, 1.3295029401779175, 1.3173273801803589, 1.305786371231079, 1.2948968410491943, 1.2846752405166626, 1.2751379013061523, 1.2662999629974365, 1.258176326751709, 1.2507810592651367, 1.244126796722412, 1.2382258176803589, 1.233088731765747, 1.2287251949310303, 1.2251434326171875, 1.2223504781723022, 1.2203514575958252, 1.2191505432128906, 1.25, 1.2503905296325684, 1.2515615224838257, 1.2535107135772705, 1.2562344074249268, 1.2597277164459229, 1.2639843225479126, 1.268996238708496, 1.2747548818588257, 1.28125, 1.2884705066680908, 1.296404242515564, 1.305038332939148, 1.3143588304519653, 1.3243513107299805, 1.3350006341934204, 1.346291184425354, 1.358207106590271, 1.370732069015503, 1.3838493824005127, 1.3975424766540527, 1.411794662475586, 1.426589012145996, 1.4419089555740356, 1.457737922668457, 1.4740595817565918, 1.4908576011657715, 1.5081160068511963, 1.5258194208145142, 1.543952465057373, 1.5625, 1.5814476013183594, 1.6007810831069946, 1.6204864978790283, 1.6405506134033203, 1.66096031665802, 1.681702971458435, 1.7027665376663208, 1.7241393327713013, 1.7458096742630005, 1.7677669525146484, 1.7900004386901855, 1.8125, 1.8352558612823486, 1.858258605003357, 1.881499171257019, 1.9049688577651978, 1.9286593198776245, 1.9525624513626099, 1.9766706228256226, 2.000976324081421, 2.025472640991211, 2.050152540206909, 2.075009346008301, 2.100037097930908, 2.125229835510254, 2.1505813598632812, 2.176086187362671, 2.2017393112182617, 2.2275354862213135, 2.253469467163086, 2.2795369625091553, 2.3057334423065186, 2.3320541381835938, 2.3584952354431152, 2.3320541381835938, 2.3057334423065186, 2.2795369625091553, 2.253469467163086, 2.2275354862213135, 2.2017393112182617, 2.176086187362671, 2.1505813598632812, 2.125229835510254, 2.100037097930908, 2.075009346008301, 2.050152540206909, 2.025472640991211, 2.000976324081421, 1.9766706228256226, 1.9525624513626099, 1.9286593198776245, 1.9049688577651978, 1.881499171257019, 1.858258605003357, 1.8352558612823486, 1.8125, 1.7900004386901855, 1.7677669525146484, 1.7458096742630005, 1.7241393327713013, 1.7027665376663208, 1.681702971458435, 1.66096031665802, 1.6405506134033203, 1.6204864978790283, 1.6007810831069946, 1.5814476013183594, 1.5625, 1.543952465057373, 1.5258194208145142, 1.5081160068511963, 1.4908576011657715, 1.4740595817565918, 1.457737922668457, 1.4419089555740356, 1.426589012145996, 1.411794662475586, 1.3975424766540527, 1.3838493824005127, 1.370732069015503, 1.358207106590271, 1.346291184425354, 1.3350006341934204, 1.3243513107299805, 1.3143588304519653, 1.305038332939148, 1.296404242515564, 1.2884705066680908, 1.28125, 1.2747548818588257, 1.268996238708496, 1.2639843225479126, 1.2597277164459229, 1.2562344074249268, 1.2535107135772705, 1.2515615224838257, 1.2503905296325684, 1.28125, 1.2816309928894043, 1.282773494720459, 1.2846752405166626, 1.2873331308364868, 1.29074227809906, 1.2948968410491943, 1.2997896671295166, 1.3054124116897583, 1.3117557764053345, 1.3188092708587646, 1.3265615701675415, 1.3350006341934204, 1.3441133499145508, 1.3538862466812134, 1.364305019378662, 1.3753551244735718, 1.3870213031768799, 1.399288296699524, 1.4121404886245728, 1.425561785697937, 1.4395365715026855, 1.454048752784729, 1.4690823554992676, 1.4846216440200806, 1.5006508827209473, 1.5171544551849365, 1.5341172218322754, 1.5515239238739014, 1.5693598985671997, 1.5876107215881348, 1.60626220703125, 1.625300407409668, 1.644712209701538, 1.6644842624664307, 1.6846040487289429, 1.7050590515136719, 1.7258377075195312, 1.746928095817566, 1.7683192491531372, 1.7900004386901855, 1.8119611740112305, 1.8341913223266602, 1.8566813468933105, 1.8794218301773071, 1.9024039506912231, 1.9256187677383423, 1.9490582942962646, 1.9727143049240112, 1.9965790510177612, 2.0206453800201416, 2.0449059009552, 2.0693540573120117, 2.0939831733703613, 2.1187868118286133, 2.14375901222229, 2.168894052505493, 2.194186210632324, 2.219630002975464, 2.24522066116333, 2.2709527015686035, 2.2968218326568604, 2.3228232860565186, 2.348952531814575, 2.3752055168151855, 2.348952531814575, 2.3228232860565186, 2.2968218326568604, 2.2709527015686035, 2.24522066116333, 2.219630002975464, 2.194186210632324, 2.168894052505493, 2.14375901222229, 2.1187868118286133, 2.0939831733703613, 2.0693540573120117, 2.0449059009552, 2.0206453800201416, 1.9965790510177612, 1.9727143049240112, 1.9490582942962646, 1.9256187677383423, 1.9024039506912231, 1.8794218301773071, 1.8566813468933105, 1.8341913223266602, 1.8119611740112305, 1.7900004386901855, 1.7683192491531372, 1.746928095817566, 1.7258377075195312, 1.7050590515136719, 1.6846040487289429, 1.6644842624664307, 1.644712209701538, 1.625300407409668, 1.60626220703125, 1.5876107215881348, 1.5693598985671997, 1.5515239238739014, 1.5341172218322754, 1.5171544551849365, 1.5006508827209473, 1.4846216440200806, 1.4690823554992676, 1.454048752784729, 1.4395365715026855, 1.425561785697937, 1.4121404886245728, 1.399288296699524, 1.3870213031768799, 1.3753551244735718, 1.364305019378662, 1.3538862466812134, 1.3441133499145508, 1.3350006341934204, 1.3265615701675415, 1.3188092708587646, 1.3117557764053345, 1.3054124116897583, 1.2997896671295166, 1.2948968410491943, 1.29074227809906, 1.2873331308364868, 1.2846752405166626, 1.282773494720459, 1.2816309928894043, 1.3125, 1.3128719329833984, 1.3139872550964355, 1.315843939781189, 1.3184388875961304, 1.3217679262161255, 1.3258252143859863, 1.3306043148040771, 1.3360973596572876, 1.34229576587677, 1.3491895198822021, 1.3567683696746826, 1.3650206327438354, 1.373934268951416, 1.3834965229034424, 1.3936939239501953, 1.4045127630233765, 1.4159388542175293, 1.4279574155807495, 1.4405537843704224, 1.4537129402160645, 1.4674196243286133, 1.481658697128296, 1.4964150190353394, 1.5116733312606812, 1.5274187326431274, 1.5436360836029053, 1.560310959815979, 1.5774286985397339, 1.5949749946594238, 1.612936019897461, 1.6312979459762573, 1.6500473022460938, 1.6691713333129883, 1.6886570453643799, 1.7084921598434448, 1.7286646366119385, 1.7491627931594849, 1.7699753046035767, 1.7910912036895752, 1.8125, 1.8341913223266602, 1.856155276298523, 1.8783823251724243, 1.9008632898330688, 1.9235892295837402, 1.9465514421463013, 1.9697418212890625, 1.993152379989624, 2.016775369644165, 2.0406033992767334, 2.064629554748535, 2.0888469219207764, 2.113248825073242, 2.137828826904297, 2.162581205368042, 2.1875, 2.2125794887542725, 2.23781418800354, 2.2631990909576416, 2.288729190826416, 2.314399480819702, 2.340205669403076, 2.366142988204956, 2.392207384109497, 2.366142988204956, 2.340205669403076, 2.314399480819702, 2.288729190826416, 2.2631990909576416, 2.23781418800354, 2.2125794887542725, 2.1875, 2.162581205368042, 2.137828826904297, 2.113248825073242, 2.0888469219207764, 2.064629554748535, 2.0406033992767334, 2.016775369644165, 1.993152379989624, 1.9697418212890625, 1.9465514421463013, 1.9235892295837402, 1.9008632898330688, 1.8783823251724243, 1.856155276298523, 1.8341913223266602, 1.8125, 1.7910912036895752, 1.7699753046035767, 1.7491627931594849, 1.7286646366119385, 1.7084921598434448, 1.6886570453643799, 1.6691713333129883, 1.6500473022460938, 1.6312979459762573, 1.612936019897461, 1.5949749946594238, 1.5774286985397339, 1.560310959815979, 1.5436360836029053, 1.5274187326431274, 1.5116733312606812, 1.4964150190353394, 1.481658697128296, 1.4674196243286133, 1.4537129402160645, 1.4405537843704224, 1.4279574155807495, 1.4159388542175293, 1.4045127630233765, 1.3936939239501953, 1.3834965229034424, 1.373934268951416, 1.3650206327438354, 1.3567683696746826, 1.3491895198822021, 1.34229576587677, 1.3360973596572876, 1.3306043148040771, 1.3258252143859863, 1.3217679262161255, 1.3184388875961304, 1.315843939781189, 1.3139872550964355, 1.3128719329833984, 1.34375, 1.3441133499145508, 1.3452026844024658, 1.3470163345336914, 1.3495514392852783, 1.3528038263320923, 1.3567683696746826, 1.3614387512207031, 1.3668079376220703, 1.3728677034378052, 1.3796087503433228, 1.3870213031768799, 1.395094633102417, 1.4038172960281372, 1.4131773710250854, 1.4231622219085693, 1.4337587356567383, 1.4449535608291626, 1.4567327499389648, 1.4690823554992676, 1.4819881916046143, 1.4954357147216797, 1.5094106197357178, 1.5238981246948242, 1.5388840436935425, 1.5543537139892578, 1.5702930688858032, 1.5866878032684326, 1.6035239696502686, 1.6207878589630127, 1.6384658813476562, 1.656544804573059, 1.6750116348266602, 1.693853735923767, 1.7130587100982666, 1.732614517211914, 1.752509355545044, 1.7727317810058594, 1.7932708263397217, 1.8141156435012817, 1.8352558612823486, 1.8566813468933105, 1.8783823251724243, 1.900349497795105, 1.9225735664367676, 1.945045828819275, 1.9677577018737793, 1.9907010793685913, 2.0138678550720215, 2.0372507572174072, 2.0608420372009277, 2.084635019302368, 2.1086225509643555, 2.132798194885254, 2.1571555137634277, 2.1816887855529785, 2.2063915729522705, 2.2312588691711426, 2.256284713745117, 2.281464099884033, 2.3067920207977295, 2.332263469696045, 2.3578741550445557, 2.3836193084716797, 2.409494638442993, 2.3836193084716797, 2.3578741550445557, 2.332263469696045, 2.3067920207977295, 2.281464099884033, 2.256284713745117, 2.2312588691711426, 2.2063915729522705, 2.1816887855529785, 2.1571555137634277, 2.132798194885254, 2.1086225509643555, 2.084635019302368, 2.0608420372009277, 2.0372507572174072, 2.0138678550720215, 1.9907010793685913, 1.9677577018737793, 1.945045828819275, 1.9225735664367676, 1.900349497795105, 1.8783823251724243, 1.8566813468933105, 1.8352558612823486, 1.8141156435012817, 1.7932708263397217, 1.7727317810058594, 1.752509355545044, 1.732614517211914, 1.7130587100982666, 1.693853735923767, 1.6750116348266602, 1.656544804573059, 1.6384658813476562, 1.6207878589630127, 1.6035239696502686, 1.5866878032684326, 1.5702930688858032, 1.5543537139892578, 1.5388840436935425, 1.5238981246948242, 1.5094106197357178, 1.4954357147216797, 1.4819881916046143, 1.4690823554992676, 1.4567327499389648, 1.4449535608291626, 1.4337587356567383, 1.4231622219085693, 1.4131773710250854, 1.4038172960281372, 1.395094633102417, 1.3870213031768799, 1.3796087503433228, 1.3728677034378052, 1.3668079376220703, 1.3614387512207031, 1.3567683696746826, 1.3528038263320923, 1.3495514392852783, 1.3470163345336914, 1.3452026844024658, 1.3441133499145508, 1.375, 1.3753551244735718, 1.3764196634292603, 1.3781923055648804, 1.3806700706481934, 1.3838493824005127, 1.3877252340316772, 1.392291784286499, 1.3975424766540527, 1.403469443321228, 1.4100642204284668, 1.417317509651184, 1.4252192974090576, 1.4337587356567383, 1.4429244995117188, 1.452704906463623, 1.4630874395370483, 1.4740595817565918, 1.4856079816818237, 1.497719645500183, 1.510380744934082, 1.5235776901245117, 1.5372967720031738, 1.5515239238739014, 1.5662455558776855, 1.5814476013183594, 1.5971165895462036, 1.6132386922836304, 1.62980055809021, 1.6467890739440918, 1.6641908884048462, 1.6819933652877808, 1.7001838684082031, 1.71875, 1.7376798391342163, 1.7569615840911865, 1.7765837907791138, 1.7965352535247803, 1.8168052434921265, 1.8373830318450928, 1.858258605003357, 1.8794218301773071, 1.9008632898330688, 1.9225735664367676, 1.9445436000823975, 1.9667649269104004, 1.9892288446426392, 2.011927366256714, 2.0348525047302246, 2.057996988296509, 2.081353187561035, 2.1049141883850098, 2.1286733150482178, 2.1526236534118652, 2.1767592430114746, 2.2010738849639893, 2.2255616188049316, 2.2502169609069824, 2.2750344276428223, 2.300008535385132, 2.325134515762329, 2.350407123565674, 2.3758223056793213, 2.4013748168945312, 2.427061080932617, 2.4013748168945312, 2.3758223056793213, 2.350407123565674, 2.325134515762329, 2.300008535385132, 2.2750344276428223, 2.2502169609069824, 2.2255616188049316, 2.2010738849639893, 2.1767592430114746, 2.1526236534118652, 2.1286733150482178, 2.1049141883850098, 2.081353187561035, 2.057996988296509, 2.0348525047302246, 2.011927366256714, 1.9892288446426392, 1.9667649269104004, 1.9445436000823975, 1.9225735664367676, 1.9008632898330688, 1.8794218301773071, 1.858258605003357, 1.8373830318450928, 1.8168052434921265, 1.7965352535247803, 1.7765837907791138, 1.7569615840911865, 1.7376798391342163, 1.71875, 1.7001838684082031, 1.6819933652877808, 1.6641908884048462, 1.6467890739440918, 1.62980055809021, 1.6132386922836304, 1.5971165895462036, 1.5814476013183594, 1.5662455558776855, 1.5515239238739014, 1.5372967720031738, 1.5235776901245117, 1.510380744934082, 1.497719645500183, 1.4856079816818237, 1.4740595817565918, 1.4630874395370483, 1.452704906463623, 1.4429244995117188, 1.4337587356567383, 1.4252192974090576, 1.417317509651184, 1.4100642204284668, 1.403469443321228, 1.3975424766540527, 1.392291784286499, 1.3877252340316772, 1.3838493824005127, 1.3806700706481934, 1.3781923055648804, 1.3764196634292603, 1.3753551244735718, 1.40625, 1.4065971374511719, 1.4076381921768188, 1.4093714952468872, 1.411794662475586, 1.4149038791656494, 1.4186949729919434, 1.4231622219085693, 1.4282993078231812, 1.4340991973876953, 1.4405537843704224, 1.447654366493225, 1.4553914070129395, 1.4637547731399536, 1.472733974456787, 1.4823176860809326, 1.4924942255020142, 1.5032516717910767, 1.5145776271820068, 1.5264593362808228, 1.5388840436935425, 1.5518386363983154, 1.565310001373291, 1.5792847871780396, 1.59375, 1.6086921691894531, 1.624098300933838, 1.6399551630020142, 1.65625, 1.6729698181152344, 1.690102219581604, 1.7076345682144165, 1.7255547046661377, 1.743850827217102, 1.762511134147644, 1.7815240621566772, 1.800878643989563, 1.8205639123916626, 1.840569257736206, 1.8608843088150024, 1.881499171257019, 1.9024039506912231, 1.9235892295837402, 1.945045828819275, 1.9667649269104004, 1.9887378215789795, 2.010956287384033, 2.033412218093872, 2.056097984313965, 2.0790059566497803, 2.102128744125366, 2.1254594326019287, 2.148991346359253, 2.172717809677124, 2.1966326236724854, 2.2207298278808594, 2.2450032234191895, 2.269447088241577, 2.2940564155578613, 2.3188257217407227, 2.34375, 2.3688242435455322, 2.3940436840057373, 2.4194040298461914, 2.4449005126953125, 2.4194040298461914, 2.3940436840057373, 2.3688242435455322, 2.34375, 2.3188257217407227, 2.2940564155578613, 2.269447088241577, 2.2450032234191895, 2.2207298278808594, 2.1966326236724854, 2.172717809677124, 2.148991346359253, 2.1254594326019287, 2.102128744125366, 2.0790059566497803, 2.056097984313965, 2.033412218093872, 2.010956287384033, 1.9887378215789795, 1.9667649269104004, 1.945045828819275, 1.9235892295837402, 1.9024039506912231, 1.881499171257019, 1.8608843088150024, 1.840569257736206, 1.8205639123916626, 1.800878643989563, 1.7815240621566772, 1.762511134147644, 1.743850827217102, 1.7255547046661377, 1.7076345682144165, 1.690102219581604, 1.6729698181152344, 1.65625, 1.6399551630020142, 1.624098300933838, 1.6086921691894531, 1.59375, 1.5792847871780396, 1.565310001373291, 1.5518386363983154, 1.5388840436935425, 1.5264593362808228, 1.5145776271820068, 1.5032516717910767, 1.4924942255020142, 1.4823176860809326, 1.472733974456787, 1.4637547731399536, 1.4553914070129395, 1.447654366493225, 1.4405537843704224, 1.4340991973876953, 1.4282993078231812, 1.4231622219085693, 1.4186949729919434, 1.4149038791656494, 1.411794662475586, 1.4093714952468872, 1.4076381921768188, 1.4065971374511719, 1.4375, 1.4378396272659302, 1.4388580322265625, 1.4405537843704224, 1.4429244995117188, 1.4459669589996338, 1.4496766328811646, 1.454048752784729, 1.45907723903656, 1.4647551774978638, 1.4710752964019775, 1.4780292510986328, 1.4856079816818237, 1.4938023090362549, 1.5026018619537354, 1.5119962692260742, 1.5219744443893433, 1.5325249433517456, 1.5436360836029053, 1.5552959442138672, 1.5674920082092285, 1.580212116241455, 1.5934436321258545, 1.6071738004684448, 1.6213902235031128, 1.636080026626587, 1.6512305736541748, 1.6668294668197632, 1.6828639507293701, 1.699321985244751, 1.716191291809082, 1.7334598302841187, 1.7511156797409058, 1.769147515296936, 1.7875436544418335, 1.806293249130249, 1.8253852128982544, 1.8448090553283691, 1.8645542860031128, 1.8846107721328735, 1.9049688577651978, 1.9256187677383423, 1.9465514421463013, 1.9677577018737793, 1.9892288446426392, 2.010956287384033, 2.0329320430755615, 2.055147886276245, 2.0775961875915527, 2.1002697944641113, 2.1231610774993896, 2.1462631225585938, 2.169569253921509, 2.193073272705078, 2.216768503189087, 2.2406489849090576, 2.2647087574005127, 2.288942575454712, 2.3133444786071777, 2.337909460067749, 2.3626322746276855, 2.3875081539154053, 2.412532329559326, 2.4377002716064453, 2.4630074501037598, 2.4377002716064453, 2.412532329559326, 2.3875081539154053, 2.3626322746276855, 2.337909460067749, 2.3133444786071777, 2.288942575454712, 2.2647087574005127, 2.2406489849090576, 2.216768503189087, 2.193073272705078, 2.169569253921509, 2.1462631225585938, 2.1231610774993896, 2.1002697944641113, 2.0775961875915527, 2.055147886276245, 2.0329320430755615, 2.010956287384033, 1.9892288446426392, 1.9677577018737793, 1.9465514421463013, 1.9256187677383423, 1.9049688577651978, 1.8846107721328735, 1.8645542860031128, 1.8448090553283691, 1.8253852128982544, 1.806293249130249, 1.7875436544418335, 1.769147515296936, 1.7511156797409058, 1.7334598302841187, 1.716191291809082, 1.699321985244751, 1.6828639507293701, 1.6668294668197632, 1.6512305736541748, 1.636080026626587, 1.6213902235031128, 1.6071738004684448, 1.5934436321258545, 1.580212116241455, 1.5674920082092285, 1.5552959442138672, 1.5436360836029053, 1.5325249433517456, 1.5219744443893433, 1.5119962692260742, 1.5026018619537354, 1.4938023090362549, 1.4856079816818237, 1.4780292510986328, 1.4710752964019775, 1.4647551774978638, 1.45907723903656, 1.454048752784729, 1.4496766328811646, 1.4459669589996338, 1.4429244995117188, 1.4405537843704224, 1.4388580322265625, 1.4378396272659302, 1.46875, 1.4690823554992676, 1.4700791835784912, 1.4717389345169067, 1.4740595817565918, 1.477037787437439, 1.4806697368621826, 1.4849505424499512, 1.4898747205734253, 1.4954357147216797, 1.50162672996521, 1.5084397792816162, 1.5158666372299194, 1.5238981246948242, 1.5325249433517456, 1.5417370796203613, 1.5515239238739014, 1.5618748664855957, 1.5727787017822266, 1.584223985671997, 1.5961991548538208, 1.6086921691894531, 1.621691346168518, 1.635184407234192, 1.64915931224823, 1.6636039018630981, 1.6785061359405518, 1.693853735923767, 1.7096349000930786, 1.7258377075195312, 1.74245023727417, 1.7594610452651978, 1.7768585681915283, 1.7946317195892334, 1.8127694129943848, 1.8312606811523438, 1.8500950336456299, 1.8692620992660522, 1.8887516260147095, 1.908553957939148, 1.9286593198776245, 1.9490582942962646, 1.9697418212890625, 1.9907010793685913, 2.011927366256714, 2.033412218093872, 2.055147886276245, 2.0771262645721436, 2.099339485168457, 2.1217806339263916, 2.144442319869995, 2.1673176288604736, 2.1903998851776123, 2.2136826515197754, 2.237159490585327, 2.260824680328369, 2.2846720218658447, 2.3086962699890137, 2.3328914642333984, 2.357252836227417, 2.38177490234375, 2.4064528942108154, 2.4312820434570312, 2.4562580585479736, 2.4813759326934814, 2.4562580585479736, 2.4312820434570312, 2.4064528942108154, 2.38177490234375, 2.357252836227417, 2.3328914642333984, 2.3086962699890137, 2.2846720218658447, 2.260824680328369, 2.237159490585327, 2.2136826515197754, 2.1903998851776123, 2.1673176288604736, 2.144442319869995, 2.1217806339263916, 2.099339485168457, 2.0771262645721436, 2.055147886276245, 2.033412218093872, 2.011927366256714, 1.9907010793685913, 1.9697418212890625, 1.9490582942962646, 1.9286593198776245, 1.908553957939148, 1.8887516260147095, 1.8692620992660522, 1.8500950336456299, 1.8312606811523438, 1.8127694129943848, 1.7946317195892334, 1.7768585681915283, 1.7594610452651978, 1.74245023727417, 1.7258377075195312, 1.7096349000930786, 1.693853735923767, 1.6785061359405518, 1.6636039018630981, 1.64915931224823, 1.635184407234192, 1.621691346168518, 1.6086921691894531, 1.5961991548538208, 1.584223985671997, 1.5727787017822266, 1.5618748664855957, 1.5515239238739014, 1.5417370796203613, 1.5325249433517456, 1.5238981246948242, 1.5158666372299194, 1.5084397792816162, 1.50162672996521, 1.4954357147216797, 1.4898747205734253, 1.4849505424499512, 1.4806697368621826, 1.477037787437439, 1.4740595817565918, 1.4717389345169067, 1.4700791835784912, 1.4690823554992676, 1.5, 1.5003254413604736, 1.5013015270233154, 1.5029268264770508, 1.5051993131637573, 1.5081160068511963, 1.5116733312606812, 1.5158666372299194, 1.520690679550171, 1.5261393785476685, 1.5322062969207764, 1.5388840436935425, 1.546164631843567, 1.5540395975112915, 1.5625, 1.5715364217758179, 1.5811388492584229, 1.5912971496582031, 1.6020007133483887, 1.6132386922836304, 1.625, 1.6372733116149902, 1.6500473022460938, 1.6633104085922241, 1.6770509481430054, 1.691257357597351, 1.7059179544448853, 1.7210211753845215, 1.7365554571151733, 1.752509355545044, 1.7688714265823364, 1.7856305837631226, 1.8027756214141846, 1.8202956914901733, 1.8381801843643188, 1.8564183712005615, 1.875, 1.893915057182312, 1.9131535291671753, 1.9327057600021362, 1.9525624513626099, 1.9727143049240112, 1.993152379989624, 2.0138678550720215, 2.0348525047302246, 2.056097984313965, 2.0775961875915527, 2.099339485168457, 2.1213202476501465, 2.143531322479248, 2.1659653186798096, 2.1886157989501953, 2.2114758491516113, 2.2345387935638428, 2.257798910140991, 2.28125, 2.3048861026763916, 2.3287017345428467, 2.352691173553467, 2.37684965133667, 2.4011716842651367, 2.425652265548706, 2.450286865234375, 2.4750709533691406, 2.5, 2.4750709533691406, 2.450286865234375, 2.425652265548706, 2.4011716842651367, 2.37684965133667, 2.352691173553467, 2.3287017345428467, 2.3048861026763916, 2.28125, 2.257798910140991, 2.2345387935638428, 2.2114758491516113, 2.1886157989501953, 2.1659653186798096, 2.143531322479248, 2.1213202476501465, 2.099339485168457, 2.0775961875915527, 2.056097984313965, 2.0348525047302246, 2.0138678550720215, 1.993152379989624, 1.9727143049240112, 1.9525624513626099, 1.9327057600021362, 1.9131535291671753, 1.893915057182312, 1.875, 1.8564183712005615, 1.8381801843643188, 1.8202956914901733, 1.8027756214141846, 1.7856305837631226, 1.7688714265823364, 1.752509355545044, 1.7365554571151733, 1.7210211753845215, 1.7059179544448853, 1.691257357597351, 1.6770509481430054, 1.6633104085922241, 1.6500473022460938, 1.6372733116149902, 1.625, 1.6132386922836304, 1.6020007133483887, 1.5912971496582031, 1.5811388492584229, 1.5715364217758179, 1.5625, 1.5540395975112915, 1.546164631843567, 1.5388840436935425, 1.5322062969207764, 1.5261393785476685, 1.520690679550171, 1.5158666372299194, 1.5116733312606812, 1.5081160068511963, 1.5051993131637573, 1.5029268264770508, 1.5013015270233154, 1.5003254413604736, 1.53125, 1.5315688848495483, 1.5325249433517456, 1.5341172218322754, 1.5363435745239258, 1.539201259613037, 1.542686939239502, 1.5467960834503174, 1.5515239238739014, 1.556864857673645, 1.5628124475479126, 1.5693598985671997, 1.5764998197555542, 1.584223985671997, 1.5925240516662598, 1.6013909578323364, 1.6108155250549316, 1.6207878589630127, 1.6312979459762573, 1.6423354148864746, 1.653889775276184, 1.6659504175186157, 1.6785061359405518, 1.691546082496643, 1.7050590515136719, 1.7190340757369995, 1.7334598302841187, 1.7483251094818115, 1.76361882686615, 1.7793301343917847, 1.795447826385498, 1.8119611740112305, 1.8288593292236328, 1.8461319208145142, 1.863768458366394, 1.881758689880371, 1.9000924825668335, 1.9187601804733276, 1.9377520084381104, 1.9570585489273071, 1.9766706228256226, 1.9965790510177612, 2.016775369644165, 2.0372507572174072, 2.057996988296509, 2.0790059566497803, 2.1002697944641113, 2.1217806339263916, 2.143531322479248, 2.1655144691467285, 2.187723159790039, 2.2101504802703857, 2.232789993286133, 2.2556352615356445, 2.2786800861358643, 2.3019182682037354, 2.3253443241119385, 2.348952531814575, 2.372737407684326, 2.396693706512451, 2.42081618309021, 2.4451003074645996, 2.469541072845459, 2.494133710861206, 2.518874168395996, 2.494133710861206, 2.469541072845459, 2.4451003074645996, 2.42081618309021, 2.396693706512451, 2.372737407684326, 2.348952531814575, 2.3253443241119385, 2.3019182682037354, 2.2786800861358643, 2.2556352615356445, 2.232789993286133, 2.2101504802703857, 2.187723159790039, 2.1655144691467285, 2.143531322479248, 2.1217806339263916, 2.1002697944641113, 2.0790059566497803, 2.057996988296509, 2.0372507572174072, 2.016775369644165, 1.9965790510177612, 1.9766706228256226, 1.9570585489273071, 1.9377520084381104, 1.9187601804733276, 1.9000924825668335, 1.881758689880371, 1.863768458366394, 1.8461319208145142, 1.8288593292236328, 1.8119611740112305, 1.795447826385498, 1.7793301343917847, 1.76361882686615, 1.7483251094818115, 1.7334598302841187, 1.7190340757369995, 1.7050590515136719, 1.691546082496643, 1.6785061359405518, 1.6659504175186157, 1.653889775276184, 1.6423354148864746, 1.6312979459762573, 1.6207878589630127, 1.6108155250549316, 1.6013909578323364, 1.5925240516662598, 1.584223985671997, 1.5764998197555542, 1.5693598985671997, 1.5628124475479126, 1.556864857673645, 1.5515239238739014, 1.5467960834503174, 1.542686939239502, 1.539201259613037, 1.5363435745239258, 1.5341172218322754, 1.5325249433517456, 1.5315688848495483, 1.5625, 1.5628124475479126, 1.5637495517730713, 1.565310001373291, 1.5674920082092285, 1.5702930688858032, 1.5737098455429077, 1.5777381658554077, 1.5823736190795898, 1.5876107215881348, 1.5934436321258545, 1.5998656749725342, 1.6068700551986694, 1.61444890499115, 1.6225943565368652, 1.6312979459762573, 1.6405506134033203, 1.6503432989120483, 1.6606662273406982, 1.671509861946106, 1.6828639507293701, 1.694718360900879, 1.7070624828338623, 1.7198859453201294, 1.7331780195236206, 1.746928095817566, 1.7611253261566162, 1.7757591009140015, 1.7908185720443726, 1.806293249130249, 1.8221725225448608, 1.838445782661438, 1.855102777481079, 1.8721332550048828, 1.8895270824432373, 1.9072743654251099, 1.9253652095794678, 1.9437901973724365, 1.962539792060852, 1.981604814529419, 2.000976324081421, 2.0206453800201416, 2.0406033992767334, 2.0608420372009277, 2.081353187561035, 2.102128744125366, 2.1231610774993896, 2.144442319869995, 2.1659653186798096, 2.187723159790039, 2.2097086906433105, 2.231915235519409, 2.25433611869812, 2.2769651412963867, 2.2997961044311523, 2.3228232860565186, 2.3460404872894287, 2.3694424629211426, 2.393023729324341, 2.416778802871704, 2.4407029151916504, 2.4647910594940186, 2.4890384674072266, 2.5134403705596924, 2.537992477416992, 2.5134403705596924, 2.4890384674072266, 2.4647910594940186, 2.4407029151916504, 2.416778802871704, 2.393023729324341, 2.3694424629211426, 2.3460404872894287, 2.3228232860565186, 2.2997961044311523, 2.2769651412963867, 2.25433611869812, 2.231915235519409, 2.2097086906433105, 2.187723159790039, 2.1659653186798096, 2.144442319869995, 2.1231610774993896, 2.102128744125366, 2.081353187561035, 2.0608420372009277, 2.0406033992767334, 2.0206453800201416, 2.000976324081421, 1.981604814529419, 1.962539792060852, 1.9437901973724365, 1.9253652095794678, 1.9072743654251099, 1.8895270824432373, 1.8721332550048828, 1.855102777481079, 1.838445782661438, 1.8221725225448608, 1.806293249130249, 1.7908185720443726, 1.7757591009140015, 1.7611253261566162, 1.746928095817566, 1.7331780195236206, 1.7198859453201294, 1.7070624828338623, 1.694718360900879, 1.6828639507293701, 1.671509861946106, 1.6606662273406982, 1.6503432989120483, 1.6405506134033203, 1.6312979459762573, 1.6225943565368652, 1.61444890499115, 1.6068700551986694, 1.5998656749725342, 1.5934436321258545, 1.5876107215881348, 1.5823736190795898, 1.5777381658554077, 1.5737098455429077, 1.5702930688858032, 1.5674920082092285, 1.565310001373291, 1.5637495517730713, 1.5628124475479126, 1.59375, 1.5940563678741455, 1.5949749946594238, 1.5965049266815186, 1.598644495010376, 1.6013909578323364, 1.6047414541244507, 1.6086921691894531, 1.6132386922836304, 1.6183758974075317, 1.624098300933838, 1.6303997039794922, 1.6372733116149902, 1.644712209701538, 1.6527085304260254, 1.6612542867660522, 1.6703410148620605, 1.679960012435913, 1.690102219581604, 1.7007580995559692, 1.7119182348251343, 1.7235727310180664, 1.7357118129730225, 1.7483251094818115, 1.7614026069641113, 1.774933934211731, 1.7889089584350586, 1.8033173084259033, 1.8181484937667847, 1.8333925008773804, 1.849039077758789, 1.8650779724121094, 1.881499171257019, 1.8982927799224854, 1.9154491424560547, 1.9329583644866943, 1.9508111476898193, 1.9689979553222656, 1.987509846687317, 2.0063376426696777, 2.025472640991211, 2.0449059009552, 2.064629554748535, 2.084635019302368, 2.1049141883850098, 2.1254594326019287, 2.1462631225585938, 2.1673176288604736, 2.1886157989501953, 2.2101504802703857, 2.231915235519409, 2.2539029121398926, 2.2761073112487793, 2.2985219955444336, 2.321141004562378, 2.3439583778381348, 2.3669683933258057, 2.390165328979492, 2.413544178009033, 2.4370992183685303, 2.4608259201049805, 2.4847190380096436, 2.5087735652923584, 2.5329854488372803, 2.557349920272827, 2.5329854488372803, 2.5087735652923584, 2.4847190380096436, 2.4608259201049805, 2.4370992183685303, 2.413544178009033, 2.390165328979492, 2.3669683933258057, 2.3439583778381348, 2.321141004562378, 2.2985219955444336, 2.2761073112487793, 2.2539029121398926, 2.231915235519409, 2.2101504802703857, 2.1886157989501953, 2.1673176288604736, 2.1462631225585938, 2.1254594326019287, 2.1049141883850098, 2.084635019302368, 2.064629554748535, 2.0449059009552, 2.025472640991211, 2.0063376426696777, 1.987509846687317, 1.9689979553222656, 1.9508111476898193, 1.9329583644866943, 1.9154491424560547, 1.8982927799224854, 1.881499171257019, 1.8650779724121094, 1.849039077758789, 1.8333925008773804, 1.8181484937667847, 1.8033173084259033, 1.7889089584350586, 1.774933934211731, 1.7614026069641113, 1.7483251094818115, 1.7357118129730225, 1.7235727310180664, 1.7119182348251343, 1.7007580995559692, 1.690102219581604, 1.679960012435913, 1.6703410148620605, 1.6612542867660522, 1.6527085304260254, 1.644712209701538, 1.6372733116149902, 1.6303997039794922, 1.624098300933838, 1.6183758974075317, 1.6132386922836304, 1.6086921691894531, 1.6047414541244507, 1.6013909578323364, 1.598644495010376, 1.5965049266815186, 1.5949749946594238, 1.5940563678741455, 1.625, 1.625300407409668, 1.6262015104293823, 1.6277021169662476, 1.62980055809021, 1.6324946880340576, 1.6357815265655518, 1.6396574974060059, 1.644118309020996, 1.64915931224823, 1.6547752618789673, 1.66096031665802, 1.6677080392837524, 1.6750116348266602, 1.6828639507293701, 1.691257357597351, 1.7001838684082031, 1.7096349000930786, 1.719602108001709, 1.7300763130187988, 1.7410485744476318, 1.752509355545044, 1.7644492387771606, 1.7768585681915283, 1.7897276878356934, 1.803046464920044, 1.8168052434921265, 1.8309940099716187, 1.8456028699874878, 1.8606219291687012, 1.8760414123535156, 1.8918513059616089, 1.9080421924591064, 1.9246042966842651, 1.941528081893921, 1.9588042497634888, 1.9764235019683838, 1.9943768978118896, 2.012655258178711, 2.03125, 2.050152540206909, 2.0693540573120117, 2.0888469219207764, 2.1086225509643555, 2.1286733150482178, 2.148991346359253, 2.169569253921509, 2.1903998851776123, 2.2114758491516113, 2.232789993286133, 2.25433611869812, 2.2761073112487793, 2.2980971336364746, 2.3202993869781494, 2.342708110809326, 2.3653173446655273, 2.3881216049194336, 2.4111151695251465, 2.434292793273926, 2.457648992538452, 2.4811792373657227, 2.504878044128418, 2.5287411212921143, 2.5527634620666504, 2.5769410133361816, 2.5527634620666504, 2.5287411212921143, 2.504878044128418, 2.4811792373657227, 2.457648992538452, 2.434292793273926, 2.4111151695251465, 2.3881216049194336, 2.3653173446655273, 2.342708110809326, 2.3202993869781494, 2.2980971336364746, 2.2761073112487793, 2.25433611869812, 2.232789993286133, 2.2114758491516113, 2.1903998851776123, 2.169569253921509, 2.148991346359253, 2.1286733150482178, 2.1086225509643555, 2.0888469219207764, 2.0693540573120117, 2.050152540206909, 2.03125, 2.012655258178711, 1.9943768978118896, 1.9764235019683838, 1.9588042497634888, 1.941528081893921, 1.9246042966842651, 1.9080421924591064, 1.8918513059616089, 1.8760414123535156, 1.8606219291687012, 1.8456028699874878, 1.8309940099716187, 1.8168052434921265, 1.803046464920044, 1.7897276878356934, 1.7768585681915283, 1.7644492387771606, 1.752509355545044, 1.7410485744476318, 1.7300763130187988, 1.719602108001709, 1.7096349000930786, 1.7001838684082031, 1.691257357597351, 1.6828639507293701, 1.6750116348266602, 1.6677080392837524, 1.66096031665802, 1.6547752618789673, 1.64915931224823, 1.644118309020996, 1.6396574974060059, 1.6357815265655518, 1.6324946880340576, 1.62980055809021, 1.6277021169662476, 1.6262015104293823, 1.625300407409668, 1.65625, 1.656544804573059, 1.6574288606643677, 1.6589012145996094, 1.66096031665802, 1.6636039018630981, 1.6668294668197632, 1.670633316040039, 1.6750116348266602, 1.679960012435913, 1.6854733228683472, 1.691546082496643, 1.6981722116470337, 1.7053455114364624, 1.7130587100982666, 1.7213048934936523, 1.7300763130187988, 1.7393649816513062, 1.7491627931594849, 1.7594610452651978, 1.7702511548995972, 1.7815240621566772, 1.7932708263397217, 1.8054821491241455, 1.8181484937667847, 1.8312606811523438, 1.8448090553283691, 1.8587840795516968, 1.8731762170791626, 1.8879759311676025, 1.903173804283142, 1.9187601804733276, 1.9347258806228638, 1.9510613679885864, 1.9677577018737793, 1.9848055839538574, 2.0021960735321045, 2.0199203491210938, 2.0379695892333984, 2.05633544921875, 2.075009346008301, 2.0939831733703613, 2.113248825073242, 2.132798194885254, 2.1526236534118652, 2.172717809677124, 2.193073272705078, 2.2136826515197754, 2.2345387935638428, 2.2556352615356445, 2.2769651412963867, 2.2985219955444336, 2.3202993869781494, 2.3422911167144775, 2.3644914627075195, 2.386894464492798, 2.409494638442993, 2.432286024093628, 2.45526385307312, 2.4784224033355713, 2.5017571449279785, 2.5252630710601807, 2.5489351749420166, 2.5727691650390625, 2.5967602729797363, 2.5727691650390625, 2.5489351749420166, 2.5252630710601807, 2.5017571449279785, 2.4784224033355713, 2.45526385307312, 2.432286024093628, 2.409494638442993, 2.386894464492798, 2.3644914627075195, 2.3422911167144775, 2.3202993869781494, 2.2985219955444336, 2.2769651412963867, 2.2556352615356445, 2.2345387935638428, 2.2136826515197754, 2.193073272705078, 2.172717809677124, 2.1526236534118652, 2.132798194885254, 2.113248825073242, 2.0939831733703613, 2.075009346008301, 2.05633544921875, 2.0379695892333984, 2.0199203491210938, 2.0021960735321045, 1.9848055839538574, 1.9677577018737793, 1.9510613679885864, 1.9347258806228638, 1.9187601804733276, 1.903173804283142, 1.8879759311676025, 1.8731762170791626, 1.8587840795516968, 1.8448090553283691, 1.8312606811523438, 1.8181484937667847, 1.8054821491241455, 1.7932708263397217, 1.7815240621566772, 1.7702511548995972, 1.7594610452651978, 1.7491627931594849, 1.7393649816513062, 1.7300763130187988, 1.7213048934936523, 1.7130587100982666, 1.7053455114364624, 1.6981722116470337, 1.691546082496643, 1.6854733228683472, 1.679960012435913, 1.6750116348266602, 1.670633316040039, 1.6668294668197632, 1.6636039018630981, 1.66096031665802, 1.6589012145996094, 1.6574288606643677, 1.656544804573059, 1.6875, 1.6877893209457397, 1.6886570453643799, 1.690102219581604, 1.692123293876648, 1.694718360900879, 1.6978846788406372, 1.7016191482543945, 1.7059179544448853, 1.710776925086975, 1.716191291809082, 1.7221556901931763, 1.7286646366119385, 1.7357118129730225, 1.743290662765503, 1.751394510269165, 1.7600159645080566, 1.769147515296936, 1.7787811756134033, 1.7889089584350586, 1.7995225191116333, 1.8106132745742798, 1.8221725225448608, 1.8341913223266602, 1.846660852432251, 1.859571933746338, 1.872915506362915, 1.886682391166687, 1.9008632898330688, 1.9154491424560547, 1.9304306507110596, 1.9457987546920776, 1.961544394493103, 1.9776583909988403, 1.9941320419311523, 2.010956287384033, 2.028122663497925, 2.0456223487854004, 2.0634467601776123, 2.081587791442871, 2.100037097930908, 2.1187868118286133, 2.137828826904297, 2.1571555137634277, 2.1767592430114746, 2.1966326236724854, 2.216768503189087, 2.237159490585327, 2.257798910140991, 2.2786800861358643, 2.2997961044311523, 2.321141004562378, 2.342708110809326, 2.3644914627075195, 2.3864853382110596, 2.4086837768554688, 2.4310812950134277, 2.453672409057617, 2.4764516353607178, 2.4994139671325684, 2.522554397583008, 2.545868396759033, 2.569350481033325, 2.592996835708618, 2.61680269241333, 2.592996835708618, 2.569350481033325, 2.545868396759033, 2.522554397583008, 2.4994139671325684, 2.4764516353607178, 2.453672409057617, 2.4310812950134277, 2.4086837768554688, 2.3864853382110596, 2.3644914627075195, 2.342708110809326, 2.321141004562378, 2.2997961044311523, 2.2786800861358643, 2.257798910140991, 2.237159490585327, 2.216768503189087, 2.1966326236724854, 2.1767592430114746, 2.1571555137634277, 2.137828826904297, 2.1187868118286133, 2.100037097930908, 2.081587791442871, 2.0634467601776123, 2.0456223487854004, 2.028122663497925, 2.010956287384033, 1.9941320419311523, 1.9776583909988403, 1.961544394493103, 1.9457987546920776, 1.9304306507110596, 1.9154491424560547, 1.9008632898330688, 1.886682391166687, 1.872915506362915, 1.859571933746338, 1.846660852432251, 1.8341913223266602, 1.8221725225448608, 1.8106132745742798, 1.7995225191116333, 1.7889089584350586, 1.7787811756134033, 1.769147515296936, 1.7600159645080566, 1.751394510269165, 1.743290662765503, 1.7357118129730225, 1.7286646366119385, 1.7221556901931763, 1.716191291809082, 1.710776925086975, 1.7059179544448853, 1.7016191482543945, 1.6978846788406372, 1.694718360900879, 1.692123293876648, 1.690102219581604, 1.6886570453643799, 1.6877893209457397, 1.71875, 1.7190340757369995, 1.7198859453201294, 1.7213048934936523, 1.7232894897460938, 1.7258377075195312, 1.7289470434188843, 1.732614517211914, 1.7368366718292236, 1.7416093349456787, 1.746928095817566, 1.7527879476547241, 1.7591835260391235, 1.7661088705062866, 1.7735579013824463, 1.7815240621566772, 1.7900004386901855, 1.7989797592163086, 1.8084545135498047, 1.8184170722961426, 1.8288593292236328, 1.8397732973098755, 1.851150393486023, 1.8629822731018066, 1.875260353088379, 1.8879759311676025, 1.9011201858520508, 1.9146841764450073, 1.9286593198776245, 1.943036437034607, 1.957806944847107, 1.9729617834091187, 1.9884922504425049, 2.004389762878418, 2.0206453800201416, 2.0372507572174072, 2.054197311401367, 2.071476697921753, 2.089080572128296, 2.1070010662078857, 2.125229835510254, 2.14375901222229, 2.162581205368042, 2.1816887855529785, 2.2010738849639893, 2.2207298278808594, 2.2406489849090576, 2.260824680328369, 2.28125, 2.3019182682037354, 2.3228232860565186, 2.3439583778381348, 2.3653173446655273, 2.386894464492798, 2.4086837768554688, 2.4306795597076416, 2.452876091003418, 2.4752683639526367, 2.4978506565093994, 2.520618200302124, 2.5435657501220703, 2.5666885375976562, 2.589982271194458, 2.6134417057037354, 2.6370630264282227, 2.6134417057037354, 2.589982271194458, 2.5666885375976562, 2.5435657501220703, 2.520618200302124, 2.4978506565093994, 2.4752683639526367, 2.452876091003418, 2.4306795597076416, 2.4086837768554688, 2.386894464492798, 2.3653173446655273, 2.3439583778381348, 2.3228232860565186, 2.3019182682037354, 2.28125, 2.260824680328369, 2.2406489849090576, 2.2207298278808594, 2.2010738849639893, 2.1816887855529785, 2.162581205368042, 2.14375901222229, 2.125229835510254, 2.1070010662078857, 2.089080572128296, 2.071476697921753, 2.054197311401367, 2.0372507572174072, 2.0206453800201416, 2.004389762878418, 1.9884922504425049, 1.9729617834091187, 1.957806944847107, 1.943036437034607, 1.9286593198776245, 1.9146841764450073, 1.9011201858520508, 1.8879759311676025, 1.875260353088379, 1.8629822731018066, 1.851150393486023, 1.8397732973098755, 1.8288593292236328, 1.8184170722961426, 1.8084545135498047, 1.7989797592163086, 1.7900004386901855, 1.7815240621566772, 1.7735579013824463, 1.7661088705062866, 1.7591835260391235, 1.7527879476547241, 1.746928095817566, 1.7416093349456787, 1.7368366718292236, 1.732614517211914, 1.7289470434188843, 1.7258377075195312, 1.7232894897460938, 1.7213048934936523, 1.7198859453201294, 1.7190340757369995, 1.75, 1.7502789497375488, 1.7511156797409058, 1.752509355545044, 1.7544585466384888, 1.7569615840911865, 1.7600159645080566, 1.76361882686615, 1.7677669525146484, 1.772456407546997, 1.7776827812194824, 1.7834416627883911, 1.7897276878356934, 1.7965352535247803, 1.803858757019043, 1.8116916418075562, 1.820027470588684, 1.8288593292236328, 1.8381801843643188, 1.847982406616211, 1.858258605003357, 1.869000792503357, 1.8802011013031006, 1.8918513059616089, 1.9039433002471924, 1.9164685010910034, 1.929418683052063, 1.9427851438522339, 1.9565595388412476, 1.9707331657409668, 1.9852975606918335, 2.000244140625, 2.015564441680908, 2.03125, 2.047292470932007, 2.063683271408081, 2.0804145336151123, 2.097477912902832, 2.11486554145813, 2.1325693130493164, 2.1505813598632812, 2.168894052505493, 2.1875, 2.2063915729522705, 2.2255616188049316, 2.2450032234191895, 2.2647087574005127, 2.2846720218658447, 2.3048861026763916, 2.3253443241119385, 2.3460404872894287, 2.3669683933258057, 2.3881216049194336, 2.409494638442993, 2.4310812950134277, 2.452876091003418, 2.4748737812042236, 2.4970686435699463, 2.5194554328918457, 2.542029619216919, 2.5647854804992676, 2.587718963623047, 2.6108248233795166, 2.634098768234253, 2.657536506652832, 2.634098768234253, 2.6108248233795166, 2.587718963623047, 2.5647854804992676, 2.542029619216919, 2.5194554328918457, 2.4970686435699463, 2.4748737812042236, 2.452876091003418, 2.4310812950134277, 2.409494638442993, 2.3881216049194336, 2.3669683933258057, 2.3460404872894287, 2.3253443241119385, 2.3048861026763916, 2.2846720218658447, 2.2647087574005127, 2.2450032234191895, 2.2255616188049316, 2.2063915729522705, 2.1875, 2.168894052505493, 2.1505813598632812, 2.1325693130493164, 2.11486554145813, 2.097477912902832, 2.0804145336151123, 2.063683271408081, 2.047292470932007, 2.03125, 2.015564441680908, 2.000244140625, 1.9852975606918335, 1.9707331657409668, 1.9565595388412476, 1.9427851438522339, 1.929418683052063, 1.9164685010910034, 1.9039433002471924, 1.8918513059616089, 1.8802011013031006, 1.869000792503357, 1.858258605003357, 1.847982406616211, 1.8381801843643188, 1.8288593292236328, 1.820027470588684, 1.8116916418075562, 1.803858757019043, 1.7965352535247803, 1.7897276878356934, 1.7834416627883911, 1.7776827812194824, 1.772456407546997, 1.7677669525146484, 1.76361882686615, 1.7600159645080566, 1.7569615840911865, 1.7544585466384888, 1.752509355545044, 1.7511156797409058, 1.7502789497375488, 1.78125, 1.7815240621566772, 1.7823461294174194, 1.7837153673171997, 1.7856305837631226, 1.7880899906158447, 1.7910912036895752, 1.7946317195892334, 1.7987083196640015, 1.8033173084259033, 1.8084545135498047, 1.8141156435012817, 1.8202956914901733, 1.8269895315170288, 1.8341913223266602, 1.8418952226638794, 1.8500950336456299, 1.8587840795516968, 1.8679555654525757, 1.8776023387908936, 1.8877172470092773, 1.8982927799224854, 1.9093213081359863, 1.92079496383667, 1.9327057600021362, 1.945045828819275, 1.957806944847107, 1.9709808826446533, 1.9845595359802246, 1.9985345602035522, 2.0128979682922363, 2.0276410579681396, 2.0427558422088623, 2.058234214782715, 2.0740678310394287, 2.0902488231658936, 2.106769323348999, 2.1236209869384766, 2.140796184539795, 2.1582870483398438, 2.176086187362671, 2.194186210632324, 2.2125794887542725, 2.2312588691711426, 2.2502169609069824, 2.269447088241577, 2.288942575454712, 2.3086962699890137, 2.3287017345428467, 2.348952531814575, 2.3694424629211426, 2.390165328979492, 2.4111151695251465, 2.432286024093628, 2.453672409057617, 2.4752683639526367, 2.4970686435699463, 2.5190680027008057, 2.5412609577178955, 2.563642978668213, 2.5862088203430176, 2.6089539527893066, 2.631873369216919, 2.6549630165100098, 2.678217887878418, 2.6549630165100098, 2.631873369216919, 2.6089539527893066, 2.5862088203430176, 2.563642978668213, 2.5412609577178955, 2.5190680027008057, 2.4970686435699463, 2.4752683639526367, 2.453672409057617, 2.432286024093628, 2.4111151695251465, 2.390165328979492, 2.3694424629211426, 2.348952531814575, 2.3287017345428467, 2.3086962699890137, 2.288942575454712, 2.269447088241577, 2.2502169609069824, 2.2312588691711426, 2.2125794887542725, 2.194186210632324, 2.176086187362671, 2.1582870483398438, 2.140796184539795, 2.1236209869384766, 2.106769323348999, 2.0902488231658936, 2.0740678310394287, 2.058234214782715, 2.0427558422088623, 2.0276410579681396, 2.0128979682922363, 1.9985345602035522, 1.9845595359802246, 1.9709808826446533, 1.957806944847107, 1.945045828819275, 1.9327057600021362, 1.92079496383667, 1.9093213081359863, 1.8982927799224854, 1.8877172470092773, 1.8776023387908936, 1.8679555654525757, 1.8587840795516968, 1.8500950336456299, 1.8418952226638794, 1.8341913223266602, 1.8269895315170288, 1.8202956914901733, 1.8141156435012817, 1.8084545135498047, 1.8033173084259033, 1.7987083196640015, 1.7946317195892334, 1.7910912036895752, 1.7880899906158447, 1.7856305837631226, 1.7837153673171997, 1.7823461294174194, 1.7815240621566772, 1.8125, 1.8127694129943848, 1.8135772943496704, 1.8149229288101196, 1.8168052434921265, 1.8192224502563477, 1.8221725225448608, 1.8256527185440063, 1.829660177230835, 1.8341913223266602, 1.8392423391342163, 1.8448090553283691, 1.850886583328247, 1.857470154762268, 1.8645542860031128, 1.8721332550048828, 1.8802011013031006, 1.8887516260147095, 1.8977782726287842, 1.9072743654251099, 1.9172327518463135, 1.927646279335022, 1.9385077953338623, 1.9498096704483032, 1.961544394493103, 1.9737040996551514, 1.9862810373306274, 1.9992674589157104, 2.012655258178711, 2.0264365673065186, 2.0406033992767334, 2.055147886276245, 2.0700619220733643, 2.0853376388549805, 2.1009669303894043, 2.1169424057006836, 2.133255958557129, 2.149899959564209, 2.1668670177459717, 2.1841492652893066, 2.2017393112182617, 2.219630002975464, 2.23781418800354, 2.256284713745117, 2.2750344276428223, 2.2940564155578613, 2.3133444786071777, 2.3328914642333984, 2.352691173553467, 2.372737407684326, 2.393023729324341, 2.413544178009033, 2.434292793273926, 2.45526385307312, 2.4764516353607178, 2.4978506565093994, 2.5194554328918457, 2.5412609577178955, 2.5632619857788086, 2.585453510284424, 2.607830762863159, 2.6303887367248535, 2.653123140335083, 2.6760292053222656, 2.6991028785705566, 2.6760292053222656, 2.653123140335083, 2.6303887367248535, 2.607830762863159, 2.585453510284424, 2.5632619857788086, 2.5412609577178955, 2.5194554328918457, 2.4978506565093994, 2.4764516353607178, 2.45526385307312, 2.434292793273926, 2.413544178009033, 2.393023729324341, 2.372737407684326, 2.352691173553467, 2.3328914642333984, 2.3133444786071777, 2.2940564155578613, 2.2750344276428223, 2.256284713745117, 2.23781418800354, 2.219630002975464, 2.2017393112182617, 2.1841492652893066, 2.1668670177459717, 2.149899959564209, 2.133255958557129, 2.1169424057006836, 2.1009669303894043, 2.0853376388549805, 2.0700619220733643, 2.055147886276245, 2.0406033992767334, 2.0264365673065186, 2.012655258178711, 1.9992674589157104, 1.9862810373306274, 1.9737040996551514, 1.961544394493103, 1.9498096704483032, 1.9385077953338623, 1.927646279335022, 1.9172327518463135, 1.9072743654251099, 1.8977782726287842, 1.8887516260147095, 1.8802011013031006, 1.8721332550048828, 1.8645542860031128, 1.857470154762268, 1.850886583328247, 1.8448090553283691, 1.8392423391342163, 1.8341913223266602, 1.829660177230835, 1.8256527185440063, 1.8221725225448608, 1.8192224502563477, 1.8168052434921265, 1.8149229288101196, 1.8135772943496704, 1.8127694129943848, 1.84375, 1.8440147638320923, 1.8448090553283691, 1.8461319208145142, 1.847982406616211, 1.8503589630126953, 1.8532593250274658, 1.8566813468933105, 1.8606219291687012, 1.8650779724121094, 1.87004554271698, 1.8755207061767578, 1.881499171257019, 1.8879759311676025, 1.8949459791183472, 1.9024039506912231, 1.9103440046310425, 1.9187601804733276, 1.927646279335022, 1.9369958639144897, 1.9468022584915161, 1.9570585489273071, 1.9677577018737793, 1.9788925647735596, 1.9904557466506958, 2.0024399757385254, 2.0148375034332275, 2.0276410579681396, 2.0408427715301514, 2.0544350147247314, 2.0684101581573486, 2.0827603340148926, 2.097477912902832, 2.112555503845215, 2.1279850006103516, 2.14375901222229, 2.159870147705078, 2.1763107776641846, 2.193073272705078, 2.2101504802703857, 2.2275354862213135, 2.24522066116333, 2.2631990909576416, 2.281464099884033, 2.300008535385132, 2.3188257217407227, 2.337909460067749, 2.357252836227417, 2.37684965133667, 2.396693706512451, 2.416778802871704, 2.4370992183685303, 2.457648992538452, 2.4784224033355713, 2.4994139671325684, 2.520618200302124, 2.542029619216919, 2.563642978668213, 2.585453510284424, 2.6074562072753906, 2.6296463012695312, 2.6520187854766846, 2.6745691299438477, 2.697293281555176, 2.720186471939087, 2.697293281555176, 2.6745691299438477, 2.6520187854766846, 2.6296463012695312, 2.6074562072753906, 2.585453510284424, 2.563642978668213, 2.542029619216919, 2.520618200302124, 2.4994139671325684, 2.4784224033355713, 2.457648992538452, 2.4370992183685303, 2.416778802871704, 2.396693706512451, 2.37684965133667, 2.357252836227417, 2.337909460067749, 2.3188257217407227, 2.300008535385132, 2.281464099884033, 2.2631990909576416, 2.24522066116333, 2.2275354862213135, 2.2101504802703857, 2.193073272705078, 2.1763107776641846, 2.159870147705078, 2.14375901222229, 2.1279850006103516, 2.112555503845215, 2.097477912902832, 2.0827603340148926, 2.0684101581573486, 2.0544350147247314, 2.0408427715301514, 2.0276410579681396, 2.0148375034332275, 2.0024399757385254, 1.9904557466506958, 1.9788925647735596, 1.9677577018737793, 1.9570585489273071, 1.9468022584915161, 1.9369958639144897, 1.927646279335022, 1.9187601804733276, 1.9103440046310425, 1.9024039506912231, 1.8949459791183472, 1.8879759311676025, 1.881499171257019, 1.8755207061767578, 1.87004554271698, 1.8650779724121094, 1.8606219291687012, 1.8566813468933105, 1.8532593250274658, 1.8503589630126953, 1.847982406616211, 1.8461319208145142, 1.8448090553283691, 1.8440147638320923, 1.875, 1.875260353088379, 1.8760414123535156, 1.8773423433303833, 1.879162073135376, 1.881499171257019, 1.8843517303466797, 1.8877172470092773, 1.8915932178497314, 1.8959764242172241, 1.9008632898330688, 1.90625, 1.9121322631835938, 1.9185056686401367, 1.9253652095794678, 1.9327057600021362, 1.9405218362808228, 1.948807716369629, 1.9575574398040771, 1.9667649269104004, 1.9764235019683838, 1.9865268468856812, 1.997068166732788, 2.008040428161621, 2.019436836242676, 2.03125, 2.0434727668762207, 2.056097984313965, 2.0691182613372803, 2.0825259685516357, 2.096313714981079, 2.1104743480682373, 2.125, 2.139883518218994, 2.1551175117492676, 2.170694351196289, 2.1866068840026855, 2.202847957611084, 2.2194101810455322, 2.2362864017486572, 2.253469467163086, 2.2709527015686035, 2.288729190826416, 2.3067920207977295, 2.325134515762329, 2.34375, 2.3626322746276855, 2.38177490234375, 2.4011716842651367, 2.42081618309021, 2.4407029151916504, 2.4608259201049805, 2.4811792373657227, 2.5017571449279785, 2.522554397583008, 2.5435657501220703, 2.5647854804992676, 2.5862088203430176, 2.607830762863159, 2.6296463012695312, 2.6516504287719727, 2.6738388538360596, 2.69620680809021, 2.71875, 2.741464138031006, 2.71875, 2.69620680809021, 2.6738388538360596, 2.6516504287719727, 2.6296463012695312, 2.607830762863159, 2.5862088203430176, 2.5647854804992676, 2.5435657501220703, 2.522554397583008, 2.5017571449279785, 2.4811792373657227, 2.4608259201049805, 2.4407029151916504, 2.42081618309021, 2.4011716842651367, 2.38177490234375, 2.3626322746276855, 2.34375, 2.325134515762329, 2.3067920207977295, 2.288729190826416, 2.2709527015686035, 2.253469467163086, 2.2362864017486572, 2.2194101810455322, 2.202847957611084, 2.1866068840026855, 2.170694351196289, 2.1551175117492676, 2.139883518218994, 2.125, 2.1104743480682373, 2.096313714981079, 2.0825259685516357, 2.0691182613372803, 2.056097984313965, 2.0434727668762207, 2.03125, 2.019436836242676, 2.008040428161621, 1.997068166732788, 1.9865268468856812, 1.9764235019683838, 1.9667649269104004, 1.9575574398040771, 1.948807716369629, 1.9405218362808228, 1.9327057600021362, 1.9253652095794678, 1.9185056686401367, 1.9121322631835938, 1.90625, 1.9008632898330688, 1.8959764242172241, 1.8915932178497314, 1.8877172470092773, 1.8843517303466797, 1.881499171257019, 1.879162073135376, 1.8773423433303833, 1.8760414123535156, 1.875260353088379, 1.90625, 1.9065061807632446, 1.9072743654251099, 1.908553957939148, 1.9103440046310425, 1.9126429557800293, 1.9154491424560547, 1.9187601804733276, 1.9225735664367676, 1.9268862009048462, 1.9316949844360352, 1.9369958639144897, 1.9427851438522339, 1.9490582942962646, 1.9558106660842896, 1.963037371635437, 1.9707331657409668, 1.9788925647735596, 1.987509846687317, 1.9965790510177612, 2.006094217300415, 2.0160489082336426, 2.0264365673065186, 2.0372507572174072, 2.0484845638275146, 2.060131311416626, 2.072183609008789, 2.084635019302368, 2.097477912902832, 2.110705614089966, 2.1243104934692383, 2.1382856369018555, 2.1526236534118652, 2.1673176288604736, 2.1823599338531494, 2.1977438926696777, 2.2134621143341064, 2.2295074462890625, 2.245872974395752, 2.262551784515381, 2.2795369625091553, 2.2968218326568604, 2.314399480819702, 2.332263469696045, 2.350407123565674, 2.3688242435455322, 2.3875081539154053, 2.4064528942108154, 2.425652265548706, 2.4451003074645996, 2.4647910594940186, 2.4847190380096436, 2.504878044128418, 2.5252630710601807, 2.545868396759033, 2.5666885375976562, 2.587718963623047, 2.6089539527893066, 2.6303887367248535, 2.6520187854766846, 2.6738388538360596, 2.6958446502685547, 2.718031406402588, 2.7403950691223145, 2.7629313468933105, 2.7403950691223145, 2.718031406402588, 2.6958446502685547, 2.6738388538360596, 2.6520187854766846, 2.6303887367248535, 2.6089539527893066, 2.587718963623047, 2.5666885375976562, 2.545868396759033, 2.5252630710601807, 2.504878044128418, 2.4847190380096436, 2.4647910594940186, 2.4451003074645996, 2.425652265548706, 2.4064528942108154, 2.3875081539154053, 2.3688242435455322, 2.350407123565674, 2.332263469696045, 2.314399480819702, 2.2968218326568604, 2.2795369625091553, 2.262551784515381, 2.245872974395752, 2.2295074462890625, 2.2134621143341064, 2.1977438926696777, 2.1823599338531494, 2.1673176288604736, 2.1526236534118652, 2.1382856369018555, 2.1243104934692383, 2.110705614089966, 2.097477912902832, 2.084635019302368, 2.072183609008789, 2.060131311416626, 2.0484845638275146, 2.0372507572174072, 2.0264365673065186, 2.0160489082336426, 2.006094217300415, 1.9965790510177612, 1.987509846687317, 1.9788925647735596, 1.9707331657409668, 1.963037371635437, 1.9558106660842896, 1.9490582942962646, 1.9427851438522339, 1.9369958639144897, 1.9316949844360352, 1.9268862009048462, 1.9225735664367676, 1.9187601804733276, 1.9154491424560547, 1.9126429557800293, 1.9103440046310425, 1.908553957939148, 1.9072743654251099, 1.9065061807632446, 1.9375, 1.9377520084381104, 1.9385077953338623, 1.939766764640808, 1.941528081893921, 1.9437901973724365, 1.9465514421463013, 1.9498096704483032, 1.9535624980926514, 1.957806944847107, 1.962539792060852, 1.9677577018737793, 1.973456621170044, 1.9796326160430908, 1.9862810373306274, 1.9933973550796509, 2.000976324081421, 2.0090129375457764, 2.0175015926361084, 2.0264365673065186, 2.0358121395111084, 2.0456223487854004, 2.0558605194091797, 2.0665206909179688, 2.0775961875915527, 2.089080572128296, 2.1009669303894043, 2.113248825073242, 2.1259188652038574, 2.1389706134796143, 2.1523969173431396, 2.1661908626556396, 2.1803455352783203, 2.1948537826538086, 2.2097086906433105, 2.2249033451080322, 2.240431070327759, 2.256284713745117, 2.2724573612213135, 2.288942575454712, 2.3057334423065186, 2.3228232860565186, 2.340205669403076, 2.3578741550445557, 2.3758223056793213, 2.3940436840057373, 2.412532329559326, 2.4312820434570312, 2.450286865234375, 2.469541072845459, 2.4890384674072266, 2.5087735652923584, 2.5287411212921143, 2.5489351749420166, 2.569350481033325, 2.589982271194458, 2.6108248233795166, 2.631873369216919, 2.653123140335083, 2.6745691299438477, 2.69620680809021, 2.718031406402588, 2.7400388717651367, 2.7622241973876953, 2.784583568572998, 2.7622241973876953, 2.7400388717651367, 2.718031406402588, 2.69620680809021, 2.6745691299438477, 2.653123140335083, 2.631873369216919, 2.6108248233795166, 2.589982271194458, 2.569350481033325, 2.5489351749420166, 2.5287411212921143, 2.5087735652923584, 2.4890384674072266, 2.469541072845459, 2.450286865234375, 2.4312820434570312, 2.412532329559326, 2.3940436840057373, 2.3758223056793213, 2.3578741550445557, 2.340205669403076, 2.3228232860565186, 2.3057334423065186, 2.288942575454712, 2.2724573612213135, 2.256284713745117, 2.240431070327759, 2.2249033451080322, 2.2097086906433105, 2.1948537826538086, 2.1803455352783203, 2.1661908626556396, 2.1523969173431396, 2.1389706134796143, 2.1259188652038574, 2.113248825073242, 2.1009669303894043, 2.089080572128296, 2.0775961875915527, 2.0665206909179688, 2.0558605194091797, 2.0456223487854004, 2.0358121395111084, 2.0264365673065186, 2.0175015926361084, 2.0090129375457764, 2.000976324081421, 1.9933973550796509, 1.9862810373306274, 1.9796326160430908, 1.973456621170044, 1.9677577018737793, 1.962539792060852, 1.957806944847107, 1.9535624980926514, 1.9498096704483032, 1.9465514421463013, 1.9437901973724365, 1.941528081893921, 1.939766764640808, 1.9385077953338623, 1.9377520084381104, 1.96875, 1.9689979553222656, 1.9697418212890625, 1.9709808826446533, 1.9727143049240112, 1.9749406576156616, 1.9776583909988403, 1.980865478515625, 1.9845595359802246, 1.9887378215789795, 1.9933973550796509, 1.9985345602035522, 2.004146099090576, 2.010227680206299, 2.016775369644165, 2.0237843990325928, 2.03125, 2.0391671657562256, 2.0475308895111084, 2.05633544921875, 2.065575361251831, 2.075244665145874, 2.0853376388549805, 2.0958478450775146, 2.106769323348999, 2.1180953979492188, 2.129819869995117, 2.1419363021850586, 2.15443754196167, 2.1673176288604736, 2.1805694103240967, 2.194186210632324, 2.2081613540649414, 2.2224881649017334, 2.237159490585327, 2.252169132232666, 2.267509937286377, 2.283175468444824, 2.299159049987793, 2.3154542446136475, 2.3320541381835938, 2.348952531814575, 2.366142988204956, 2.3836193084716797, 2.4013748168945312, 2.4194040298461914, 2.4377002716064453, 2.4562580585479736, 2.4750709533691406, 2.494133710861206, 2.5134403705596924, 2.5329854488372803, 2.5527634620666504, 2.5727691650390625, 2.592996835708618, 2.6134417057037354, 2.634098768234253, 2.6549630165100098, 2.6760292053222656, 2.697293281555176, 2.71875, 2.7403950691223145, 2.7622241973876953, 2.7842328548431396, 2.8064169883728027, 2.7842328548431396, 2.7622241973876953, 2.7403950691223145, 2.71875, 2.697293281555176, 2.6760292053222656, 2.6549630165100098, 2.634098768234253, 2.6134417057037354, 2.592996835708618, 2.5727691650390625, 2.5527634620666504, 2.5329854488372803, 2.5134403705596924, 2.494133710861206, 2.4750709533691406, 2.4562580585479736, 2.4377002716064453, 2.4194040298461914, 2.4013748168945312, 2.3836193084716797, 2.366142988204956, 2.348952531814575, 2.3320541381835938, 2.3154542446136475, 2.299159049987793, 2.283175468444824, 2.267509937286377, 2.252169132232666, 2.237159490585327, 2.2224881649017334, 2.2081613540649414, 2.194186210632324, 2.1805694103240967, 2.1673176288604736, 2.15443754196167, 2.1419363021850586, 2.129819869995117, 2.1180953979492188, 2.106769323348999, 2.0958478450775146, 2.0853376388549805, 2.075244665145874, 2.065575361251831, 2.05633544921875, 2.0475308895111084, 2.0391671657562256, 2.03125, 2.0237843990325928, 2.016775369644165, 2.010227680206299, 2.004146099090576, 1.9985345602035522, 1.9933973550796509, 1.9887378215789795, 1.9845595359802246, 1.980865478515625, 1.9776583909988403, 1.9749406576156616, 1.9727143049240112, 1.9709808826446533, 1.9697418212890625, 1.9689979553222656, 2.0, 2.000244140625, 2.000976324081421, 2.0021960735321045, 2.0039024353027344, 2.006094217300415, 2.0087697505950928, 2.011927366256714, 2.015564441680908, 2.0196785926818848, 2.0242669582366943, 2.0293259620666504, 2.0348525047302246, 2.0408427715301514, 2.047292470932007, 2.054197311401367, 2.0615527629852295, 2.0693540573120117, 2.0775961875915527, 2.0862739086151123, 2.095381736755371, 2.1049141883850098, 2.11486554145813, 2.125229835510254, 2.136000871658325, 2.1471729278564453, 2.1587395668029785, 2.170694351196289, 2.1830310821533203, 2.1957433223724365, 2.208824634552002, 2.2222683429718018, 2.2360680103302, 2.2502169609069824, 2.2647087574005127, 2.2795369625091553, 2.2946949005126953, 2.310176134109497, 2.325974225997925, 2.3420827388763428, 2.3584952354431152, 2.3752055168151855, 2.392207384109497, 2.409494638442993, 2.427061080932617, 2.4449005126953125, 2.4630074501037598, 2.4813759326934814, 2.5, 2.518874168395996, 2.537992477416992, 2.557349920272827, 2.5769410133361816, 2.5967602729797363, 2.61680269241333, 2.6370630264282227, 2.657536506652832, 2.678217887878418, 2.6991028785705566, 2.720186471939087, 2.741464138031006, 2.7629313468933105, 2.784583568572998, 2.8064169883728027, 2.8284270763397217, 2.8064169883728027, 2.784583568572998, 2.7629313468933105, 2.741464138031006, 2.720186471939087, 2.6991028785705566, 2.678217887878418, 2.657536506652832, 2.6370630264282227, 2.61680269241333, 2.5967602729797363, 2.5769410133361816, 2.557349920272827, 2.537992477416992, 2.518874168395996, 2.5, 2.4813759326934814, 2.4630074501037598, 2.4449005126953125, 2.427061080932617, 2.409494638442993, 2.392207384109497, 2.3752055168151855, 2.3584952354431152, 2.3420827388763428, 2.325974225997925, 2.310176134109497, 2.2946949005126953, 2.2795369625091553, 2.2647087574005127, 2.2502169609069824, 2.2360680103302, 2.2222683429718018, 2.208824634552002, 2.1957433223724365, 2.1830310821533203, 2.170694351196289, 2.1587395668029785, 2.1471729278564453, 2.136000871658325, 2.125229835510254, 2.11486554145813, 2.1049141883850098, 2.095381736755371, 2.0862739086151123, 2.0775961875915527, 2.0693540573120117, 2.0615527629852295, 2.054197311401367, 2.047292470932007, 2.0408427715301514, 2.0348525047302246, 2.0293259620666504, 2.0242669582366943, 2.0196785926818848, 2.015564441680908, 2.011927366256714, 2.0087697505950928, 2.006094217300415, 2.0039024353027344, 2.0021960735321045, 2.000976324081421, 2.000244140625, 1.96875, 1.9689979553222656, 1.9697418212890625, 1.9709808826446533, 1.9727143049240112, 1.9749406576156616, 1.9776583909988403, 1.980865478515625, 1.9845595359802246, 1.9887378215789795, 1.9933973550796509, 1.9985345602035522, 2.004146099090576, 2.010227680206299, 2.016775369644165, 2.0237843990325928, 2.03125, 2.0391671657562256, 2.0475308895111084, 2.05633544921875, 2.065575361251831, 2.075244665145874, 2.0853376388549805, 2.0958478450775146, 2.106769323348999, 2.1180953979492188, 2.129819869995117, 2.1419363021850586, 2.15443754196167, 2.1673176288604736, 2.1805694103240967, 2.194186210632324, 2.2081613540649414, 2.2224881649017334, 2.237159490585327, 2.252169132232666, 2.267509937286377, 2.283175468444824, 2.299159049987793, 2.3154542446136475, 2.3320541381835938, 2.348952531814575, 2.366142988204956, 2.3836193084716797, 2.4013748168945312, 2.4194040298461914, 2.4377002716064453, 2.4562580585479736, 2.4750709533691406, 2.494133710861206, 2.5134403705596924, 2.5329854488372803, 2.5527634620666504, 2.5727691650390625, 2.592996835708618, 2.6134417057037354, 2.634098768234253, 2.6549630165100098, 2.6760292053222656, 2.697293281555176, 2.71875, 2.7403950691223145, 2.7622241973876953, 2.7842328548431396, 2.8064169883728027, 2.7842328548431396, 2.7622241973876953, 2.7403950691223145, 2.71875, 2.697293281555176, 2.6760292053222656, 2.6549630165100098, 2.634098768234253, 2.6134417057037354, 2.592996835708618, 2.5727691650390625, 2.5527634620666504, 2.5329854488372803, 2.5134403705596924, 2.494133710861206, 2.4750709533691406, 2.4562580585479736, 2.4377002716064453, 2.4194040298461914, 2.4013748168945312, 2.3836193084716797, 2.366142988204956, 2.348952531814575, 2.3320541381835938, 2.3154542446136475, 2.299159049987793, 2.283175468444824, 2.267509937286377, 2.252169132232666, 2.237159490585327, 2.2224881649017334, 2.2081613540649414, 2.194186210632324, 2.1805694103240967, 2.1673176288604736, 2.15443754196167, 2.1419363021850586, 2.129819869995117, 2.1180953979492188, 2.106769323348999, 2.0958478450775146, 2.0853376388549805, 2.075244665145874, 2.065575361251831, 2.05633544921875, 2.0475308895111084, 2.0391671657562256, 2.03125, 2.0237843990325928, 2.016775369644165, 2.010227680206299, 2.004146099090576, 1.9985345602035522, 1.9933973550796509, 1.9887378215789795, 1.9845595359802246, 1.980865478515625, 1.9776583909988403, 1.9749406576156616, 1.9727143049240112, 1.9709808826446533, 1.9697418212890625, 1.9689979553222656, 1.9375, 1.9377520084381104, 1.9385077953338623, 1.939766764640808, 1.941528081893921, 1.9437901973724365, 1.9465514421463013, 1.9498096704483032, 1.9535624980926514, 1.957806944847107, 1.962539792060852, 1.9677577018737793, 1.973456621170044, 1.9796326160430908, 1.9862810373306274, 1.9933973550796509, 2.000976324081421, 2.0090129375457764, 2.0175015926361084, 2.0264365673065186, 2.0358121395111084, 2.0456223487854004, 2.0558605194091797, 2.0665206909179688, 2.0775961875915527, 2.089080572128296, 2.1009669303894043, 2.113248825073242, 2.1259188652038574, 2.1389706134796143, 2.1523969173431396, 2.1661908626556396, 2.1803455352783203, 2.1948537826538086, 2.2097086906433105, 2.2249033451080322, 2.240431070327759, 2.256284713745117, 2.2724573612213135, 2.288942575454712, 2.3057334423065186, 2.3228232860565186, 2.340205669403076, 2.3578741550445557, 2.3758223056793213, 2.3940436840057373, 2.412532329559326, 2.4312820434570312, 2.450286865234375, 2.469541072845459, 2.4890384674072266, 2.5087735652923584, 2.5287411212921143, 2.5489351749420166, 2.569350481033325, 2.589982271194458, 2.6108248233795166, 2.631873369216919, 2.653123140335083, 2.6745691299438477, 2.69620680809021, 2.718031406402588, 2.7400388717651367, 2.7622241973876953, 2.784583568572998, 2.7622241973876953, 2.7400388717651367, 2.718031406402588, 2.69620680809021, 2.6745691299438477, 2.653123140335083, 2.631873369216919, 2.6108248233795166, 2.589982271194458, 2.569350481033325, 2.5489351749420166, 2.5287411212921143, 2.5087735652923584, 2.4890384674072266, 2.469541072845459, 2.450286865234375, 2.4312820434570312, 2.412532329559326, 2.3940436840057373, 2.3758223056793213, 2.3578741550445557, 2.340205669403076, 2.3228232860565186, 2.3057334423065186, 2.288942575454712, 2.2724573612213135, 2.256284713745117, 2.240431070327759, 2.2249033451080322, 2.2097086906433105, 2.1948537826538086, 2.1803455352783203, 2.1661908626556396, 2.1523969173431396, 2.1389706134796143, 2.1259188652038574, 2.113248825073242, 2.1009669303894043, 2.089080572128296, 2.0775961875915527, 2.0665206909179688, 2.0558605194091797, 2.0456223487854004, 2.0358121395111084, 2.0264365673065186, 2.0175015926361084, 2.0090129375457764, 2.000976324081421, 1.9933973550796509, 1.9862810373306274, 1.9796326160430908, 1.973456621170044, 1.9677577018737793, 1.962539792060852, 1.957806944847107, 1.9535624980926514, 1.9498096704483032, 1.9465514421463013, 1.9437901973724365, 1.941528081893921, 1.939766764640808, 1.9385077953338623, 1.9377520084381104, 1.90625, 1.9065061807632446, 1.9072743654251099, 1.908553957939148, 1.9103440046310425, 1.9126429557800293, 1.9154491424560547, 1.9187601804733276, 1.9225735664367676, 1.9268862009048462, 1.9316949844360352, 1.9369958639144897, 1.9427851438522339, 1.9490582942962646, 1.9558106660842896, 1.963037371635437, 1.9707331657409668, 1.9788925647735596, 1.987509846687317, 1.9965790510177612, 2.006094217300415, 2.0160489082336426, 2.0264365673065186, 2.0372507572174072, 2.0484845638275146, 2.060131311416626, 2.072183609008789, 2.084635019302368, 2.097477912902832, 2.110705614089966, 2.1243104934692383, 2.1382856369018555, 2.1526236534118652, 2.1673176288604736, 2.1823599338531494, 2.1977438926696777, 2.2134621143341064, 2.2295074462890625, 2.245872974395752, 2.262551784515381, 2.2795369625091553, 2.2968218326568604, 2.314399480819702, 2.332263469696045, 2.350407123565674, 2.3688242435455322, 2.3875081539154053, 2.4064528942108154, 2.425652265548706, 2.4451003074645996, 2.4647910594940186, 2.4847190380096436, 2.504878044128418, 2.5252630710601807, 2.545868396759033, 2.5666885375976562, 2.587718963623047, 2.6089539527893066, 2.6303887367248535, 2.6520187854766846, 2.6738388538360596, 2.6958446502685547, 2.718031406402588, 2.7403950691223145, 2.7629313468933105, 2.7403950691223145, 2.718031406402588, 2.6958446502685547, 2.6738388538360596, 2.6520187854766846, 2.6303887367248535, 2.6089539527893066, 2.587718963623047, 2.5666885375976562, 2.545868396759033, 2.5252630710601807, 2.504878044128418, 2.4847190380096436, 2.4647910594940186, 2.4451003074645996, 2.425652265548706, 2.4064528942108154, 2.3875081539154053, 2.3688242435455322, 2.350407123565674, 2.332263469696045, 2.314399480819702, 2.2968218326568604, 2.2795369625091553, 2.262551784515381, 2.245872974395752, 2.2295074462890625, 2.2134621143341064, 2.1977438926696777, 2.1823599338531494, 2.1673176288604736, 2.1526236534118652, 2.1382856369018555, 2.1243104934692383, 2.110705614089966, 2.097477912902832, 2.084635019302368, 2.072183609008789, 2.060131311416626, 2.0484845638275146, 2.0372507572174072, 2.0264365673065186, 2.0160489082336426, 2.006094217300415, 1.9965790510177612, 1.987509846687317, 1.9788925647735596, 1.9707331657409668, 1.963037371635437, 1.9558106660842896, 1.9490582942962646, 1.9427851438522339, 1.9369958639144897, 1.9316949844360352, 1.9268862009048462, 1.9225735664367676, 1.9187601804733276, 1.9154491424560547, 1.9126429557800293, 1.9103440046310425, 1.908553957939148, 1.9072743654251099, 1.9065061807632446, 1.875, 1.875260353088379, 1.8760414123535156, 1.8773423433303833, 1.879162073135376, 1.881499171257019, 1.8843517303466797, 1.8877172470092773, 1.8915932178497314, 1.8959764242172241, 1.9008632898330688, 1.90625, 1.9121322631835938, 1.9185056686401367, 1.9253652095794678, 1.9327057600021362, 1.9405218362808228, 1.948807716369629, 1.9575574398040771, 1.9667649269104004, 1.9764235019683838, 1.9865268468856812, 1.997068166732788, 2.008040428161621, 2.019436836242676, 2.03125, 2.0434727668762207, 2.056097984313965, 2.0691182613372803, 2.0825259685516357, 2.096313714981079, 2.1104743480682373, 2.125, 2.139883518218994, 2.1551175117492676, 2.170694351196289, 2.1866068840026855, 2.202847957611084, 2.2194101810455322, 2.2362864017486572, 2.253469467163086, 2.2709527015686035, 2.288729190826416, 2.3067920207977295, 2.325134515762329, 2.34375, 2.3626322746276855, 2.38177490234375, 2.4011716842651367, 2.42081618309021, 2.4407029151916504, 2.4608259201049805, 2.4811792373657227, 2.5017571449279785, 2.522554397583008, 2.5435657501220703, 2.5647854804992676, 2.5862088203430176, 2.607830762863159, 2.6296463012695312, 2.6516504287719727, 2.6738388538360596, 2.69620680809021, 2.71875, 2.741464138031006, 2.71875, 2.69620680809021, 2.6738388538360596, 2.6516504287719727, 2.6296463012695312, 2.607830762863159, 2.5862088203430176, 2.5647854804992676, 2.5435657501220703, 2.522554397583008, 2.5017571449279785, 2.4811792373657227, 2.4608259201049805, 2.4407029151916504, 2.42081618309021, 2.4011716842651367, 2.38177490234375, 2.3626322746276855, 2.34375, 2.325134515762329, 2.3067920207977295, 2.288729190826416, 2.2709527015686035, 2.253469467163086, 2.2362864017486572, 2.2194101810455322, 2.202847957611084, 2.1866068840026855, 2.170694351196289, 2.1551175117492676, 2.139883518218994, 2.125, 2.1104743480682373, 2.096313714981079, 2.0825259685516357, 2.0691182613372803, 2.056097984313965, 2.0434727668762207, 2.03125, 2.019436836242676, 2.008040428161621, 1.997068166732788, 1.9865268468856812, 1.9764235019683838, 1.9667649269104004, 1.9575574398040771, 1.948807716369629, 1.9405218362808228, 1.9327057600021362, 1.9253652095794678, 1.9185056686401367, 1.9121322631835938, 1.90625, 1.9008632898330688, 1.8959764242172241, 1.8915932178497314, 1.8877172470092773, 1.8843517303466797, 1.881499171257019, 1.879162073135376, 1.8773423433303833, 1.8760414123535156, 1.875260353088379, 1.84375, 1.8440147638320923, 1.8448090553283691, 1.8461319208145142, 1.847982406616211, 1.8503589630126953, 1.8532593250274658, 1.8566813468933105, 1.8606219291687012, 1.8650779724121094, 1.87004554271698, 1.8755207061767578, 1.881499171257019, 1.8879759311676025, 1.8949459791183472, 1.9024039506912231, 1.9103440046310425, 1.9187601804733276, 1.927646279335022, 1.9369958639144897, 1.9468022584915161, 1.9570585489273071, 1.9677577018737793, 1.9788925647735596, 1.9904557466506958, 2.0024399757385254, 2.0148375034332275, 2.0276410579681396, 2.0408427715301514, 2.0544350147247314, 2.0684101581573486, 2.0827603340148926, 2.097477912902832, 2.112555503845215, 2.1279850006103516, 2.14375901222229, 2.159870147705078, 2.1763107776641846, 2.193073272705078, 2.2101504802703857, 2.2275354862213135, 2.24522066116333, 2.2631990909576416, 2.281464099884033, 2.300008535385132, 2.3188257217407227, 2.337909460067749, 2.357252836227417, 2.37684965133667, 2.396693706512451, 2.416778802871704, 2.4370992183685303, 2.457648992538452, 2.4784224033355713, 2.4994139671325684, 2.520618200302124, 2.542029619216919, 2.563642978668213, 2.585453510284424, 2.6074562072753906, 2.6296463012695312, 2.6520187854766846, 2.6745691299438477, 2.697293281555176, 2.720186471939087, 2.697293281555176, 2.6745691299438477, 2.6520187854766846, 2.6296463012695312, 2.6074562072753906, 2.585453510284424, 2.563642978668213, 2.542029619216919, 2.520618200302124, 2.4994139671325684, 2.4784224033355713, 2.457648992538452, 2.4370992183685303, 2.416778802871704, 2.396693706512451, 2.37684965133667, 2.357252836227417, 2.337909460067749, 2.3188257217407227, 2.300008535385132, 2.281464099884033, 2.2631990909576416, 2.24522066116333, 2.2275354862213135, 2.2101504802703857, 2.193073272705078, 2.1763107776641846, 2.159870147705078, 2.14375901222229, 2.1279850006103516, 2.112555503845215, 2.097477912902832, 2.0827603340148926, 2.0684101581573486, 2.0544350147247314, 2.0408427715301514, 2.0276410579681396, 2.0148375034332275, 2.0024399757385254, 1.9904557466506958, 1.9788925647735596, 1.9677577018737793, 1.9570585489273071, 1.9468022584915161, 1.9369958639144897, 1.927646279335022, 1.9187601804733276, 1.9103440046310425, 1.9024039506912231, 1.8949459791183472, 1.8879759311676025, 1.881499171257019, 1.8755207061767578, 1.87004554271698, 1.8650779724121094, 1.8606219291687012, 1.8566813468933105, 1.8532593250274658, 1.8503589630126953, 1.847982406616211, 1.8461319208145142, 1.8448090553283691, 1.8440147638320923, 1.8125, 1.8127694129943848, 1.8135772943496704, 1.8149229288101196, 1.8168052434921265, 1.8192224502563477, 1.8221725225448608, 1.8256527185440063, 1.829660177230835, 1.8341913223266602, 1.8392423391342163, 1.8448090553283691, 1.850886583328247, 1.857470154762268, 1.8645542860031128, 1.8721332550048828, 1.8802011013031006, 1.8887516260147095, 1.8977782726287842, 1.9072743654251099, 1.9172327518463135, 1.927646279335022, 1.9385077953338623, 1.9498096704483032, 1.961544394493103, 1.9737040996551514, 1.9862810373306274, 1.9992674589157104, 2.012655258178711, 2.0264365673065186, 2.0406033992767334, 2.055147886276245, 2.0700619220733643, 2.0853376388549805, 2.1009669303894043, 2.1169424057006836, 2.133255958557129, 2.149899959564209, 2.1668670177459717, 2.1841492652893066, 2.2017393112182617, 2.219630002975464, 2.23781418800354, 2.256284713745117, 2.2750344276428223, 2.2940564155578613, 2.3133444786071777, 2.3328914642333984, 2.352691173553467, 2.372737407684326, 2.393023729324341, 2.413544178009033, 2.434292793273926, 2.45526385307312, 2.4764516353607178, 2.4978506565093994, 2.5194554328918457, 2.5412609577178955, 2.5632619857788086, 2.585453510284424, 2.607830762863159, 2.6303887367248535, 2.653123140335083, 2.6760292053222656, 2.6991028785705566, 2.6760292053222656, 2.653123140335083, 2.6303887367248535, 2.607830762863159, 2.585453510284424, 2.5632619857788086, 2.5412609577178955, 2.5194554328918457, 2.4978506565093994, 2.4764516353607178, 2.45526385307312, 2.434292793273926, 2.413544178009033, 2.393023729324341, 2.372737407684326, 2.352691173553467, 2.3328914642333984, 2.3133444786071777, 2.2940564155578613, 2.2750344276428223, 2.256284713745117, 2.23781418800354, 2.219630002975464, 2.2017393112182617, 2.1841492652893066, 2.1668670177459717, 2.149899959564209, 2.133255958557129, 2.1169424057006836, 2.1009669303894043, 2.0853376388549805, 2.0700619220733643, 2.055147886276245, 2.0406033992767334, 2.0264365673065186, 2.012655258178711, 1.9992674589157104, 1.9862810373306274, 1.9737040996551514, 1.961544394493103, 1.9498096704483032, 1.9385077953338623, 1.927646279335022, 1.9172327518463135, 1.9072743654251099, 1.8977782726287842, 1.8887516260147095, 1.8802011013031006, 1.8721332550048828, 1.8645542860031128, 1.857470154762268, 1.850886583328247, 1.8448090553283691, 1.8392423391342163, 1.8341913223266602, 1.829660177230835, 1.8256527185440063, 1.8221725225448608, 1.8192224502563477, 1.8168052434921265, 1.8149229288101196, 1.8135772943496704, 1.8127694129943848, 1.78125, 1.7815240621566772, 1.7823461294174194, 1.7837153673171997, 1.7856305837631226, 1.7880899906158447, 1.7910912036895752, 1.7946317195892334, 1.7987083196640015, 1.8033173084259033, 1.8084545135498047, 1.8141156435012817, 1.8202956914901733, 1.8269895315170288, 1.8341913223266602, 1.8418952226638794, 1.8500950336456299, 1.8587840795516968, 1.8679555654525757, 1.8776023387908936, 1.8877172470092773, 1.8982927799224854, 1.9093213081359863, 1.92079496383667, 1.9327057600021362, 1.945045828819275, 1.957806944847107, 1.9709808826446533, 1.9845595359802246, 1.9985345602035522, 2.0128979682922363, 2.0276410579681396, 2.0427558422088623, 2.058234214782715, 2.0740678310394287, 2.0902488231658936, 2.106769323348999, 2.1236209869384766, 2.140796184539795, 2.1582870483398438, 2.176086187362671, 2.194186210632324, 2.2125794887542725, 2.2312588691711426, 2.2502169609069824, 2.269447088241577, 2.288942575454712, 2.3086962699890137, 2.3287017345428467, 2.348952531814575, 2.3694424629211426, 2.390165328979492, 2.4111151695251465, 2.432286024093628, 2.453672409057617, 2.4752683639526367, 2.4970686435699463, 2.5190680027008057, 2.5412609577178955, 2.563642978668213, 2.5862088203430176, 2.6089539527893066, 2.631873369216919, 2.6549630165100098, 2.678217887878418, 2.6549630165100098, 2.631873369216919, 2.6089539527893066, 2.5862088203430176, 2.563642978668213, 2.5412609577178955, 2.5190680027008057, 2.4970686435699463, 2.4752683639526367, 2.453672409057617, 2.432286024093628, 2.4111151695251465, 2.390165328979492, 2.3694424629211426, 2.348952531814575, 2.3287017345428467, 2.3086962699890137, 2.288942575454712, 2.269447088241577, 2.2502169609069824, 2.2312588691711426, 2.2125794887542725, 2.194186210632324, 2.176086187362671, 2.1582870483398438, 2.140796184539795, 2.1236209869384766, 2.106769323348999, 2.0902488231658936, 2.0740678310394287, 2.058234214782715, 2.0427558422088623, 2.0276410579681396, 2.0128979682922363, 1.9985345602035522, 1.9845595359802246, 1.9709808826446533, 1.957806944847107, 1.945045828819275, 1.9327057600021362, 1.92079496383667, 1.9093213081359863, 1.8982927799224854, 1.8877172470092773, 1.8776023387908936, 1.8679555654525757, 1.8587840795516968, 1.8500950336456299, 1.8418952226638794, 1.8341913223266602, 1.8269895315170288, 1.8202956914901733, 1.8141156435012817, 1.8084545135498047, 1.8033173084259033, 1.7987083196640015, 1.7946317195892334, 1.7910912036895752, 1.7880899906158447, 1.7856305837631226, 1.7837153673171997, 1.7823461294174194, 1.7815240621566772, 1.75, 1.7502789497375488, 1.7511156797409058, 1.752509355545044, 1.7544585466384888, 1.7569615840911865, 1.7600159645080566, 1.76361882686615, 1.7677669525146484, 1.772456407546997, 1.7776827812194824, 1.7834416627883911, 1.7897276878356934, 1.7965352535247803, 1.803858757019043, 1.8116916418075562, 1.820027470588684, 1.8288593292236328, 1.8381801843643188, 1.847982406616211, 1.858258605003357, 1.869000792503357, 1.8802011013031006, 1.8918513059616089, 1.9039433002471924, 1.9164685010910034, 1.929418683052063, 1.9427851438522339, 1.9565595388412476, 1.9707331657409668, 1.9852975606918335, 2.000244140625, 2.015564441680908, 2.03125, 2.047292470932007, 2.063683271408081, 2.0804145336151123, 2.097477912902832, 2.11486554145813, 2.1325693130493164, 2.1505813598632812, 2.168894052505493, 2.1875, 2.2063915729522705, 2.2255616188049316, 2.2450032234191895, 2.2647087574005127, 2.2846720218658447, 2.3048861026763916, 2.3253443241119385, 2.3460404872894287, 2.3669683933258057, 2.3881216049194336, 2.409494638442993, 2.4310812950134277, 2.452876091003418, 2.4748737812042236, 2.4970686435699463, 2.5194554328918457, 2.542029619216919, 2.5647854804992676, 2.587718963623047, 2.6108248233795166, 2.634098768234253, 2.657536506652832, 2.634098768234253, 2.6108248233795166, 2.587718963623047, 2.5647854804992676, 2.542029619216919, 2.5194554328918457, 2.4970686435699463, 2.4748737812042236, 2.452876091003418, 2.4310812950134277, 2.409494638442993, 2.3881216049194336, 2.3669683933258057, 2.3460404872894287, 2.3253443241119385, 2.3048861026763916, 2.2846720218658447, 2.2647087574005127, 2.2450032234191895, 2.2255616188049316, 2.2063915729522705, 2.1875, 2.168894052505493, 2.1505813598632812, 2.1325693130493164, 2.11486554145813, 2.097477912902832, 2.0804145336151123, 2.063683271408081, 2.047292470932007, 2.03125, 2.015564441680908, 2.000244140625, 1.9852975606918335, 1.9707331657409668, 1.9565595388412476, 1.9427851438522339, 1.929418683052063, 1.9164685010910034, 1.9039433002471924, 1.8918513059616089, 1.8802011013031006, 1.869000792503357, 1.858258605003357, 1.847982406616211, 1.8381801843643188, 1.8288593292236328, 1.820027470588684, 1.8116916418075562, 1.803858757019043, 1.7965352535247803, 1.7897276878356934, 1.7834416627883911, 1.7776827812194824, 1.772456407546997, 1.7677669525146484, 1.76361882686615, 1.7600159645080566, 1.7569615840911865, 1.7544585466384888, 1.752509355545044, 1.7511156797409058, 1.7502789497375488, 1.71875, 1.7190340757369995, 1.7198859453201294, 1.7213048934936523, 1.7232894897460938, 1.7258377075195312, 1.7289470434188843, 1.732614517211914, 1.7368366718292236, 1.7416093349456787, 1.746928095817566, 1.7527879476547241, 1.7591835260391235, 1.7661088705062866, 1.7735579013824463, 1.7815240621566772, 1.7900004386901855, 1.7989797592163086, 1.8084545135498047, 1.8184170722961426, 1.8288593292236328, 1.8397732973098755, 1.851150393486023, 1.8629822731018066, 1.875260353088379, 1.8879759311676025, 1.9011201858520508, 1.9146841764450073, 1.9286593198776245, 1.943036437034607, 1.957806944847107, 1.9729617834091187, 1.9884922504425049, 2.004389762878418, 2.0206453800201416, 2.0372507572174072, 2.054197311401367, 2.071476697921753, 2.089080572128296, 2.1070010662078857, 2.125229835510254, 2.14375901222229, 2.162581205368042, 2.1816887855529785, 2.2010738849639893, 2.2207298278808594, 2.2406489849090576, 2.260824680328369, 2.28125, 2.3019182682037354, 2.3228232860565186, 2.3439583778381348, 2.3653173446655273, 2.386894464492798, 2.4086837768554688, 2.4306795597076416, 2.452876091003418, 2.4752683639526367, 2.4978506565093994, 2.520618200302124, 2.5435657501220703, 2.5666885375976562, 2.589982271194458, 2.6134417057037354, 2.6370630264282227, 2.6134417057037354, 2.589982271194458, 2.5666885375976562, 2.5435657501220703, 2.520618200302124, 2.4978506565093994, 2.4752683639526367, 2.452876091003418, 2.4306795597076416, 2.4086837768554688, 2.386894464492798, 2.3653173446655273, 2.3439583778381348, 2.3228232860565186, 2.3019182682037354, 2.28125, 2.260824680328369, 2.2406489849090576, 2.2207298278808594, 2.2010738849639893, 2.1816887855529785, 2.162581205368042, 2.14375901222229, 2.125229835510254, 2.1070010662078857, 2.089080572128296, 2.071476697921753, 2.054197311401367, 2.0372507572174072, 2.0206453800201416, 2.004389762878418, 1.9884922504425049, 1.9729617834091187, 1.957806944847107, 1.943036437034607, 1.9286593198776245, 1.9146841764450073, 1.9011201858520508, 1.8879759311676025, 1.875260353088379, 1.8629822731018066, 1.851150393486023, 1.8397732973098755, 1.8288593292236328, 1.8184170722961426, 1.8084545135498047, 1.7989797592163086, 1.7900004386901855, 1.7815240621566772, 1.7735579013824463, 1.7661088705062866, 1.7591835260391235, 1.7527879476547241, 1.746928095817566, 1.7416093349456787, 1.7368366718292236, 1.732614517211914, 1.7289470434188843, 1.7258377075195312, 1.7232894897460938, 1.7213048934936523, 1.7198859453201294, 1.7190340757369995, 1.6875, 1.6877893209457397, 1.6886570453643799, 1.690102219581604, 1.692123293876648, 1.694718360900879, 1.6978846788406372, 1.7016191482543945, 1.7059179544448853, 1.710776925086975, 1.716191291809082, 1.7221556901931763, 1.7286646366119385, 1.7357118129730225, 1.743290662765503, 1.751394510269165, 1.7600159645080566, 1.769147515296936, 1.7787811756134033, 1.7889089584350586, 1.7995225191116333, 1.8106132745742798, 1.8221725225448608, 1.8341913223266602, 1.846660852432251, 1.859571933746338, 1.872915506362915, 1.886682391166687, 1.9008632898330688, 1.9154491424560547, 1.9304306507110596, 1.9457987546920776, 1.961544394493103, 1.9776583909988403, 1.9941320419311523, 2.010956287384033, 2.028122663497925, 2.0456223487854004, 2.0634467601776123, 2.081587791442871, 2.100037097930908, 2.1187868118286133, 2.137828826904297, 2.1571555137634277, 2.1767592430114746, 2.1966326236724854, 2.216768503189087, 2.237159490585327, 2.257798910140991, 2.2786800861358643, 2.2997961044311523, 2.321141004562378, 2.342708110809326, 2.3644914627075195, 2.3864853382110596, 2.4086837768554688, 2.4310812950134277, 2.453672409057617, 2.4764516353607178, 2.4994139671325684, 2.522554397583008, 2.545868396759033, 2.569350481033325, 2.592996835708618, 2.61680269241333, 2.592996835708618, 2.569350481033325, 2.545868396759033, 2.522554397583008, 2.4994139671325684, 2.4764516353607178, 2.453672409057617, 2.4310812950134277, 2.4086837768554688, 2.3864853382110596, 2.3644914627075195, 2.342708110809326, 2.321141004562378, 2.2997961044311523, 2.2786800861358643, 2.257798910140991, 2.237159490585327, 2.216768503189087, 2.1966326236724854, 2.1767592430114746, 2.1571555137634277, 2.137828826904297, 2.1187868118286133, 2.100037097930908, 2.081587791442871, 2.0634467601776123, 2.0456223487854004, 2.028122663497925, 2.010956287384033, 1.9941320419311523, 1.9776583909988403, 1.961544394493103, 1.9457987546920776, 1.9304306507110596, 1.9154491424560547, 1.9008632898330688, 1.886682391166687, 1.872915506362915, 1.859571933746338, 1.846660852432251, 1.8341913223266602, 1.8221725225448608, 1.8106132745742798, 1.7995225191116333, 1.7889089584350586, 1.7787811756134033, 1.769147515296936, 1.7600159645080566, 1.751394510269165, 1.743290662765503, 1.7357118129730225, 1.7286646366119385, 1.7221556901931763, 1.716191291809082, 1.710776925086975, 1.7059179544448853, 1.7016191482543945, 1.6978846788406372, 1.694718360900879, 1.692123293876648, 1.690102219581604, 1.6886570453643799, 1.6877893209457397, 1.65625, 1.656544804573059, 1.6574288606643677, 1.6589012145996094, 1.66096031665802, 1.6636039018630981, 1.6668294668197632, 1.670633316040039, 1.6750116348266602, 1.679960012435913, 1.6854733228683472, 1.691546082496643, 1.6981722116470337, 1.7053455114364624, 1.7130587100982666, 1.7213048934936523, 1.7300763130187988, 1.7393649816513062, 1.7491627931594849, 1.7594610452651978, 1.7702511548995972, 1.7815240621566772, 1.7932708263397217, 1.8054821491241455, 1.8181484937667847, 1.8312606811523438, 1.8448090553283691, 1.8587840795516968, 1.8731762170791626, 1.8879759311676025, 1.903173804283142, 1.9187601804733276, 1.9347258806228638, 1.9510613679885864, 1.9677577018737793, 1.9848055839538574, 2.0021960735321045, 2.0199203491210938, 2.0379695892333984, 2.05633544921875, 2.075009346008301, 2.0939831733703613, 2.113248825073242, 2.132798194885254, 2.1526236534118652, 2.172717809677124, 2.193073272705078, 2.2136826515197754, 2.2345387935638428, 2.2556352615356445, 2.2769651412963867, 2.2985219955444336, 2.3202993869781494, 2.3422911167144775, 2.3644914627075195, 2.386894464492798, 2.409494638442993, 2.432286024093628, 2.45526385307312, 2.4784224033355713, 2.5017571449279785, 2.5252630710601807, 2.5489351749420166, 2.5727691650390625, 2.5967602729797363, 2.5727691650390625, 2.5489351749420166, 2.5252630710601807, 2.5017571449279785, 2.4784224033355713, 2.45526385307312, 2.432286024093628, 2.409494638442993, 2.386894464492798, 2.3644914627075195, 2.3422911167144775, 2.3202993869781494, 2.2985219955444336, 2.2769651412963867, 2.2556352615356445, 2.2345387935638428, 2.2136826515197754, 2.193073272705078, 2.172717809677124, 2.1526236534118652, 2.132798194885254, 2.113248825073242, 2.0939831733703613, 2.075009346008301, 2.05633544921875, 2.0379695892333984, 2.0199203491210938, 2.0021960735321045, 1.9848055839538574, 1.9677577018737793, 1.9510613679885864, 1.9347258806228638, 1.9187601804733276, 1.903173804283142, 1.8879759311676025, 1.8731762170791626, 1.8587840795516968, 1.8448090553283691, 1.8312606811523438, 1.8181484937667847, 1.8054821491241455, 1.7932708263397217, 1.7815240621566772, 1.7702511548995972, 1.7594610452651978, 1.7491627931594849, 1.7393649816513062, 1.7300763130187988, 1.7213048934936523, 1.7130587100982666, 1.7053455114364624, 1.6981722116470337, 1.691546082496643, 1.6854733228683472, 1.679960012435913, 1.6750116348266602, 1.670633316040039, 1.6668294668197632, 1.6636039018630981, 1.66096031665802, 1.6589012145996094, 1.6574288606643677, 1.656544804573059, 1.625, 1.625300407409668, 1.6262015104293823, 1.6277021169662476, 1.62980055809021, 1.6324946880340576, 1.6357815265655518, 1.6396574974060059, 1.644118309020996, 1.64915931224823, 1.6547752618789673, 1.66096031665802, 1.6677080392837524, 1.6750116348266602, 1.6828639507293701, 1.691257357597351, 1.7001838684082031, 1.7096349000930786, 1.719602108001709, 1.7300763130187988, 1.7410485744476318, 1.752509355545044, 1.7644492387771606, 1.7768585681915283, 1.7897276878356934, 1.803046464920044, 1.8168052434921265, 1.8309940099716187, 1.8456028699874878, 1.8606219291687012, 1.8760414123535156, 1.8918513059616089, 1.9080421924591064, 1.9246042966842651, 1.941528081893921, 1.9588042497634888, 1.9764235019683838, 1.9943768978118896, 2.012655258178711, 2.03125, 2.050152540206909, 2.0693540573120117, 2.0888469219207764, 2.1086225509643555, 2.1286733150482178, 2.148991346359253, 2.169569253921509, 2.1903998851776123, 2.2114758491516113, 2.232789993286133, 2.25433611869812, 2.2761073112487793, 2.2980971336364746, 2.3202993869781494, 2.342708110809326, 2.3653173446655273, 2.3881216049194336, 2.4111151695251465, 2.434292793273926, 2.457648992538452, 2.4811792373657227, 2.504878044128418, 2.5287411212921143, 2.5527634620666504, 2.5769410133361816, 2.5527634620666504, 2.5287411212921143, 2.504878044128418, 2.4811792373657227, 2.457648992538452, 2.434292793273926, 2.4111151695251465, 2.3881216049194336, 2.3653173446655273, 2.342708110809326, 2.3202993869781494, 2.2980971336364746, 2.2761073112487793, 2.25433611869812, 2.232789993286133, 2.2114758491516113, 2.1903998851776123, 2.169569253921509, 2.148991346359253, 2.1286733150482178, 2.1086225509643555, 2.0888469219207764, 2.0693540573120117, 2.050152540206909, 2.03125, 2.012655258178711, 1.9943768978118896, 1.9764235019683838, 1.9588042497634888, 1.941528081893921, 1.9246042966842651, 1.9080421924591064, 1.8918513059616089, 1.8760414123535156, 1.8606219291687012, 1.8456028699874878, 1.8309940099716187, 1.8168052434921265, 1.803046464920044, 1.7897276878356934, 1.7768585681915283, 1.7644492387771606, 1.752509355545044, 1.7410485744476318, 1.7300763130187988, 1.719602108001709, 1.7096349000930786, 1.7001838684082031, 1.691257357597351, 1.6828639507293701, 1.6750116348266602, 1.6677080392837524, 1.66096031665802, 1.6547752618789673, 1.64915931224823, 1.644118309020996, 1.6396574974060059, 1.6357815265655518, 1.6324946880340576, 1.62980055809021, 1.6277021169662476, 1.6262015104293823, 1.625300407409668, 1.59375, 1.5940563678741455, 1.5949749946594238, 1.5965049266815186, 1.598644495010376, 1.6013909578323364, 1.6047414541244507, 1.6086921691894531, 1.6132386922836304, 1.6183758974075317, 1.624098300933838, 1.6303997039794922, 1.6372733116149902, 1.644712209701538, 1.6527085304260254, 1.6612542867660522, 1.6703410148620605, 1.679960012435913, 1.690102219581604, 1.7007580995559692, 1.7119182348251343, 1.7235727310180664, 1.7357118129730225, 1.7483251094818115, 1.7614026069641113, 1.774933934211731, 1.7889089584350586, 1.8033173084259033, 1.8181484937667847, 1.8333925008773804, 1.849039077758789, 1.8650779724121094, 1.881499171257019, 1.8982927799224854, 1.9154491424560547, 1.9329583644866943, 1.9508111476898193, 1.9689979553222656, 1.987509846687317, 2.0063376426696777, 2.025472640991211, 2.0449059009552, 2.064629554748535, 2.084635019302368, 2.1049141883850098, 2.1254594326019287, 2.1462631225585938, 2.1673176288604736, 2.1886157989501953, 2.2101504802703857, 2.231915235519409, 2.2539029121398926, 2.2761073112487793, 2.2985219955444336, 2.321141004562378, 2.3439583778381348, 2.3669683933258057, 2.390165328979492, 2.413544178009033, 2.4370992183685303, 2.4608259201049805, 2.4847190380096436, 2.5087735652923584, 2.5329854488372803, 2.557349920272827, 2.5329854488372803, 2.5087735652923584, 2.4847190380096436, 2.4608259201049805, 2.4370992183685303, 2.413544178009033, 2.390165328979492, 2.3669683933258057, 2.3439583778381348, 2.321141004562378, 2.2985219955444336, 2.2761073112487793, 2.2539029121398926, 2.231915235519409, 2.2101504802703857, 2.1886157989501953, 2.1673176288604736, 2.1462631225585938, 2.1254594326019287, 2.1049141883850098, 2.084635019302368, 2.064629554748535, 2.0449059009552, 2.025472640991211, 2.0063376426696777, 1.987509846687317, 1.9689979553222656, 1.9508111476898193, 1.9329583644866943, 1.9154491424560547, 1.8982927799224854, 1.881499171257019, 1.8650779724121094, 1.849039077758789, 1.8333925008773804, 1.8181484937667847, 1.8033173084259033, 1.7889089584350586, 1.774933934211731, 1.7614026069641113, 1.7483251094818115, 1.7357118129730225, 1.7235727310180664, 1.7119182348251343, 1.7007580995559692, 1.690102219581604, 1.679960012435913, 1.6703410148620605, 1.6612542867660522, 1.6527085304260254, 1.644712209701538, 1.6372733116149902, 1.6303997039794922, 1.624098300933838, 1.6183758974075317, 1.6132386922836304, 1.6086921691894531, 1.6047414541244507, 1.6013909578323364, 1.598644495010376, 1.5965049266815186, 1.5949749946594238, 1.5940563678741455, 1.5625, 1.5628124475479126, 1.5637495517730713, 1.565310001373291, 1.5674920082092285, 1.5702930688858032, 1.5737098455429077, 1.5777381658554077, 1.5823736190795898, 1.5876107215881348, 1.5934436321258545, 1.5998656749725342, 1.6068700551986694, 1.61444890499115, 1.6225943565368652, 1.6312979459762573, 1.6405506134033203, 1.6503432989120483, 1.6606662273406982, 1.671509861946106, 1.6828639507293701, 1.694718360900879, 1.7070624828338623, 1.7198859453201294, 1.7331780195236206, 1.746928095817566, 1.7611253261566162, 1.7757591009140015, 1.7908185720443726, 1.806293249130249, 1.8221725225448608, 1.838445782661438, 1.855102777481079, 1.8721332550048828, 1.8895270824432373, 1.9072743654251099, 1.9253652095794678, 1.9437901973724365, 1.962539792060852, 1.981604814529419, 2.000976324081421, 2.0206453800201416, 2.0406033992767334, 2.0608420372009277, 2.081353187561035, 2.102128744125366, 2.1231610774993896, 2.144442319869995, 2.1659653186798096, 2.187723159790039, 2.2097086906433105, 2.231915235519409, 2.25433611869812, 2.2769651412963867, 2.2997961044311523, 2.3228232860565186, 2.3460404872894287, 2.3694424629211426, 2.393023729324341, 2.416778802871704, 2.4407029151916504, 2.4647910594940186, 2.4890384674072266, 2.5134403705596924, 2.537992477416992, 2.5134403705596924, 2.4890384674072266, 2.4647910594940186, 2.4407029151916504, 2.416778802871704, 2.393023729324341, 2.3694424629211426, 2.3460404872894287, 2.3228232860565186, 2.2997961044311523, 2.2769651412963867, 2.25433611869812, 2.231915235519409, 2.2097086906433105, 2.187723159790039, 2.1659653186798096, 2.144442319869995, 2.1231610774993896, 2.102128744125366, 2.081353187561035, 2.0608420372009277, 2.0406033992767334, 2.0206453800201416, 2.000976324081421, 1.981604814529419, 1.962539792060852, 1.9437901973724365, 1.9253652095794678, 1.9072743654251099, 1.8895270824432373, 1.8721332550048828, 1.855102777481079, 1.838445782661438, 1.8221725225448608, 1.806293249130249, 1.7908185720443726, 1.7757591009140015, 1.7611253261566162, 1.746928095817566, 1.7331780195236206, 1.7198859453201294, 1.7070624828338623, 1.694718360900879, 1.6828639507293701, 1.671509861946106, 1.6606662273406982, 1.6503432989120483, 1.6405506134033203, 1.6312979459762573, 1.6225943565368652, 1.61444890499115, 1.6068700551986694, 1.5998656749725342, 1.5934436321258545, 1.5876107215881348, 1.5823736190795898, 1.5777381658554077, 1.5737098455429077, 1.5702930688858032, 1.5674920082092285, 1.565310001373291, 1.5637495517730713, 1.5628124475479126, 1.53125, 1.5315688848495483, 1.5325249433517456, 1.5341172218322754, 1.5363435745239258, 1.539201259613037, 1.542686939239502, 1.5467960834503174, 1.5515239238739014, 1.556864857673645, 1.5628124475479126, 1.5693598985671997, 1.5764998197555542, 1.584223985671997, 1.5925240516662598, 1.6013909578323364, 1.6108155250549316, 1.6207878589630127, 1.6312979459762573, 1.6423354148864746, 1.653889775276184, 1.6659504175186157, 1.6785061359405518, 1.691546082496643, 1.7050590515136719, 1.7190340757369995, 1.7334598302841187, 1.7483251094818115, 1.76361882686615, 1.7793301343917847, 1.795447826385498, 1.8119611740112305, 1.8288593292236328, 1.8461319208145142, 1.863768458366394, 1.881758689880371, 1.9000924825668335, 1.9187601804733276, 1.9377520084381104, 1.9570585489273071, 1.9766706228256226, 1.9965790510177612, 2.016775369644165, 2.0372507572174072, 2.057996988296509, 2.0790059566497803, 2.1002697944641113, 2.1217806339263916, 2.143531322479248, 2.1655144691467285, 2.187723159790039, 2.2101504802703857, 2.232789993286133, 2.2556352615356445, 2.2786800861358643, 2.3019182682037354, 2.3253443241119385, 2.348952531814575, 2.372737407684326, 2.396693706512451, 2.42081618309021, 2.4451003074645996, 2.469541072845459, 2.494133710861206, 2.518874168395996, 2.494133710861206, 2.469541072845459, 2.4451003074645996, 2.42081618309021, 2.396693706512451, 2.372737407684326, 2.348952531814575, 2.3253443241119385, 2.3019182682037354, 2.2786800861358643, 2.2556352615356445, 2.232789993286133, 2.2101504802703857, 2.187723159790039, 2.1655144691467285, 2.143531322479248, 2.1217806339263916, 2.1002697944641113, 2.0790059566497803, 2.057996988296509, 2.0372507572174072, 2.016775369644165, 1.9965790510177612, 1.9766706228256226, 1.9570585489273071, 1.9377520084381104, 1.9187601804733276, 1.9000924825668335, 1.881758689880371, 1.863768458366394, 1.8461319208145142, 1.8288593292236328, 1.8119611740112305, 1.795447826385498, 1.7793301343917847, 1.76361882686615, 1.7483251094818115, 1.7334598302841187, 1.7190340757369995, 1.7050590515136719, 1.691546082496643, 1.6785061359405518, 1.6659504175186157, 1.653889775276184, 1.6423354148864746, 1.6312979459762573, 1.6207878589630127, 1.6108155250549316, 1.6013909578323364, 1.5925240516662598, 1.584223985671997, 1.5764998197555542, 1.5693598985671997, 1.5628124475479126, 1.556864857673645, 1.5515239238739014, 1.5467960834503174, 1.542686939239502, 1.539201259613037, 1.5363435745239258, 1.5341172218322754, 1.5325249433517456, 1.5315688848495483, 1.5, 1.5003254413604736, 1.5013015270233154, 1.5029268264770508, 1.5051993131637573, 1.5081160068511963, 1.5116733312606812, 1.5158666372299194, 1.520690679550171, 1.5261393785476685, 1.5322062969207764, 1.5388840436935425, 1.546164631843567, 1.5540395975112915, 1.5625, 1.5715364217758179, 1.5811388492584229, 1.5912971496582031, 1.6020007133483887, 1.6132386922836304, 1.625, 1.6372733116149902, 1.6500473022460938, 1.6633104085922241, 1.6770509481430054, 1.691257357597351, 1.7059179544448853, 1.7210211753845215, 1.7365554571151733, 1.752509355545044, 1.7688714265823364, 1.7856305837631226, 1.8027756214141846, 1.8202956914901733, 1.8381801843643188, 1.8564183712005615, 1.875, 1.893915057182312, 1.9131535291671753, 1.9327057600021362, 1.9525624513626099, 1.9727143049240112, 1.993152379989624, 2.0138678550720215, 2.0348525047302246, 2.056097984313965, 2.0775961875915527, 2.099339485168457, 2.1213202476501465, 2.143531322479248, 2.1659653186798096, 2.1886157989501953, 2.2114758491516113, 2.2345387935638428, 2.257798910140991, 2.28125, 2.3048861026763916, 2.3287017345428467, 2.352691173553467, 2.37684965133667, 2.4011716842651367, 2.425652265548706, 2.450286865234375, 2.4750709533691406, 2.5, 2.4750709533691406, 2.450286865234375, 2.425652265548706, 2.4011716842651367, 2.37684965133667, 2.352691173553467, 2.3287017345428467, 2.3048861026763916, 2.28125, 2.257798910140991, 2.2345387935638428, 2.2114758491516113, 2.1886157989501953, 2.1659653186798096, 2.143531322479248, 2.1213202476501465, 2.099339485168457, 2.0775961875915527, 2.056097984313965, 2.0348525047302246, 2.0138678550720215, 1.993152379989624, 1.9727143049240112, 1.9525624513626099, 1.9327057600021362, 1.9131535291671753, 1.893915057182312, 1.875, 1.8564183712005615, 1.8381801843643188, 1.8202956914901733, 1.8027756214141846, 1.7856305837631226, 1.7688714265823364, 1.752509355545044, 1.7365554571151733, 1.7210211753845215, 1.7059179544448853, 1.691257357597351, 1.6770509481430054, 1.6633104085922241, 1.6500473022460938, 1.6372733116149902, 1.625, 1.6132386922836304, 1.6020007133483887, 1.5912971496582031, 1.5811388492584229, 1.5715364217758179, 1.5625, 1.5540395975112915, 1.546164631843567, 1.5388840436935425, 1.5322062969207764, 1.5261393785476685, 1.520690679550171, 1.5158666372299194, 1.5116733312606812, 1.5081160068511963, 1.5051993131637573, 1.5029268264770508, 1.5013015270233154, 1.5003254413604736, 1.46875, 1.4690823554992676, 1.4700791835784912, 1.4717389345169067, 1.4740595817565918, 1.477037787437439, 1.4806697368621826, 1.4849505424499512, 1.4898747205734253, 1.4954357147216797, 1.50162672996521, 1.5084397792816162, 1.5158666372299194, 1.5238981246948242, 1.5325249433517456, 1.5417370796203613, 1.5515239238739014, 1.5618748664855957, 1.5727787017822266, 1.584223985671997, 1.5961991548538208, 1.6086921691894531, 1.621691346168518, 1.635184407234192, 1.64915931224823, 1.6636039018630981, 1.6785061359405518, 1.693853735923767, 1.7096349000930786, 1.7258377075195312, 1.74245023727417, 1.7594610452651978, 1.7768585681915283, 1.7946317195892334, 1.8127694129943848, 1.8312606811523438, 1.8500950336456299, 1.8692620992660522, 1.8887516260147095, 1.908553957939148, 1.9286593198776245, 1.9490582942962646, 1.9697418212890625, 1.9907010793685913, 2.011927366256714, 2.033412218093872, 2.055147886276245, 2.0771262645721436, 2.099339485168457, 2.1217806339263916, 2.144442319869995, 2.1673176288604736, 2.1903998851776123, 2.2136826515197754, 2.237159490585327, 2.260824680328369, 2.2846720218658447, 2.3086962699890137, 2.3328914642333984, 2.357252836227417, 2.38177490234375, 2.4064528942108154, 2.4312820434570312, 2.4562580585479736, 2.4813759326934814, 2.4562580585479736, 2.4312820434570312, 2.4064528942108154, 2.38177490234375, 2.357252836227417, 2.3328914642333984, 2.3086962699890137, 2.2846720218658447, 2.260824680328369, 2.237159490585327, 2.2136826515197754, 2.1903998851776123, 2.1673176288604736, 2.144442319869995, 2.1217806339263916, 2.099339485168457, 2.0771262645721436, 2.055147886276245, 2.033412218093872, 2.011927366256714, 1.9907010793685913, 1.9697418212890625, 1.9490582942962646, 1.9286593198776245, 1.908553957939148, 1.8887516260147095, 1.8692620992660522, 1.8500950336456299, 1.8312606811523438, 1.8127694129943848, 1.7946317195892334, 1.7768585681915283, 1.7594610452651978, 1.74245023727417, 1.7258377075195312, 1.7096349000930786, 1.693853735923767, 1.6785061359405518, 1.6636039018630981, 1.64915931224823, 1.635184407234192, 1.621691346168518, 1.6086921691894531, 1.5961991548538208, 1.584223985671997, 1.5727787017822266, 1.5618748664855957, 1.5515239238739014, 1.5417370796203613, 1.5325249433517456, 1.5238981246948242, 1.5158666372299194, 1.5084397792816162, 1.50162672996521, 1.4954357147216797, 1.4898747205734253, 1.4849505424499512, 1.4806697368621826, 1.477037787437439, 1.4740595817565918, 1.4717389345169067, 1.4700791835784912, 1.4690823554992676, 1.4375, 1.4378396272659302, 1.4388580322265625, 1.4405537843704224, 1.4429244995117188, 1.4459669589996338, 1.4496766328811646, 1.454048752784729, 1.45907723903656, 1.4647551774978638, 1.4710752964019775, 1.4780292510986328, 1.4856079816818237, 1.4938023090362549, 1.5026018619537354, 1.5119962692260742, 1.5219744443893433, 1.5325249433517456, 1.5436360836029053, 1.5552959442138672, 1.5674920082092285, 1.580212116241455, 1.5934436321258545, 1.6071738004684448, 1.6213902235031128, 1.636080026626587, 1.6512305736541748, 1.6668294668197632, 1.6828639507293701, 1.699321985244751, 1.716191291809082, 1.7334598302841187, 1.7511156797409058, 1.769147515296936, 1.7875436544418335, 1.806293249130249, 1.8253852128982544, 1.8448090553283691, 1.8645542860031128, 1.8846107721328735, 1.9049688577651978, 1.9256187677383423, 1.9465514421463013, 1.9677577018737793, 1.9892288446426392, 2.010956287384033, 2.0329320430755615, 2.055147886276245, 2.0775961875915527, 2.1002697944641113, 2.1231610774993896, 2.1462631225585938, 2.169569253921509, 2.193073272705078, 2.216768503189087, 2.2406489849090576, 2.2647087574005127, 2.288942575454712, 2.3133444786071777, 2.337909460067749, 2.3626322746276855, 2.3875081539154053, 2.412532329559326, 2.4377002716064453, 2.4630074501037598, 2.4377002716064453, 2.412532329559326, 2.3875081539154053, 2.3626322746276855, 2.337909460067749, 2.3133444786071777, 2.288942575454712, 2.2647087574005127, 2.2406489849090576, 2.216768503189087, 2.193073272705078, 2.169569253921509, 2.1462631225585938, 2.1231610774993896, 2.1002697944641113, 2.0775961875915527, 2.055147886276245, 2.0329320430755615, 2.010956287384033, 1.9892288446426392, 1.9677577018737793, 1.9465514421463013, 1.9256187677383423, 1.9049688577651978, 1.8846107721328735, 1.8645542860031128, 1.8448090553283691, 1.8253852128982544, 1.806293249130249, 1.7875436544418335, 1.769147515296936, 1.7511156797409058, 1.7334598302841187, 1.716191291809082, 1.699321985244751, 1.6828639507293701, 1.6668294668197632, 1.6512305736541748, 1.636080026626587, 1.6213902235031128, 1.6071738004684448, 1.5934436321258545, 1.580212116241455, 1.5674920082092285, 1.5552959442138672, 1.5436360836029053, 1.5325249433517456, 1.5219744443893433, 1.5119962692260742, 1.5026018619537354, 1.4938023090362549, 1.4856079816818237, 1.4780292510986328, 1.4710752964019775, 1.4647551774978638, 1.45907723903656, 1.454048752784729, 1.4496766328811646, 1.4459669589996338, 1.4429244995117188, 1.4405537843704224, 1.4388580322265625, 1.4378396272659302, 1.40625, 1.4065971374511719, 1.4076381921768188, 1.4093714952468872, 1.411794662475586, 1.4149038791656494, 1.4186949729919434, 1.4231622219085693, 1.4282993078231812, 1.4340991973876953, 1.4405537843704224, 1.447654366493225, 1.4553914070129395, 1.4637547731399536, 1.472733974456787, 1.4823176860809326, 1.4924942255020142, 1.5032516717910767, 1.5145776271820068, 1.5264593362808228, 1.5388840436935425, 1.5518386363983154, 1.565310001373291, 1.5792847871780396, 1.59375, 1.6086921691894531, 1.624098300933838, 1.6399551630020142, 1.65625, 1.6729698181152344, 1.690102219581604, 1.7076345682144165, 1.7255547046661377, 1.743850827217102, 1.762511134147644, 1.7815240621566772, 1.800878643989563, 1.8205639123916626, 1.840569257736206, 1.8608843088150024, 1.881499171257019, 1.9024039506912231, 1.9235892295837402, 1.945045828819275, 1.9667649269104004, 1.9887378215789795, 2.010956287384033, 2.033412218093872, 2.056097984313965, 2.0790059566497803, 2.102128744125366, 2.1254594326019287, 2.148991346359253, 2.172717809677124, 2.1966326236724854, 2.2207298278808594, 2.2450032234191895, 2.269447088241577, 2.2940564155578613, 2.3188257217407227, 2.34375, 2.3688242435455322, 2.3940436840057373, 2.4194040298461914, 2.4449005126953125, 2.4194040298461914, 2.3940436840057373, 2.3688242435455322, 2.34375, 2.3188257217407227, 2.2940564155578613, 2.269447088241577, 2.2450032234191895, 2.2207298278808594, 2.1966326236724854, 2.172717809677124, 2.148991346359253, 2.1254594326019287, 2.102128744125366, 2.0790059566497803, 2.056097984313965, 2.033412218093872, 2.010956287384033, 1.9887378215789795, 1.9667649269104004, 1.945045828819275, 1.9235892295837402, 1.9024039506912231, 1.881499171257019, 1.8608843088150024, 1.840569257736206, 1.8205639123916626, 1.800878643989563, 1.7815240621566772, 1.762511134147644, 1.743850827217102, 1.7255547046661377, 1.7076345682144165, 1.690102219581604, 1.6729698181152344, 1.65625, 1.6399551630020142, 1.624098300933838, 1.6086921691894531, 1.59375, 1.5792847871780396, 1.565310001373291, 1.5518386363983154, 1.5388840436935425, 1.5264593362808228, 1.5145776271820068, 1.5032516717910767, 1.4924942255020142, 1.4823176860809326, 1.472733974456787, 1.4637547731399536, 1.4553914070129395, 1.447654366493225, 1.4405537843704224, 1.4340991973876953, 1.4282993078231812, 1.4231622219085693, 1.4186949729919434, 1.4149038791656494, 1.411794662475586, 1.4093714952468872, 1.4076381921768188, 1.4065971374511719, 1.375, 1.3753551244735718, 1.3764196634292603, 1.3781923055648804, 1.3806700706481934, 1.3838493824005127, 1.3877252340316772, 1.392291784286499, 1.3975424766540527, 1.403469443321228, 1.4100642204284668, 1.417317509651184, 1.4252192974090576, 1.4337587356567383, 1.4429244995117188, 1.452704906463623, 1.4630874395370483, 1.4740595817565918, 1.4856079816818237, 1.497719645500183, 1.510380744934082, 1.5235776901245117, 1.5372967720031738, 1.5515239238739014, 1.5662455558776855, 1.5814476013183594, 1.5971165895462036, 1.6132386922836304, 1.62980055809021, 1.6467890739440918, 1.6641908884048462, 1.6819933652877808, 1.7001838684082031, 1.71875, 1.7376798391342163, 1.7569615840911865, 1.7765837907791138, 1.7965352535247803, 1.8168052434921265, 1.8373830318450928, 1.858258605003357, 1.8794218301773071, 1.9008632898330688, 1.9225735664367676, 1.9445436000823975, 1.9667649269104004, 1.9892288446426392, 2.011927366256714, 2.0348525047302246, 2.057996988296509, 2.081353187561035, 2.1049141883850098, 2.1286733150482178, 2.1526236534118652, 2.1767592430114746, 2.2010738849639893, 2.2255616188049316, 2.2502169609069824, 2.2750344276428223, 2.300008535385132, 2.325134515762329, 2.350407123565674, 2.3758223056793213, 2.4013748168945312, 2.427061080932617, 2.4013748168945312, 2.3758223056793213, 2.350407123565674, 2.325134515762329, 2.300008535385132, 2.2750344276428223, 2.2502169609069824, 2.2255616188049316, 2.2010738849639893, 2.1767592430114746, 2.1526236534118652, 2.1286733150482178, 2.1049141883850098, 2.081353187561035, 2.057996988296509, 2.0348525047302246, 2.011927366256714, 1.9892288446426392, 1.9667649269104004, 1.9445436000823975, 1.9225735664367676, 1.9008632898330688, 1.8794218301773071, 1.858258605003357, 1.8373830318450928, 1.8168052434921265, 1.7965352535247803, 1.7765837907791138, 1.7569615840911865, 1.7376798391342163, 1.71875, 1.7001838684082031, 1.6819933652877808, 1.6641908884048462, 1.6467890739440918, 1.62980055809021, 1.6132386922836304, 1.5971165895462036, 1.5814476013183594, 1.5662455558776855, 1.5515239238739014, 1.5372967720031738, 1.5235776901245117, 1.510380744934082, 1.497719645500183, 1.4856079816818237, 1.4740595817565918, 1.4630874395370483, 1.452704906463623, 1.4429244995117188, 1.4337587356567383, 1.4252192974090576, 1.417317509651184, 1.4100642204284668, 1.403469443321228, 1.3975424766540527, 1.392291784286499, 1.3877252340316772, 1.3838493824005127, 1.3806700706481934, 1.3781923055648804, 1.3764196634292603, 1.3753551244735718, 1.34375, 1.3441133499145508, 1.3452026844024658, 1.3470163345336914, 1.3495514392852783, 1.3528038263320923, 1.3567683696746826, 1.3614387512207031, 1.3668079376220703, 1.3728677034378052, 1.3796087503433228, 1.3870213031768799, 1.395094633102417, 1.4038172960281372, 1.4131773710250854, 1.4231622219085693, 1.4337587356567383, 1.4449535608291626, 1.4567327499389648, 1.4690823554992676, 1.4819881916046143, 1.4954357147216797, 1.5094106197357178, 1.5238981246948242, 1.5388840436935425, 1.5543537139892578, 1.5702930688858032, 1.5866878032684326, 1.6035239696502686, 1.6207878589630127, 1.6384658813476562, 1.656544804573059, 1.6750116348266602, 1.693853735923767, 1.7130587100982666, 1.732614517211914, 1.752509355545044, 1.7727317810058594, 1.7932708263397217, 1.8141156435012817, 1.8352558612823486, 1.8566813468933105, 1.8783823251724243, 1.900349497795105, 1.9225735664367676, 1.945045828819275, 1.9677577018737793, 1.9907010793685913, 2.0138678550720215, 2.0372507572174072, 2.0608420372009277, 2.084635019302368, 2.1086225509643555, 2.132798194885254, 2.1571555137634277, 2.1816887855529785, 2.2063915729522705, 2.2312588691711426, 2.256284713745117, 2.281464099884033, 2.3067920207977295, 2.332263469696045, 2.3578741550445557, 2.3836193084716797, 2.409494638442993, 2.3836193084716797, 2.3578741550445557, 2.332263469696045, 2.3067920207977295, 2.281464099884033, 2.256284713745117, 2.2312588691711426, 2.2063915729522705, 2.1816887855529785, 2.1571555137634277, 2.132798194885254, 2.1086225509643555, 2.084635019302368, 2.0608420372009277, 2.0372507572174072, 2.0138678550720215, 1.9907010793685913, 1.9677577018737793, 1.945045828819275, 1.9225735664367676, 1.900349497795105, 1.8783823251724243, 1.8566813468933105, 1.8352558612823486, 1.8141156435012817, 1.7932708263397217, 1.7727317810058594, 1.752509355545044, 1.732614517211914, 1.7130587100982666, 1.693853735923767, 1.6750116348266602, 1.656544804573059, 1.6384658813476562, 1.6207878589630127, 1.6035239696502686, 1.5866878032684326, 1.5702930688858032, 1.5543537139892578, 1.5388840436935425, 1.5238981246948242, 1.5094106197357178, 1.4954357147216797, 1.4819881916046143, 1.4690823554992676, 1.4567327499389648, 1.4449535608291626, 1.4337587356567383, 1.4231622219085693, 1.4131773710250854, 1.4038172960281372, 1.395094633102417, 1.3870213031768799, 1.3796087503433228, 1.3728677034378052, 1.3668079376220703, 1.3614387512207031, 1.3567683696746826, 1.3528038263320923, 1.3495514392852783, 1.3470163345336914, 1.3452026844024658, 1.3441133499145508, 1.3125, 1.3128719329833984, 1.3139872550964355, 1.315843939781189, 1.3184388875961304, 1.3217679262161255, 1.3258252143859863, 1.3306043148040771, 1.3360973596572876, 1.34229576587677, 1.3491895198822021, 1.3567683696746826, 1.3650206327438354, 1.373934268951416, 1.3834965229034424, 1.3936939239501953, 1.4045127630233765, 1.4159388542175293, 1.4279574155807495, 1.4405537843704224, 1.4537129402160645, 1.4674196243286133, 1.481658697128296, 1.4964150190353394, 1.5116733312606812, 1.5274187326431274, 1.5436360836029053, 1.560310959815979, 1.5774286985397339, 1.5949749946594238, 1.612936019897461, 1.6312979459762573, 1.6500473022460938, 1.6691713333129883, 1.6886570453643799, 1.7084921598434448, 1.7286646366119385, 1.7491627931594849, 1.7699753046035767, 1.7910912036895752, 1.8125, 1.8341913223266602, 1.856155276298523, 1.8783823251724243, 1.9008632898330688, 1.9235892295837402, 1.9465514421463013, 1.9697418212890625, 1.993152379989624, 2.016775369644165, 2.0406033992767334, 2.064629554748535, 2.0888469219207764, 2.113248825073242, 2.137828826904297, 2.162581205368042, 2.1875, 2.2125794887542725, 2.23781418800354, 2.2631990909576416, 2.288729190826416, 2.314399480819702, 2.340205669403076, 2.366142988204956, 2.392207384109497, 2.366142988204956, 2.340205669403076, 2.314399480819702, 2.288729190826416, 2.2631990909576416, 2.23781418800354, 2.2125794887542725, 2.1875, 2.162581205368042, 2.137828826904297, 2.113248825073242, 2.0888469219207764, 2.064629554748535, 2.0406033992767334, 2.016775369644165, 1.993152379989624, 1.9697418212890625, 1.9465514421463013, 1.9235892295837402, 1.9008632898330688, 1.8783823251724243, 1.856155276298523, 1.8341913223266602, 1.8125, 1.7910912036895752, 1.7699753046035767, 1.7491627931594849, 1.7286646366119385, 1.7084921598434448, 1.6886570453643799, 1.6691713333129883, 1.6500473022460938, 1.6312979459762573, 1.612936019897461, 1.5949749946594238, 1.5774286985397339, 1.560310959815979, 1.5436360836029053, 1.5274187326431274, 1.5116733312606812, 1.4964150190353394, 1.481658697128296, 1.4674196243286133, 1.4537129402160645, 1.4405537843704224, 1.4279574155807495, 1.4159388542175293, 1.4045127630233765, 1.3936939239501953, 1.3834965229034424, 1.373934268951416, 1.3650206327438354, 1.3567683696746826, 1.3491895198822021, 1.34229576587677, 1.3360973596572876, 1.3306043148040771, 1.3258252143859863, 1.3217679262161255, 1.3184388875961304, 1.315843939781189, 1.3139872550964355, 1.3128719329833984, 1.28125, 1.2816309928894043, 1.282773494720459, 1.2846752405166626, 1.2873331308364868, 1.29074227809906, 1.2948968410491943, 1.2997896671295166, 1.3054124116897583, 1.3117557764053345, 1.3188092708587646, 1.3265615701675415, 1.3350006341934204, 1.3441133499145508, 1.3538862466812134, 1.364305019378662, 1.3753551244735718, 1.3870213031768799, 1.399288296699524, 1.4121404886245728, 1.425561785697937, 1.4395365715026855, 1.454048752784729, 1.4690823554992676, 1.4846216440200806, 1.5006508827209473, 1.5171544551849365, 1.5341172218322754, 1.5515239238739014, 1.5693598985671997, 1.5876107215881348, 1.60626220703125, 1.625300407409668, 1.644712209701538, 1.6644842624664307, 1.6846040487289429, 1.7050590515136719, 1.7258377075195312, 1.746928095817566, 1.7683192491531372, 1.7900004386901855, 1.8119611740112305, 1.8341913223266602, 1.8566813468933105, 1.8794218301773071, 1.9024039506912231, 1.9256187677383423, 1.9490582942962646, 1.9727143049240112, 1.9965790510177612, 2.0206453800201416, 2.0449059009552, 2.0693540573120117, 2.0939831733703613, 2.1187868118286133, 2.14375901222229, 2.168894052505493, 2.194186210632324, 2.219630002975464, 2.24522066116333, 2.2709527015686035, 2.2968218326568604, 2.3228232860565186, 2.348952531814575, 2.3752055168151855, 2.348952531814575, 2.3228232860565186, 2.2968218326568604, 2.2709527015686035, 2.24522066116333, 2.219630002975464, 2.194186210632324, 2.168894052505493, 2.14375901222229, 2.1187868118286133, 2.0939831733703613, 2.0693540573120117, 2.0449059009552, 2.0206453800201416, 1.9965790510177612, 1.9727143049240112, 1.9490582942962646, 1.9256187677383423, 1.9024039506912231, 1.8794218301773071, 1.8566813468933105, 1.8341913223266602, 1.8119611740112305, 1.7900004386901855, 1.7683192491531372, 1.746928095817566, 1.7258377075195312, 1.7050590515136719, 1.6846040487289429, 1.6644842624664307, 1.644712209701538, 1.625300407409668, 1.60626220703125, 1.5876107215881348, 1.5693598985671997, 1.5515239238739014, 1.5341172218322754, 1.5171544551849365, 1.5006508827209473, 1.4846216440200806, 1.4690823554992676, 1.454048752784729, 1.4395365715026855, 1.425561785697937, 1.4121404886245728, 1.399288296699524, 1.3870213031768799, 1.3753551244735718, 1.364305019378662, 1.3538862466812134, 1.3441133499145508, 1.3350006341934204, 1.3265615701675415, 1.3188092708587646, 1.3117557764053345, 1.3054124116897583, 1.2997896671295166, 1.2948968410491943, 1.29074227809906, 1.2873331308364868, 1.2846752405166626, 1.282773494720459, 1.2816309928894043, 1.25, 1.2503905296325684, 1.2515615224838257, 1.2535107135772705, 1.2562344074249268, 1.2597277164459229, 1.2639843225479126, 1.268996238708496, 1.2747548818588257, 1.28125, 1.2884705066680908, 1.296404242515564, 1.305038332939148, 1.3143588304519653, 1.3243513107299805, 1.3350006341934204, 1.346291184425354, 1.358207106590271, 1.370732069015503, 1.3838493824005127, 1.3975424766540527, 1.411794662475586, 1.426589012145996, 1.4419089555740356, 1.457737922668457, 1.4740595817565918, 1.4908576011657715, 1.5081160068511963, 1.5258194208145142, 1.543952465057373, 1.5625, 1.5814476013183594, 1.6007810831069946, 1.6204864978790283, 1.6405506134033203, 1.66096031665802, 1.681702971458435, 1.7027665376663208, 1.7241393327713013, 1.7458096742630005, 1.7677669525146484, 1.7900004386901855, 1.8125, 1.8352558612823486, 1.858258605003357, 1.881499171257019, 1.9049688577651978, 1.9286593198776245, 1.9525624513626099, 1.9766706228256226, 2.000976324081421, 2.025472640991211, 2.050152540206909, 2.075009346008301, 2.100037097930908, 2.125229835510254, 2.1505813598632812, 2.176086187362671, 2.2017393112182617, 2.2275354862213135, 2.253469467163086, 2.2795369625091553, 2.3057334423065186, 2.3320541381835938, 2.3584952354431152, 2.3320541381835938, 2.3057334423065186, 2.2795369625091553, 2.253469467163086, 2.2275354862213135, 2.2017393112182617, 2.176086187362671, 2.1505813598632812, 2.125229835510254, 2.100037097930908, 2.075009346008301, 2.050152540206909, 2.025472640991211, 2.000976324081421, 1.9766706228256226, 1.9525624513626099, 1.9286593198776245, 1.9049688577651978, 1.881499171257019, 1.858258605003357, 1.8352558612823486, 1.8125, 1.7900004386901855, 1.7677669525146484, 1.7458096742630005, 1.7241393327713013, 1.7027665376663208, 1.681702971458435, 1.66096031665802, 1.6405506134033203, 1.6204864978790283, 1.6007810831069946, 1.5814476013183594, 1.5625, 1.543952465057373, 1.5258194208145142, 1.5081160068511963, 1.4908576011657715, 1.4740595817565918, 1.457737922668457, 1.4419089555740356, 1.426589012145996, 1.411794662475586, 1.3975424766540527, 1.3838493824005127, 1.370732069015503, 1.358207106590271, 1.346291184425354, 1.3350006341934204, 1.3243513107299805, 1.3143588304519653, 1.305038332939148, 1.296404242515564, 1.2884705066680908, 1.28125, 1.2747548818588257, 1.268996238708496, 1.2639843225479126, 1.2597277164459229, 1.2562344074249268, 1.2535107135772705, 1.2515615224838257, 1.2503905296325684, 1.21875, 1.2191505432128906, 1.2203514575958252, 1.2223504781723022, 1.2251434326171875, 1.2287251949310303, 1.233088731765747, 1.2382258176803589, 1.244126796722412, 1.2507810592651367, 1.258176326751709, 1.2662999629974365, 1.2751379013061523, 1.2846752405166626, 1.2948968410491943, 1.305786371231079, 1.3173273801803589, 1.3295029401779175, 1.34229576587677, 1.355688214302063, 1.369662880897522, 1.3842021226882935, 1.399288296699524, 1.4149038791656494, 1.431031584739685, 1.447654366493225, 1.4647551774978638, 1.4823176860809326, 1.5003254413604736, 1.5187628269195557, 1.537614345550537, 1.556864857673645, 1.5764998197555542, 1.5965049266815186, 1.6168667078018188, 1.6375715732574463, 1.658606767654419, 1.679960012435913, 1.7016191482543945, 1.7235727310180664, 1.7458096742630005, 1.7683192491531372, 1.7910912036895752, 1.8141156435012817, 1.8373830318450928, 1.8608843088150024, 1.8846107721328735, 1.908553957939148, 1.9327057600021362, 1.9570585489273071, 1.981604814529419, 2.0063376426696777, 2.03125, 2.05633544921875, 2.081587791442871, 2.1070010662078857, 2.1325693130493164, 2.1582870483398438, 2.1841492652893066, 2.2101504802703857, 2.2362864017486572, 2.262551784515381, 2.288942575454712, 2.3154542446136475, 2.3420827388763428, 2.3154542446136475, 2.288942575454712, 2.262551784515381, 2.2362864017486572, 2.2101504802703857, 2.1841492652893066, 2.1582870483398438, 2.1325693130493164, 2.1070010662078857, 2.081587791442871, 2.05633544921875, 2.03125, 2.0063376426696777, 1.981604814529419, 1.9570585489273071, 1.9327057600021362, 1.908553957939148, 1.8846107721328735, 1.8608843088150024, 1.8373830318450928, 1.8141156435012817, 1.7910912036895752, 1.7683192491531372, 1.7458096742630005, 1.7235727310180664, 1.7016191482543945, 1.679960012435913, 1.658606767654419, 1.6375715732574463, 1.6168667078018188, 1.5965049266815186, 1.5764998197555542, 1.556864857673645, 1.537614345550537, 1.5187628269195557, 1.5003254413604736, 1.4823176860809326, 1.4647551774978638, 1.447654366493225, 1.431031584739685, 1.4149038791656494, 1.399288296699524, 1.3842021226882935, 1.369662880897522, 1.355688214302063, 1.34229576587677, 1.3295029401779175, 1.3173273801803589, 1.305786371231079, 1.2948968410491943, 1.2846752405166626, 1.2751379013061523, 1.2662999629974365, 1.258176326751709, 1.2507810592651367, 1.244126796722412, 1.2382258176803589, 1.233088731765747, 1.2287251949310303, 1.2251434326171875, 1.2223504781723022, 1.2203514575958252, 1.2191505432128906, 1.1875, 1.1879111528396606, 1.1891436576843262, 1.1911948919296265, 1.1940608024597168, 1.1977355480194092, 1.2022114992141724, 1.2074799537658691, 1.2135305404663086, 1.2203514575958252, 1.2279301881790161, 1.2362525463104248, 1.2453036308288574, 1.2550678253173828, 1.2655285596847534, 1.276668667793274, 1.2884705066680908, 1.3009161949157715, 1.3139872550964355, 1.3276653289794922, 1.341931939125061, 1.3567683696746826, 1.3721561431884766, 1.3880770206451416, 1.4045127630233765, 1.4214457273483276, 1.4388580322265625, 1.4567327499389648, 1.4750529527664185, 1.4938023090362549, 1.5129648447036743, 1.5325249433517456, 1.5524678230285645, 1.5727787017822266, 1.5934436321258545, 1.61444890499115, 1.6357815265655518, 1.6574288606643677, 1.679378628730774, 1.7016191482543945, 1.7241393327713013, 1.746928095817566, 1.7699753046035767, 1.7932708263397217, 1.8168052434921265, 1.840569257736206, 1.8645542860031128, 1.8887516260147095, 1.9131535291671753, 1.9377520084381104, 1.962539792060852, 1.987509846687317, 2.012655258178711, 2.0379695892333984, 2.0634467601776123, 2.089080572128296, 2.11486554145813, 2.140796184539795, 2.1668670177459717, 2.193073272705078, 2.2194101810455322, 2.245872974395752, 2.2724573612213135, 2.299159049987793, 2.325974225997925, 2.299159049987793, 2.2724573612213135, 2.245872974395752, 2.2194101810455322, 2.193073272705078, 2.1668670177459717, 2.140796184539795, 2.11486554145813, 2.089080572128296, 2.0634467601776123, 2.0379695892333984, 2.012655258178711, 1.987509846687317, 1.962539792060852, 1.9377520084381104, 1.9131535291671753, 1.8887516260147095, 1.8645542860031128, 1.840569257736206, 1.8168052434921265, 1.7932708263397217, 1.7699753046035767, 1.746928095817566, 1.7241393327713013, 1.7016191482543945, 1.679378628730774, 1.6574288606643677, 1.6357815265655518, 1.61444890499115, 1.5934436321258545, 1.5727787017822266, 1.5524678230285645, 1.5325249433517456, 1.5129648447036743, 1.4938023090362549, 1.4750529527664185, 1.4567327499389648, 1.4388580322265625, 1.4214457273483276, 1.4045127630233765, 1.3880770206451416, 1.3721561431884766, 1.3567683696746826, 1.341931939125061, 1.3276653289794922, 1.3139872550964355, 1.3009161949157715, 1.2884705066680908, 1.276668667793274, 1.2655285596847534, 1.2550678253173828, 1.2453036308288574, 1.2362525463104248, 1.2279301881790161, 1.2203514575958252, 1.2135305404663086, 1.2074799537658691, 1.2022114992141724, 1.1977355480194092, 1.1940608024597168, 1.1911948919296265, 1.1891436576843262, 1.1879111528396606, 1.15625, 1.1566722393035889, 1.157938003540039, 1.1600444316864014, 1.1629871129989624, 1.1667596101760864, 1.171354055404663, 1.1767606735229492, 1.1829683780670166, 1.1899645328521729, 1.1977355480194092, 1.206266164779663, 1.2155406475067139, 1.2255419492721558, 1.2362525463104248, 1.2476540803909302, 1.2597277164459229, 1.2724546194076538, 1.2858150005340576, 1.2997896671295166, 1.3143588304519653, 1.3295029401779175, 1.3452026844024658, 1.3614387512207031, 1.3781923055648804, 1.395444631576538, 1.4131773710250854, 1.4313727617263794, 1.450013518333435, 1.4690823554992676, 1.4885631799697876, 1.5084397792816162, 1.528696894645691, 1.5493193864822388, 1.5702930688858032, 1.5916039943695068, 1.6132386922836304, 1.635184407234192, 1.6574288606643677, 1.679960012435913, 1.7027665376663208, 1.7258377075195312, 1.7491627931594849, 1.7727317810058594, 1.7965352535247803, 1.8205639123916626, 1.8448090553283691, 1.8692620992660522, 1.893915057182312, 1.9187601804733276, 1.9437901973724365, 1.9689979553222656, 1.9943768978118896, 2.0199203491210938, 2.0456223487854004, 2.071476697921753, 2.097477912902832, 2.1236209869384766, 2.149899959564209, 2.1763107776641846, 2.202847957611084, 2.2295074462890625, 2.256284713745117, 2.283175468444824, 2.310176134109497, 2.283175468444824, 2.256284713745117, 2.2295074462890625, 2.202847957611084, 2.1763107776641846, 2.149899959564209, 2.1236209869384766, 2.097477912902832, 2.071476697921753, 2.0456223487854004, 2.0199203491210938, 1.9943768978118896, 1.9689979553222656, 1.9437901973724365, 1.9187601804733276, 1.893915057182312, 1.8692620992660522, 1.8448090553283691, 1.8205639123916626, 1.7965352535247803, 1.7727317810058594, 1.7491627931594849, 1.7258377075195312, 1.7027665376663208, 1.679960012435913, 1.6574288606643677, 1.635184407234192, 1.6132386922836304, 1.5916039943695068, 1.5702930688858032, 1.5493193864822388, 1.528696894645691, 1.5084397792816162, 1.4885631799697876, 1.4690823554992676, 1.450013518333435, 1.4313727617263794, 1.4131773710250854, 1.395444631576538, 1.3781923055648804, 1.3614387512207031, 1.3452026844024658, 1.3295029401779175, 1.3143588304519653, 1.2997896671295166, 1.2858150005340576, 1.2724546194076538, 1.2597277164459229, 1.2476540803909302, 1.2362525463104248, 1.2255419492721558, 1.2155406475067139, 1.206266164779663, 1.1977355480194092, 1.1899645328521729, 1.1829683780670166, 1.1767606735229492, 1.171354055404663, 1.1667596101760864, 1.1629871129989624, 1.1600444316864014, 1.157938003540039, 1.1566722393035889, 1.125, 1.1254339218139648, 1.126734733581543, 1.1288994550704956, 1.1319231986999512, 1.1357988119125366, 1.1405179500579834, 1.1460700035095215, 1.1524430513381958, 1.1596235036849976, 1.1675963401794434, 1.1763455867767334, 1.1858540773391724, 1.1961036920547485, 1.2070754766464233, 1.21875, 1.231107234954834, 1.244126796722412, 1.2577881813049316, 1.2720707654953003, 1.2869538068771362, 1.3024166822433472, 1.3184388875961304, 1.3350006341934204, 1.3520817756652832, 1.369662880897522, 1.3877252340316772, 1.40625, 1.4252192974090576, 1.4446154832839966, 1.4644218683242798, 1.4846216440200806, 1.5051993131637573, 1.5261393785476685, 1.5474272966384888, 1.5690487623214722, 1.5909903049468994, 1.6132386922836304, 1.6357815265655518, 1.658606767654419, 1.681702971458435, 1.7050590515136719, 1.7286646366119385, 1.752509355545044, 1.7765837907791138, 1.800878643989563, 1.8253852128982544, 1.8500950336456299, 1.875, 1.9000924825668335, 1.9253652095794678, 1.9508111476898193, 1.9764235019683838, 2.0021960735321045, 2.028122663497925, 2.054197311401367, 2.0804145336151123, 2.106769323348999, 2.133255958557129, 2.159870147705078, 2.1866068840026855, 2.2134621143341064, 2.240431070327759, 2.267509937286377, 2.2946949005126953, 2.267509937286377, 2.240431070327759, 2.2134621143341064, 2.1866068840026855, 2.159870147705078, 2.133255958557129, 2.106769323348999, 2.0804145336151123, 2.054197311401367, 2.028122663497925, 2.0021960735321045, 1.9764235019683838, 1.9508111476898193, 1.9253652095794678, 1.9000924825668335, 1.875, 1.8500950336456299, 1.8253852128982544, 1.800878643989563, 1.7765837907791138, 1.752509355545044, 1.7286646366119385, 1.7050590515136719, 1.681702971458435, 1.658606767654419, 1.6357815265655518, 1.6132386922836304, 1.5909903049468994, 1.5690487623214722, 1.5474272966384888, 1.5261393785476685, 1.5051993131637573, 1.4846216440200806, 1.4644218683242798, 1.4446154832839966, 1.4252192974090576, 1.40625, 1.3877252340316772, 1.369662880897522, 1.3520817756652832, 1.3350006341934204, 1.3184388875961304, 1.3024166822433472, 1.2869538068771362, 1.2720707654953003, 1.2577881813049316, 1.244126796722412, 1.231107234954834, 1.21875, 1.2070754766464233, 1.1961036920547485, 1.1858540773391724, 1.1763455867767334, 1.1675963401794434, 1.1596235036849976, 1.1524430513381958, 1.1460700035095215, 1.1405179500579834, 1.1357988119125366, 1.1319231986999512, 1.1288994550704956, 1.126734733581543, 1.1254339218139648, 1.09375, 1.0941963195800781, 1.0955342054367065, 1.097760558128357, 1.1008696556091309, 1.1048543453216553, 1.1097050905227661, 1.115410566329956, 1.1219576597213745, 1.1293319463729858, 1.1375172138214111, 1.146496057510376, 1.15625, 1.1667596101760864, 1.1780048608779907, 1.1899645328521729, 1.2026176452636719, 1.2159422636032104, 1.2299168109893799, 1.2445192337036133, 1.2597277164459229, 1.2755206823349, 1.2918766736984253, 1.308774471282959, 1.3261934518814087, 1.3441133499145508, 1.3625143766403198, 1.3813772201538086, 1.4006834030151367, 1.4204148054122925, 1.4405537843704224, 1.4610837697982788, 1.4819881916046143, 1.5032516717910767, 1.524859070777893, 1.5467960834503174, 1.5690487623214722, 1.5916039943695068, 1.61444890499115, 1.6375715732574463, 1.66096031665802, 1.6846040487289429, 1.7084921598434448, 1.732614517211914, 1.7569615840911865, 1.7815240621566772, 1.806293249130249, 1.8312606811523438, 1.8564183712005615, 1.881758689880371, 1.9072743654251099, 1.9329583644866943, 1.9588042497634888, 1.9848055839538574, 2.010956287384033, 2.0372507572174072, 2.063683271408081, 2.0902488231658936, 2.1169424057006836, 2.14375901222229, 2.170694351196289, 2.1977438926696777, 2.2249033451080322, 2.252169132232666, 2.2795369625091553, 2.252169132232666, 2.2249033451080322, 2.1977438926696777, 2.170694351196289, 2.14375901222229, 2.1169424057006836, 2.0902488231658936, 2.063683271408081, 2.0372507572174072, 2.010956287384033, 1.9848055839538574, 1.9588042497634888, 1.9329583644866943, 1.9072743654251099, 1.881758689880371, 1.8564183712005615, 1.8312606811523438, 1.806293249130249, 1.7815240621566772, 1.7569615840911865, 1.732614517211914, 1.7084921598434448, 1.6846040487289429, 1.66096031665802, 1.6375715732574463, 1.61444890499115, 1.5916039943695068, 1.5690487623214722, 1.5467960834503174, 1.524859070777893, 1.5032516717910767, 1.4819881916046143, 1.4610837697982788, 1.4405537843704224, 1.4204148054122925, 1.4006834030151367, 1.3813772201538086, 1.3625143766403198, 1.3441133499145508, 1.3261934518814087, 1.308774471282959, 1.2918766736984253, 1.2755206823349, 1.2597277164459229, 1.2445192337036133, 1.2299168109893799, 1.2159422636032104, 1.2026176452636719, 1.1899645328521729, 1.1780048608779907, 1.1667596101760864, 1.15625, 1.146496057510376, 1.1375172138214111, 1.1293319463729858, 1.1219576597213745, 1.115410566329956, 1.1097050905227661, 1.1048543453216553, 1.1008696556091309, 1.097760558128357, 1.0955342054367065, 1.0941963195800781, 1.0625, 1.0629594326019287, 1.0643366575241089, 1.0666279792785645, 1.069827675819397, 1.0739275217056274, 1.0789172649383545, 1.0847846269607544, 1.0915155410766602, 1.099094033241272, 1.107502818107605, 1.1167230606079102, 1.126734733581543, 1.1375172138214111, 1.1490485668182373, 1.1613065004348755, 1.174268364906311, 1.1879111528396606, 1.2022114992141724, 1.217146396636963, 1.2326927185058594, 1.248827576637268, 1.2655285596847534, 1.282773494720459, 1.300540804862976, 1.3188092708587646, 1.337558388710022, 1.3567683696746826, 1.3764196634292603, 1.396493911743164, 1.4169729948043823, 1.4378396272659302, 1.45907723903656, 1.4806697368621826, 1.5026018619537354, 1.524859070777893, 1.5474272966384888, 1.5702930688858032, 1.5934436321258545, 1.6168667078018188, 1.6405506134033203, 1.6644842624664307, 1.6886570453643799, 1.7130587100982666, 1.7376798391342163, 1.762511134147644, 1.7875436544418335, 1.8127694129943848, 1.8381801843643188, 1.863768458366394, 1.8895270824432373, 1.9154491424560547, 1.941528081893921, 1.9677577018737793, 1.9941320419311523, 2.0206453800201416, 2.047292470932007, 2.0740678310394287, 2.1009669303894043, 2.1279850006103516, 2.1551175117492676, 2.1823599338531494, 2.2097086906433105, 2.237159490585327, 2.2647087574005127, 2.237159490585327, 2.2097086906433105, 2.1823599338531494, 2.1551175117492676, 2.1279850006103516, 2.1009669303894043, 2.0740678310394287, 2.047292470932007, 2.0206453800201416, 1.9941320419311523, 1.9677577018737793, 1.941528081893921, 1.9154491424560547, 1.8895270824432373, 1.863768458366394, 1.8381801843643188, 1.8127694129943848, 1.7875436544418335, 1.762511134147644, 1.7376798391342163, 1.7130587100982666, 1.6886570453643799, 1.6644842624664307, 1.6405506134033203, 1.6168667078018188, 1.5934436321258545, 1.5702930688858032, 1.5474272966384888, 1.524859070777893, 1.5026018619537354, 1.4806697368621826, 1.45907723903656, 1.4378396272659302, 1.4169729948043823, 1.396493911743164, 1.3764196634292603, 1.3567683696746826, 1.337558388710022, 1.3188092708587646, 1.300540804862976, 1.282773494720459, 1.2655285596847534, 1.248827576637268, 1.2326927185058594, 1.217146396636963, 1.2022114992141724, 1.1879111528396606, 1.174268364906311, 1.1613065004348755, 1.1490485668182373, 1.1375172138214111, 1.126734733581543, 1.1167230606079102, 1.107502818107605, 1.099094033241272, 1.0915155410766602, 1.0847846269607544, 1.0789172649383545, 1.0739275217056274, 1.069827675819397, 1.0666279792785645, 1.0643366575241089, 1.0629594326019287, 1.03125, 1.0317233800888062, 1.0331422090530396, 1.035502552986145, 1.0387980937957764, 1.0430200099945068, 1.0481568574905396, 1.054195523262024, 1.0611203908920288, 1.0689144134521484, 1.0775587558746338, 1.0870329141616821, 1.0973156690597534, 1.1083842515945435, 1.1202155351638794, 1.1327855587005615, 1.1460700035095215, 1.1600444316864014, 1.1746841669082642, 1.1899645328521729, 1.2058613300323486, 1.2223504781723022, 1.239408254623413, 1.2570115327835083, 1.2751379013061523, 1.2937650680541992, 1.3128719329833984, 1.3324378728866577, 1.3524428606033325, 1.3728677034378052, 1.3936939239501953, 1.4149038791656494, 1.4364806413650513, 1.4584077596664429, 1.4806697368621826, 1.5032516717910767, 1.5261393785476685, 1.5493193864822388, 1.5727787017822266, 1.5965049266815186, 1.6204864978790283, 1.644712209701538, 1.6691713333129883, 1.693853735923767, 1.71875, 1.743850827217102, 1.769147515296936, 1.7946317195892334, 1.8202956914901733, 1.8461319208145142, 1.8721332550048828, 1.8982927799224854, 1.9246042966842651, 1.9510613679885864, 1.9776583909988403, 2.004389762878418, 2.03125, 2.058234214782715, 2.0853376388549805, 2.112555503845215, 2.139883518218994, 2.1673176288604736, 2.1948537826538086, 2.2224881649017334, 2.2502169609069824, 2.2224881649017334, 2.1948537826538086, 2.1673176288604736, 2.139883518218994, 2.112555503845215, 2.0853376388549805, 2.058234214782715, 2.03125, 2.004389762878418, 1.9776583909988403, 1.9510613679885864, 1.9246042966842651, 1.8982927799224854, 1.8721332550048828, 1.8461319208145142, 1.8202956914901733, 1.7946317195892334, 1.769147515296936, 1.743850827217102, 1.71875, 1.693853735923767, 1.6691713333129883, 1.644712209701538, 1.6204864978790283, 1.5965049266815186, 1.5727787017822266, 1.5493193864822388, 1.5261393785476685, 1.5032516717910767, 1.4806697368621826, 1.4584077596664429, 1.4364806413650513, 1.4149038791656494, 1.3936939239501953, 1.3728677034378052, 1.3524428606033325, 1.3324378728866577, 1.3128719329833984, 1.2937650680541992, 1.2751379013061523, 1.2570115327835083, 1.239408254623413, 1.2223504781723022, 1.2058613300323486, 1.1899645328521729, 1.1746841669082642, 1.1600444316864014, 1.1460700035095215, 1.1327855587005615, 1.1202155351638794, 1.1083842515945435, 1.0973156690597534, 1.0870329141616821, 1.0775587558746338, 1.0689144134521484, 1.0611203908920288, 1.054195523262024, 1.0481568574905396, 1.0430200099945068, 1.0387980937957764, 1.035502552986145, 1.0331422090530396, 1.0317233800888062, 1.0, 1.0004881620407104, 1.0019512176513672, 1.0043848752975464, 1.007782220840454, 1.0121334791183472, 1.0174262523651123, 1.0236462354660034, 1.0307763814926147, 1.0387980937957764, 1.0476908683776855, 1.057432770729065, 1.0680004358291626, 1.0793697834014893, 1.0915155410766602, 1.104412317276001, 1.1180340051651, 1.1323543787002563, 1.1473474502563477, 1.1629871129989624, 1.1792476177215576, 1.1961036920547485, 1.2135305404663086, 1.2315037250518799, 1.25, 1.268996238708496, 1.2884705066680908, 1.308401346206665, 1.328768253326416, 1.3495514392852783, 1.370732069015503, 1.392291784286499, 1.4142135381698608, 1.4364806413650513, 1.45907723903656, 1.4819881916046143, 1.5051993131637573, 1.528696894645691, 1.5524678230285645, 1.5764998197555542, 1.6007810831069946, 1.625300407409668, 1.6500473022460938, 1.6750116348266602, 1.7001838684082031, 1.7255547046661377, 1.7511156797409058, 1.7768585681915283, 1.8027756214141846, 1.8288593292236328, 1.855102777481079, 1.881499171257019, 1.9080421924591064, 1.9347258806228638, 1.961544394493103, 1.9884922504425049, 2.015564441680908, 2.0427558422088623, 2.0700619220733643, 2.097477912902832, 2.125, 2.1526236534118652, 2.1803455352783203, 2.2081613540649414, 2.2360680103302, 2.2081613540649414, 2.1803455352783203, 2.1526236534118652, 2.125, 2.097477912902832, 2.0700619220733643, 2.0427558422088623, 2.015564441680908, 1.9884922504425049, 1.961544394493103, 1.9347258806228638, 1.9080421924591064, 1.881499171257019, 1.855102777481079, 1.8288593292236328, 1.8027756214141846, 1.7768585681915283, 1.7511156797409058, 1.7255547046661377, 1.7001838684082031, 1.6750116348266602, 1.6500473022460938, 1.625300407409668, 1.6007810831069946, 1.5764998197555542, 1.5524678230285645, 1.528696894645691, 1.5051993131637573, 1.4819881916046143, 1.45907723903656, 1.4364806413650513, 1.4142135381698608, 1.392291784286499, 1.370732069015503, 1.3495514392852783, 1.328768253326416, 1.308401346206665, 1.2884705066680908, 1.268996238708496, 1.25, 1.2315037250518799, 1.2135305404663086, 1.1961036920547485, 1.1792476177215576, 1.1629871129989624, 1.1473474502563477, 1.1323543787002563, 1.1180340051651, 1.104412317276001, 1.0915155410766602, 1.0793697834014893, 1.0680004358291626, 1.057432770729065, 1.0476908683776855, 1.0387980937957764, 1.0307763814926147, 1.0236462354660034, 1.0174262523651123, 1.0121334791183472, 1.007782220840454, 1.0043848752975464, 1.0019512176513672, 1.0004881620407104, 0.96875, 0.9692538976669312, 0.9707640409469604, 0.9732757210731506, 0.9767812490463257, 0.981269896030426, 0.986728310585022, 0.9931405186653137, 1.0004881620407104, 1.0087507963180542, 1.0179060697555542, 1.0279302597045898, 1.0387980937957764, 1.0504834651947021, 1.0629594326019287, 1.0761984586715698, 1.0901727676391602, 1.1048543453216553, 1.1202155351638794, 1.1362286806106567, 1.1528667211532593, 1.170102834701538, 1.1879111528396606, 1.206266164779663, 1.2251434326171875, 1.2445192337036133, 1.2643705606460571, 1.2846752405166626, 1.3054124116897583, 1.3265615701675415, 1.348103404045105, 1.3700194358825684, 1.392291784286499, 1.4149038791656494, 1.4378396272659302, 1.4610837697982788, 1.4846216440200806, 1.5084397792816162, 1.5325249433517456, 1.556864857673645, 1.5814476013183594, 1.60626220703125, 1.6312979459762573, 1.656544804573059, 1.6819933652877808, 1.7076345682144165, 1.7334598302841187, 1.7594610452651978, 1.7856305837631226, 1.8119611740112305, 1.838445782661438, 1.8650779724121094, 1.8918513059616089, 1.9187601804733276, 1.9457987546920776, 1.9729617834091187, 2.000244140625, 2.0276410579681396, 2.055147886276245, 2.0827603340148926, 2.1104743480682373, 2.1382856369018555, 2.1661908626556396, 2.194186210632324, 2.2222683429718018, 2.194186210632324, 2.1661908626556396, 2.1382856369018555, 2.1104743480682373, 2.0827603340148926, 2.055147886276245, 2.0276410579681396, 2.000244140625, 1.9729617834091187, 1.9457987546920776, 1.9187601804733276, 1.8918513059616089, 1.8650779724121094, 1.838445782661438, 1.8119611740112305, 1.7856305837631226, 1.7594610452651978, 1.7334598302841187, 1.7076345682144165, 1.6819933652877808, 1.656544804573059, 1.6312979459762573, 1.60626220703125, 1.5814476013183594, 1.556864857673645, 1.5325249433517456, 1.5084397792816162, 1.4846216440200806, 1.4610837697982788, 1.4378396272659302, 1.4149038791656494, 1.392291784286499, 1.3700194358825684, 1.348103404045105, 1.3265615701675415, 1.3054124116897583, 1.2846752405166626, 1.2643705606460571, 1.2445192337036133, 1.2251434326171875, 1.206266164779663, 1.1879111528396606, 1.170102834701538, 1.1528667211532593, 1.1362286806106567, 1.1202155351638794, 1.1048543453216553, 1.0901727676391602, 1.0761984586715698, 1.0629594326019287, 1.0504834651947021, 1.0387980937957764, 1.0279302597045898, 1.0179060697555542, 1.0087507963180542, 1.0004881620407104, 0.9931405186653137, 0.986728310585022, 0.981269896030426, 0.9767812490463257, 0.9732757210731506, 0.9707640409469604, 0.9692538976669312, 0.9375, 0.9380207061767578, 0.939581036567688, 0.9421758651733398, 0.9457966089248657, 0.9504316449165344, 0.9560661315917969, 0.9626826047897339, 0.9702609181404114, 0.9787787199020386, 0.9882117509841919, 0.998534083366394, 1.009718418121338, 1.0217363834381104, 1.0345591306686401, 1.0481568574905396, 1.0625, 1.0775587558746338, 1.0933034420013428, 1.1097050905227661, 1.126734733581543, 1.144364595413208, 1.1625672578811646, 1.1813161373138428, 1.2005858421325684, 1.2203514575958252, 1.2405896186828613, 1.261277198791504, 1.2823927402496338, 1.3039153814315796, 1.3258252143859863, 1.348103404045105, 1.370732069015503, 1.3936939239501953, 1.4169729948043823, 1.4405537843704224, 1.4644218683242798, 1.4885631799697876, 1.5129648447036743, 1.537614345550537, 1.5625, 1.5876107215881348, 1.612936019897461, 1.6384658813476562, 1.6641908884048462, 1.690102219581604, 1.716191291809082, 1.74245023727417, 1.7688714265823364, 1.795447826385498, 1.8221725225448608, 1.849039077758789, 1.8760414123535156, 1.903173804283142, 1.9304306507110596, 1.957806944847107, 1.9852975606918335, 2.0128979682922363, 2.0406033992767334, 2.0684101581573486, 2.096313714981079, 2.1243104934692383, 2.1523969173431396, 2.1805694103240967, 2.208824634552002, 2.1805694103240967, 2.1523969173431396, 2.1243104934692383, 2.096313714981079, 2.0684101581573486, 2.0406033992767334, 2.0128979682922363, 1.9852975606918335, 1.957806944847107, 1.9304306507110596, 1.903173804283142, 1.8760414123535156, 1.849039077758789, 1.8221725225448608, 1.795447826385498, 1.7688714265823364, 1.74245023727417, 1.716191291809082, 1.690102219581604, 1.6641908884048462, 1.6384658813476562, 1.612936019897461, 1.5876107215881348, 1.5625, 1.537614345550537, 1.5129648447036743, 1.4885631799697876, 1.4644218683242798, 1.4405537843704224, 1.4169729948043823, 1.3936939239501953, 1.370732069015503, 1.348103404045105, 1.3258252143859863, 1.3039153814315796, 1.2823927402496338, 1.261277198791504, 1.2405896186828613, 1.2203514575958252, 1.2005858421325684, 1.1813161373138428, 1.1625672578811646, 1.144364595413208, 1.126734733581543, 1.1097050905227661, 1.0933034420013428, 1.0775587558746338, 1.0625, 1.0481568574905396, 1.0345591306686401, 1.0217363834381104, 1.009718418121338, 0.998534083366394, 0.9882117509841919, 0.9787787199020386, 0.9702609181404114, 0.9626826047897339, 0.9560661315917969, 0.9504316449165344, 0.9457966089248657, 0.9421758651733398, 0.939581036567688, 0.9380207061767578, 0.90625, 0.9067886471748352, 0.9084026217460632, 0.9110862612724304, 0.9148300886154175, 0.9196211695671082, 0.9254432916641235, 0.9322771430015564, 0.9401005506515503, 0.9488891363143921, 0.9586163759231567, 0.9692538976669312, 0.9807721972465515, 0.9931405186653137, 1.0063276290893555, 1.0203016996383667, 1.0350309610366821, 1.0504834651947021, 1.0666279792785645, 1.0834335088729858, 1.1008696556091309, 1.11890709400177, 1.1375172138214111, 1.1566722393035889, 1.1763455867767334, 1.1965118646621704, 1.217146396636963, 1.2382258176803589, 1.2597277164459229, 1.2816309928894043, 1.3039153814315796, 1.3265615701675415, 1.3495514392852783, 1.3728677034378052, 1.396493911743164, 1.4204148054122925, 1.4446154832839966, 1.4690823554992676, 1.4938023090362549, 1.5187628269195557, 1.543952465057373, 1.5693598985671997, 1.5949749946594238, 1.6207878589630127, 1.6467890739440918, 1.6729698181152344, 1.699321985244751, 1.7258377075195312, 1.752509355545044, 1.7793301343917847, 1.806293249130249, 1.8333925008773804, 1.8606219291687012, 1.8879759311676025, 1.9154491424560547, 1.943036437034607, 1.9707331657409668, 1.9985345602035522, 2.0264365673065186, 2.0544350147247314, 2.0825259685516357, 2.110705614089966, 2.1389706134796143, 2.1673176288604736, 2.1957433223724365, 2.1673176288604736, 2.1389706134796143, 2.110705614089966, 2.0825259685516357, 2.0544350147247314, 2.0264365673065186, 1.9985345602035522, 1.9707331657409668, 1.943036437034607, 1.9154491424560547, 1.8879759311676025, 1.8606219291687012, 1.8333925008773804, 1.806293249130249, 1.7793301343917847, 1.752509355545044, 1.7258377075195312, 1.699321985244751, 1.6729698181152344, 1.6467890739440918, 1.6207878589630127, 1.5949749946594238, 1.5693598985671997, 1.543952465057373, 1.5187628269195557, 1.4938023090362549, 1.4690823554992676, 1.4446154832839966, 1.4204148054122925, 1.396493911743164, 1.3728677034378052, 1.3495514392852783, 1.3265615701675415, 1.3039153814315796, 1.2816309928894043, 1.2597277164459229, 1.2382258176803589, 1.217146396636963, 1.1965118646621704, 1.1763455867767334, 1.1566722393035889, 1.1375172138214111, 1.11890709400177, 1.1008696556091309, 1.0834335088729858, 1.0666279792785645, 1.0504834651947021, 1.0350309610366821, 1.0203016996383667, 1.0063276290893555, 0.9931405186653137, 0.9807721972465515, 0.9692538976669312, 0.9586163759231567, 0.9488891363143921, 0.9401005506515503, 0.9322771430015564, 0.9254432916641235, 0.9196211695671082, 0.9148300886154175, 0.9110862612724304, 0.9084026217460632, 0.9067886471748352, 0.875, 0.8755578398704529, 0.8772292733192444, 0.8800079822540283, 0.8838834762573242, 0.8888413906097412, 0.8948638439178467, 0.9019293785095215, 0.910013735294342, 0.9190900921821594, 0.9291293025016785, 0.9401005506515503, 0.9519716501235962, 0.9647093415260315, 0.9782797694206238, 0.9926487803459167, 1.007782220840454, 1.0236462354660034, 1.0402072668075562, 1.057432770729065, 1.0752906799316406, 1.09375, 1.1127808094024658, 1.1323543787002563, 1.1524430513381958, 1.1730202436447144, 1.1940608024597168, 1.2155406475067139, 1.2374368906021118, 1.2597277164459229, 1.2823927402496338, 1.3054124116897583, 1.328768253326416, 1.3524428606033325, 1.3764196634292603, 1.4006834030151367, 1.4252192974090576, 1.450013518333435, 1.4750529527664185, 1.5003254413604736, 1.5258194208145142, 1.5515239238739014, 1.5774286985397339, 1.6035239696502686, 1.62980055809021, 1.65625, 1.6828639507293701, 1.7096349000930786, 1.7365554571151733, 1.76361882686615, 1.7908185720443726, 1.8181484937667847, 1.8456028699874878, 1.8731762170791626, 1.9008632898330688, 1.9286593198776245, 1.9565595388412476, 1.9845595359802246, 2.012655258178711, 2.0408427715301514, 2.0691182613372803, 2.097477912902832, 2.1259188652038574, 2.15443754196167, 2.1830310821533203, 2.15443754196167, 2.1259188652038574, 2.097477912902832, 2.0691182613372803, 2.0408427715301514, 2.012655258178711, 1.9845595359802246, 1.9565595388412476, 1.9286593198776245, 1.9008632898330688, 1.8731762170791626, 1.8456028699874878, 1.8181484937667847, 1.7908185720443726, 1.76361882686615, 1.7365554571151733, 1.7096349000930786, 1.6828639507293701, 1.65625, 1.62980055809021, 1.6035239696502686, 1.5774286985397339, 1.5515239238739014, 1.5258194208145142, 1.5003254413604736, 1.4750529527664185, 1.450013518333435, 1.4252192974090576, 1.4006834030151367, 1.3764196634292603, 1.3524428606033325, 1.328768253326416, 1.3054124116897583, 1.2823927402496338, 1.2597277164459229, 1.2374368906021118, 1.2155406475067139, 1.1940608024597168, 1.1730202436447144, 1.1524430513381958, 1.1323543787002563, 1.1127808094024658, 1.09375, 1.0752906799316406, 1.057432770729065, 1.0402072668075562, 1.0236462354660034, 1.007782220840454, 0.9926487803459167, 0.9782797694206238, 0.9647093415260315, 0.9519716501235962, 0.9401005506515503, 0.9291293025016785, 0.9190900921821594, 0.910013735294342, 0.9019293785095215, 0.8948638439178467, 0.8888413906097412, 0.8838834762573242, 0.8800079822540283, 0.8772292733192444, 0.8755578398704529, 0.84375, 0.8443285226821899, 0.846061646938324, 0.8489423394203186, 0.8529589772224426, 0.858095645904541, 0.8643323183059692, 0.8716453313827515, 0.8800079822540283, 0.8893905878067017, 0.8997612595558167, 0.9110862612724304, 0.9233304262161255, 0.9364577531814575, 0.9504316449165344, 0.9652153253555298, 0.9807721972465515, 0.9970660209655762, 1.0140613317489624, 1.0317233800888062, 1.050018548965454, 1.0689144134521484, 1.0883796215057373, 1.1083842515945435, 1.1288994550704956, 1.1498980522155762, 1.171354055404663, 1.1932426691055298, 1.2155406475067139, 1.2382258176803589, 1.261277198791504, 1.2846752405166626, 1.308401346206665, 1.3324378728866577, 1.3567683696746826, 1.3813772201538086, 1.40625, 1.4313727617263794, 1.4567327499389648, 1.4823176860809326, 1.5081160068511963, 1.5341172218322754, 1.560310959815979, 1.5866878032684326, 1.6132386922836304, 1.6399551630020142, 1.6668294668197632, 1.693853735923767, 1.7210211753845215, 1.7483251094818115, 1.7757591009140015, 1.8033173084259033, 1.8309940099716187, 1.8587840795516968, 1.886682391166687, 1.9146841764450073, 1.9427851438522339, 1.9709808826446533, 1.9992674589157104, 2.0276410579681396, 2.056097984313965, 2.084635019302368, 2.113248825073242, 2.1419363021850586, 2.170694351196289, 2.1419363021850586, 2.113248825073242, 2.084635019302368, 2.056097984313965, 2.0276410579681396, 1.9992674589157104, 1.9709808826446533, 1.9427851438522339, 1.9146841764450073, 1.886682391166687, 1.8587840795516968, 1.8309940099716187, 1.8033173084259033, 1.7757591009140015, 1.7483251094818115, 1.7210211753845215, 1.693853735923767, 1.6668294668197632, 1.6399551630020142, 1.6132386922836304, 1.5866878032684326, 1.560310959815979, 1.5341172218322754, 1.5081160068511963, 1.4823176860809326, 1.4567327499389648, 1.4313727617263794, 1.40625, 1.3813772201538086, 1.3567683696746826, 1.3324378728866577, 1.308401346206665, 1.2846752405166626, 1.261277198791504, 1.2382258176803589, 1.2155406475067139, 1.1932426691055298, 1.171354055404663, 1.1498980522155762, 1.1288994550704956, 1.1083842515945435, 1.0883796215057373, 1.0689144134521484, 1.050018548965454, 1.0317233800888062, 1.0140613317489624, 0.9970660209655762, 0.9807721972465515, 0.9652153253555298, 0.9504316449165344, 0.9364577531814575, 0.9233304262161255, 0.9110862612724304, 0.8997612595558167, 0.8893905878067017, 0.8800079822540283, 0.8716453313827515, 0.8643323183059692, 0.858095645904541, 0.8529589772224426, 0.8489423394203186, 0.846061646938324, 0.8443285226821899, 0.8125, 0.8131007552146912, 0.814900279045105, 0.8178907632827759, 0.822059154510498, 0.8273876309394836, 0.8338540196418762, 0.8414319753646851, 0.8500919342041016, 0.8598010540008545, 0.8705242872238159, 0.8822246193885803, 0.8948638439178467, 0.9084026217460632, 0.9228014349937439, 0.9380207061767578, 0.9540210962295532, 0.9707640409469604, 0.9882117509841919, 1.0063276290893555, 1.0250762701034546, 1.0444234609603882, 1.0643366575241089, 1.0847846269607544, 1.1057379245758057, 1.12716805934906, 1.1490485668182373, 1.171354055404663, 1.1940608024597168, 1.217146396636963, 1.2405896186828613, 1.2643705606460571, 1.2884705066680908, 1.3128719329833984, 1.337558388710022, 1.3625143766403198, 1.3877252340316772, 1.4131773710250854, 1.4388580322265625, 1.4647551774978638, 1.4908576011657715, 1.5171544551849365, 1.5436360836029053, 1.5702930688858032, 1.5971165895462036, 1.624098300933838, 1.6512305736541748, 1.6785061359405518, 1.7059179544448853, 1.7334598302841187, 1.7611253261566162, 1.7889089584350586, 1.8168052434921265, 1.8448090553283691, 1.872915506362915, 1.9011201858520508, 1.929418683052063, 1.957806944847107, 1.9862810373306274, 2.0148375034332275, 2.0434727668762207, 2.072183609008789, 2.1009669303894043, 2.129819869995117, 2.1587395668029785, 2.129819869995117, 2.1009669303894043, 2.072183609008789, 2.0434727668762207, 2.0148375034332275, 1.9862810373306274, 1.957806944847107, 1.929418683052063, 1.9011201858520508, 1.872915506362915, 1.8448090553283691, 1.8168052434921265, 1.7889089584350586, 1.7611253261566162, 1.7334598302841187, 1.7059179544448853, 1.6785061359405518, 1.6512305736541748, 1.624098300933838, 1.5971165895462036, 1.5702930688858032, 1.5436360836029053, 1.5171544551849365, 1.4908576011657715, 1.4647551774978638, 1.4388580322265625, 1.4131773710250854, 1.3877252340316772, 1.3625143766403198, 1.337558388710022, 1.3128719329833984, 1.2884705066680908, 1.2643705606460571, 1.2405896186828613, 1.217146396636963, 1.1940608024597168, 1.171354055404663, 1.1490485668182373, 1.12716805934906, 1.1057379245758057, 1.0847846269607544, 1.0643366575241089, 1.0444234609603882, 1.0250762701034546, 1.0063276290893555, 0.9882117509841919, 0.9707640409469604, 0.9540210962295532, 0.9380207061767578, 0.9228014349937439, 0.9084026217460632, 0.8948638439178467, 0.8822246193885803, 0.8705242872238159, 0.8598010540008545, 0.8500919342041016, 0.8414319753646851, 0.8338540196418762, 0.8273876309394836, 0.822059154510498, 0.8178907632827759, 0.814900279045105, 0.8131007552146912, 0.78125, 0.7818747758865356, 0.7837460041046143, 0.7868549227714539, 0.7911868095397949, 0.7967218160629272, 0.8034350275993347, 0.8112971782684326, 0.8202753067016602, 0.8303331136703491, 0.8414319753646851, 0.8535312414169312, 0.8665890097618103, 0.8805626630783081, 0.8954092860221863, 0.9110862612724304, 0.9275513887405396, 0.9447635412216187, 0.9626826047897339, 0.981269896030426, 1.0004881620407104, 1.0203016996383667, 1.0406765937805176, 1.0615805387496948, 1.0829826593399048, 1.1048543453216553, 1.12716805934906, 1.1498980522155762, 1.1730202436447144, 1.1965118646621704, 1.2203514575958252, 1.2445192337036133, 1.268996238708496, 1.2937650680541992, 1.3188092708587646, 1.3441133499145508, 1.369662880897522, 1.395444631576538, 1.4214457273483276, 1.447654366493225, 1.4740595817565918, 1.5006508827209473, 1.5274187326431274, 1.5543537139892578, 1.5814476013183594, 1.6086921691894531, 1.636080026626587, 1.6636039018630981, 1.691257357597351, 1.7190340757369995, 1.746928095817566, 1.774933934211731, 1.803046464920044, 1.8312606811523438, 1.859571933746338, 1.8879759311676025, 1.9164685010910034, 1.945045828819275, 1.9737040996551514, 2.0024399757385254, 2.03125, 2.060131311416626, 2.089080572128296, 2.1180953979492188, 2.1471729278564453, 2.1180953979492188, 2.089080572128296, 2.060131311416626, 2.03125, 2.0024399757385254, 1.9737040996551514, 1.945045828819275, 1.9164685010910034, 1.8879759311676025, 1.859571933746338, 1.8312606811523438, 1.803046464920044, 1.774933934211731, 1.746928095817566, 1.7190340757369995, 1.691257357597351, 1.6636039018630981, 1.636080026626587, 1.6086921691894531, 1.5814476013183594, 1.5543537139892578, 1.5274187326431274, 1.5006508827209473, 1.4740595817565918, 1.447654366493225, 1.4214457273483276, 1.395444631576538, 1.369662880897522, 1.3441133499145508, 1.3188092708587646, 1.2937650680541992, 1.268996238708496, 1.2445192337036133, 1.2203514575958252, 1.1965118646621704, 1.1730202436447144, 1.1498980522155762, 1.12716805934906, 1.1048543453216553, 1.0829826593399048, 1.0615805387496948, 1.0406765937805176, 1.0203016996383667, 1.0004881620407104, 0.981269896030426, 0.9626826047897339, 0.9447635412216187, 0.9275513887405396, 0.9110862612724304, 0.8954092860221863, 0.8805626630783081, 0.8665890097618103, 0.8535312414169312, 0.8414319753646851, 0.8303331136703491, 0.8202753067016602, 0.8112971782684326, 0.8034350275993347, 0.7967218160629272, 0.7911868095397949, 0.7868549227714539, 0.7837460041046143, 0.7818747758865356, 0.75, 0.7506507635116577, 0.7525996565818787, 0.7558366656303406, 0.7603453397750854, 0.7661031484603882, 0.7730823159217834, 0.78125, 0.7905694246292114, 0.8010003566741943, 0.8125, 0.8250236511230469, 0.8385254740715027, 0.8529589772224426, 0.8682777285575867, 0.8844357132911682, 0.9013878107070923, 0.9190900921821594, 0.9375, 0.9565767645835876, 0.9762812256813049, 0.996576189994812, 1.0174262523651123, 1.0387980937957764, 1.0606601238250732, 1.0829826593399048, 1.1057379245758057, 1.1288994550704956, 1.1524430513381958, 1.1763455867767334, 1.2005858421325684, 1.2251434326171875, 1.25, 1.2751379013061523, 1.300540804862976, 1.3261934518814087, 1.3520817756652832, 1.3781923055648804, 1.4045127630233765, 1.431031584739685, 1.457737922668457, 1.4846216440200806, 1.5116733312606812, 1.5388840436935425, 1.5662455558776855, 1.59375, 1.6213902235031128, 1.64915931224823, 1.6770509481430054, 1.7050590515136719, 1.7331780195236206, 1.7614026069641113, 1.7897276878356934, 1.8181484937667847, 1.846660852432251, 1.875260353088379, 1.9039433002471924, 1.9327057600021362, 1.961544394493103, 1.9904557466506958, 2.019436836242676, 2.0484845638275146, 2.0775961875915527, 2.106769323348999, 2.136000871658325, 2.106769323348999, 2.0775961875915527, 2.0484845638275146, 2.019436836242676, 1.9904557466506958, 1.961544394493103, 1.9327057600021362, 1.9039433002471924, 1.875260353088379, 1.846660852432251, 1.8181484937667847, 1.7897276878356934, 1.7614026069641113, 1.7331780195236206, 1.7050590515136719, 1.6770509481430054, 1.64915931224823, 1.6213902235031128, 1.59375, 1.5662455558776855, 1.5388840436935425, 1.5116733312606812, 1.4846216440200806, 1.457737922668457, 1.431031584739685, 1.4045127630233765, 1.3781923055648804, 1.3520817756652832, 1.3261934518814087, 1.300540804862976, 1.2751379013061523, 1.25, 1.2251434326171875, 1.2005858421325684, 1.1763455867767334, 1.1524430513381958, 1.1288994550704956, 1.1057379245758057, 1.0829826593399048, 1.0606601238250732, 1.0387980937957764, 1.0174262523651123, 0.996576189994812, 0.9762812256813049, 0.9565767645835876, 0.9375, 0.9190900921821594, 0.9013878107070923, 0.8844357132911682, 0.8682777285575867, 0.8529589772224426, 0.8385254740715027, 0.8250236511230469, 0.8125, 0.8010003566741943, 0.7905694246292114, 0.78125, 0.7730823159217834, 0.7661031484603882, 0.7603453397750854, 0.7558366656303406, 0.7525996565818787, 0.7506507635116577, 0.71875, 0.7194290161132812, 0.7214622497558594, 0.7248383164405823, 0.72953861951828, 0.7355376482009888, 0.7428039908409119, 0.7513009309768677, 0.7609872221946716, 0.7718180418014526, 0.7837460041046143, 0.7967218160629272, 0.8106951117515564, 0.8256152868270874, 0.8414319753646851, 0.858095645904541, 0.8755578398704529, 0.8937718272209167, 0.9126926064491272, 0.9322771430015564, 0.9524844288825989, 0.9732757210731506, 0.9946144223213196, 1.0164660215377808, 1.0387980937957764, 1.0615805387496948, 1.0847846269607544, 1.1083842515945435, 1.1323543787002563, 1.1566722393035889, 1.1813161373138428, 1.206266164779663, 1.2315037250518799, 1.2570115327835083, 1.282773494720459, 1.308774471282959, 1.3350006341934204, 1.3614387512207031, 1.3880770206451416, 1.4149038791656494, 1.4419089555740356, 1.4690823554992676, 1.4964150190353394, 1.5238981246948242, 1.5515239238739014, 1.5792847871780396, 1.6071738004684448, 1.635184407234192, 1.6633104085922241, 1.691546082496643, 1.7198859453201294, 1.7483251094818115, 1.7768585681915283, 1.8054821491241455, 1.8341913223266602, 1.8629822731018066, 1.8918513059616089, 1.92079496383667, 1.9498096704483032, 1.9788925647735596, 2.008040428161621, 2.0372507572174072, 2.0665206909179688, 2.0958478450775146, 2.125229835510254, 2.0958478450775146, 2.0665206909179688, 2.0372507572174072, 2.008040428161621, 1.9788925647735596, 1.9498096704483032, 1.92079496383667, 1.8918513059616089, 1.8629822731018066, 1.8341913223266602, 1.8054821491241455, 1.7768585681915283, 1.7483251094818115, 1.7198859453201294, 1.691546082496643, 1.6633104085922241, 1.635184407234192, 1.6071738004684448, 1.5792847871780396, 1.5515239238739014, 1.5238981246948242, 1.4964150190353394, 1.4690823554992676, 1.4419089555740356, 1.4149038791656494, 1.3880770206451416, 1.3614387512207031, 1.3350006341934204, 1.308774471282959, 1.282773494720459, 1.2570115327835083, 1.2315037250518799, 1.206266164779663, 1.1813161373138428, 1.1566722393035889, 1.1323543787002563, 1.1083842515945435, 1.0847846269607544, 1.0615805387496948, 1.0387980937957764, 1.0164660215377808, 0.9946144223213196, 0.9732757210731506, 0.9524844288825989, 0.9322771430015564, 0.9126926064491272, 0.8937718272209167, 0.8755578398704529, 0.858095645904541, 0.8414319753646851, 0.8256152868270874, 0.8106951117515564, 0.7967218160629272, 0.7837460041046143, 0.7718180418014526, 0.7609872221946716, 0.7513009309768677, 0.7428039908409119, 0.7355376482009888, 0.72953861951828, 0.7248383164405823, 0.7214622497558594, 0.7194290161132812, 0.6875, 0.6882098317146301, 0.6903350353240967, 0.6938626170158386, 0.6987712383270264, 0.7050321102142334, 0.7126096487045288, 0.7214622497558594, 0.7315437197685242, 0.7428039908409119, 0.755190372467041, 0.7686483860015869, 0.7831227779388428, 0.7985582947731018, 0.814900279045105, 0.8320954442024231, 0.8500919342041016, 0.8688399195671082, 0.8882918953895569, 0.9084026217460632, 0.9291293025016785, 0.9504316449165344, 0.9722718000411987, 0.9946144223213196, 1.0174262523651123, 1.0406765937805176, 1.0643366575241089, 1.0883796215057373, 1.1127808094024658, 1.1375172138214111, 1.1625672578811646, 1.1879111528396606, 1.2135305404663086, 1.239408254623413, 1.2655285596847534, 1.2918766736984253, 1.3184388875961304, 1.3452026844024658, 1.3721561431884766, 1.399288296699524, 1.426589012145996, 1.454048752784729, 1.481658697128296, 1.5094106197357178, 1.5372967720031738, 1.565310001373291, 1.5934436321258545, 1.621691346168518, 1.6500473022460938, 1.6785061359405518, 1.7070624828338623, 1.7357118129730225, 1.7644492387771606, 1.7932708263397217, 1.8221725225448608, 1.851150393486023, 1.8802011013031006, 1.9093213081359863, 1.9385077953338623, 1.9677577018737793, 1.997068166732788, 2.0264365673065186, 2.0558605194091797, 2.0853376388549805, 2.11486554145813, 2.0853376388549805, 2.0558605194091797, 2.0264365673065186, 1.997068166732788, 1.9677577018737793, 1.9385077953338623, 1.9093213081359863, 1.8802011013031006, 1.851150393486023, 1.8221725225448608, 1.7932708263397217, 1.7644492387771606, 1.7357118129730225, 1.7070624828338623, 1.6785061359405518, 1.6500473022460938, 1.621691346168518, 1.5934436321258545, 1.565310001373291, 1.5372967720031738, 1.5094106197357178, 1.481658697128296, 1.454048752784729, 1.426589012145996, 1.399288296699524, 1.3721561431884766, 1.3452026844024658, 1.3184388875961304, 1.2918766736984253, 1.2655285596847534, 1.239408254623413, 1.2135305404663086, 1.1879111528396606, 1.1625672578811646, 1.1375172138214111, 1.1127808094024658, 1.0883796215057373, 1.0643366575241089, 1.0406765937805176, 1.0174262523651123, 0.9946144223213196, 0.9722718000411987, 0.9504316449165344, 0.9291293025016785, 0.9084026217460632, 0.8882918953895569, 0.8688399195671082, 0.8500919342041016, 0.8320954442024231, 0.814900279045105, 0.7985582947731018, 0.7831227779388428, 0.7686483860015869, 0.755190372467041, 0.7428039908409119, 0.7315437197685242, 0.7214622497558594, 0.7126096487045288, 0.7050321102142334, 0.6987712383270264, 0.6938626170158386, 0.6903350353240967, 0.6882098317146301, 0.65625, 0.6569936275482178, 0.6592194437980652, 0.6629126071929932, 0.6680486798286438, 0.6745947599411011, 0.6825103163719177, 0.6917482614517212, 0.7022563815116882, 0.7139787077903748, 0.7268564701080322, 0.740829348564148, 0.7558366656303406, 0.7718180418014526, 0.7887143492698669, 0.8064680099487305, 0.8250236511230469, 0.8443285226821899, 0.8643323183059692, 0.8849876523017883, 0.90625, 0.9280776381492615, 0.9504316449165344, 0.9732757210731506, 0.996576189994812, 1.0203016996383667, 1.0444234609603882, 1.0689144134521484, 1.09375, 1.11890709400177, 1.144364595413208, 1.170102834701538, 1.1961036920547485, 1.2223504781723022, 1.248827576637268, 1.2755206823349, 1.3024166822433472, 1.3295029401779175, 1.3567683696746826, 1.3842021226882935, 1.411794662475586, 1.4395365715026855, 1.4674196243286133, 1.4954357147216797, 1.5235776901245117, 1.5518386363983154, 1.580212116241455, 1.6086921691894531, 1.6372733116149902, 1.6659504175186157, 1.694718360900879, 1.7235727310180664, 1.752509355545044, 1.7815240621566772, 1.8106132745742798, 1.8397732973098755, 1.869000792503357, 1.8982927799224854, 1.927646279335022, 1.9570585489273071, 1.9865268468856812, 2.0160489082336426, 2.0456223487854004, 2.075244665145874, 2.1049141883850098, 2.075244665145874, 2.0456223487854004, 2.0160489082336426, 1.9865268468856812, 1.9570585489273071, 1.927646279335022, 1.8982927799224854, 1.869000792503357, 1.8397732973098755, 1.8106132745742798, 1.7815240621566772, 1.752509355545044, 1.7235727310180664, 1.694718360900879, 1.6659504175186157, 1.6372733116149902, 1.6086921691894531, 1.580212116241455, 1.5518386363983154, 1.5235776901245117, 1.4954357147216797, 1.4674196243286133, 1.4395365715026855, 1.411794662475586, 1.3842021226882935, 1.3567683696746826, 1.3295029401779175, 1.3024166822433472, 1.2755206823349, 1.248827576637268, 1.2223504781723022, 1.1961036920547485, 1.170102834701538, 1.144364595413208, 1.11890709400177, 1.09375, 1.0689144134521484, 1.0444234609603882, 1.0203016996383667, 0.996576189994812, 0.9732757210731506, 0.9504316449165344, 0.9280776381492615, 0.90625, 0.8849876523017883, 0.8643323183059692, 0.8443285226821899, 0.8250236511230469, 0.8064680099487305, 0.7887143492698669, 0.7718180418014526, 0.7558366656303406, 0.740829348564148, 0.7268564701080322, 0.7139787077903748, 0.7022563815116882, 0.6917482614517212, 0.6825103163719177, 0.6745947599411011, 0.6680486798286438, 0.6629126071929932, 0.6592194437980652, 0.6569936275482178, 0.625, 0.6257807612419128, 0.6281172037124634, 0.6319921612739563, 0.6373774409294128, 0.6442352533340454, 0.652519166469574, 0.6621756553649902, 0.673145592212677, 0.6853660345077515, 0.6987712383270264, 0.713294506072998, 0.7288689613342285, 0.7454288005828857, 0.7629097104072571, 0.78125, 0.8003905415534973, 0.8202753067016602, 0.8408514857292175, 0.8620696663856506, 0.8838834762573242, 0.90625, 0.9291293025016785, 0.9524844288825989, 0.9762812256813049, 1.0004881620407104, 1.0250762701034546, 1.050018548965454, 1.0752906799316406, 1.1008696556091309, 1.126734733581543, 1.1528667211532593, 1.1792476177215576, 1.2058613300323486, 1.2326927185058594, 1.2597277164459229, 1.2869538068771362, 1.3143588304519653, 1.341931939125061, 1.369662880897522, 1.3975424766540527, 1.425561785697937, 1.4537129402160645, 1.4819881916046143, 1.510380744934082, 1.5388840436935425, 1.5674920082092285, 1.5961991548538208, 1.625, 1.653889775276184, 1.6828639507293701, 1.7119182348251343, 1.7410485744476318, 1.7702511548995972, 1.7995225191116333, 1.8288593292236328, 1.858258605003357, 1.8877172470092773, 1.9172327518463135, 1.9468022584915161, 1.9764235019683838, 2.006094217300415, 2.0358121395111084, 2.065575361251831, 2.095381736755371, 2.065575361251831, 2.0358121395111084, 2.006094217300415, 1.9764235019683838, 1.9468022584915161, 1.9172327518463135, 1.8877172470092773, 1.858258605003357, 1.8288593292236328, 1.7995225191116333, 1.7702511548995972, 1.7410485744476318, 1.7119182348251343, 1.6828639507293701, 1.653889775276184, 1.625, 1.5961991548538208, 1.5674920082092285, 1.5388840436935425, 1.510380744934082, 1.4819881916046143, 1.4537129402160645, 1.425561785697937, 1.3975424766540527, 1.369662880897522, 1.341931939125061, 1.3143588304519653, 1.2869538068771362, 1.2597277164459229, 1.2326927185058594, 1.2058613300323486, 1.1792476177215576, 1.1528667211532593, 1.126734733581543, 1.1008696556091309, 1.0752906799316406, 1.050018548965454, 1.0250762701034546, 1.0004881620407104, 0.9762812256813049, 0.9524844288825989, 0.9291293025016785, 0.90625, 0.8838834762573242, 0.8620696663856506, 0.8408514857292175, 0.8202753067016602, 0.8003905415534973, 0.78125, 0.7629097104072571, 0.7454288005828857, 0.7288689613342285, 0.713294506072998, 0.6987712383270264, 0.6853660345077515, 0.673145592212677, 0.6621756553649902, 0.652519166469574, 0.6442352533340454, 0.6373774409294128, 0.6319921612739563, 0.6281172037124634, 0.6257807612419128, 0.59375, 0.5945718288421631, 0.5970304012298584, 0.6011057496070862, 0.6067652702331543, 0.6139650940895081, 0.6226518154144287, 0.6327642798423767, 0.6442352533340454, 0.6569936275482178, 0.6709659695625305, 0.6860780715942383, 0.7022563815116882, 0.7194290161132812, 0.7375264763832092, 0.7564824223518372, 0.7762339115142822, 0.7967218160629272, 0.8178907632827759, 0.839689314365387, 0.8620696663856506, 0.8849876523017883, 0.9084026217460632, 0.9322771430015564, 0.9565767645835876, 0.981269896030426, 1.0063276290893555, 1.0317233800888062, 1.057432770729065, 1.0834335088729858, 1.1097050905227661, 1.1362286806106567, 1.1629871129989624, 1.1899645328521729, 1.217146396636963, 1.2445192337036133, 1.2720707654953003, 1.2997896671295166, 1.3276653289794922, 1.355688214302063, 1.3838493824005127, 1.4121404886245728, 1.4405537843704224, 1.4690823554992676, 1.497719645500183, 1.5264593362808228, 1.5552959442138672, 1.584223985671997, 1.6132386922836304, 1.6423354148864746, 1.671509861946106, 1.7007580995559692, 1.7300763130187988, 1.7594610452651978, 1.7889089584350586, 1.8184170722961426, 1.847982406616211, 1.8776023387908936, 1.9072743654251099, 1.9369958639144897, 1.9667649269104004, 1.9965790510177612, 2.0264365673065186, 2.05633544921875, 2.0862739086151123, 2.05633544921875, 2.0264365673065186, 1.9965790510177612, 1.9667649269104004, 1.9369958639144897, 1.9072743654251099, 1.8776023387908936, 1.847982406616211, 1.8184170722961426, 1.7889089584350586, 1.7594610452651978, 1.7300763130187988, 1.7007580995559692, 1.671509861946106, 1.6423354148864746, 1.6132386922836304, 1.584223985671997, 1.5552959442138672, 1.5264593362808228, 1.497719645500183, 1.4690823554992676, 1.4405537843704224, 1.4121404886245728, 1.3838493824005127, 1.355688214302063, 1.3276653289794922, 1.2997896671295166, 1.2720707654953003, 1.2445192337036133, 1.217146396636963, 1.1899645328521729, 1.1629871129989624, 1.1362286806106567, 1.1097050905227661, 1.0834335088729858, 1.057432770729065, 1.0317233800888062, 1.0063276290893555, 0.981269896030426, 0.9565767645835876, 0.9322771430015564, 0.9084026217460632, 0.8849876523017883, 0.8620696663856506, 0.839689314365387, 0.8178907632827759, 0.7967218160629272, 0.7762339115142822, 0.7564824223518372, 0.7375264763832092, 0.7194290161132812, 0.7022563815116882, 0.6860780715942383, 0.6709659695625305, 0.6569936275482178, 0.6442352533340454, 0.6327642798423767, 0.6226518154144287, 0.6139650940895081, 0.6067652702331543, 0.6011057496070862, 0.5970304012298584, 0.5945718288421631, 0.5625, 0.5633673667907715, 0.5659615993499756, 0.5702589750289917, 0.5762215256690979, 0.5837981700897217, 0.5929270386695862, 0.6035377383232117, 0.615553617477417, 0.6288940906524658, 0.6434769034385681, 0.6592194437980652, 0.6760408878326416, 0.6938626170158386, 0.7126096487045288, 0.7322109341621399, 0.7525996565818787, 0.7737136483192444, 0.7954951524734497, 0.8178907632827759, 0.8408514857292175, 0.8643323183059692, 0.8882918953895569, 0.9126926064491272, 0.9375, 0.9626826047897339, 0.9882117509841919, 1.0140613317489624, 1.0402072668075562, 1.0666279792785645, 1.0933034420013428, 1.1202155351638794, 1.1473474502563477, 1.1746841669082642, 1.2022114992141724, 1.2299168109893799, 1.2577881813049316, 1.2858150005340576, 1.3139872550964355, 1.34229576587677, 1.370732069015503, 1.399288296699524, 1.4279574155807495, 1.4567327499389648, 1.4856079816818237, 1.5145776271820068, 1.5436360836029053, 1.5727787017822266, 1.6020007133483887, 1.6312979459762573, 1.6606662273406982, 1.690102219581604, 1.719602108001709, 1.7491627931594849, 1.7787811756134033, 1.8084545135498047, 1.8381801843643188, 1.8679555654525757, 1.8977782726287842, 1.927646279335022, 1.9575574398040771, 1.987509846687317, 2.0175015926361084, 2.0475308895111084, 2.0775961875915527, 2.0475308895111084, 2.0175015926361084, 1.987509846687317, 1.9575574398040771, 1.927646279335022, 1.8977782726287842, 1.8679555654525757, 1.8381801843643188, 1.8084545135498047, 1.7787811756134033, 1.7491627931594849, 1.719602108001709, 1.690102219581604, 1.6606662273406982, 1.6312979459762573, 1.6020007133483887, 1.5727787017822266, 1.5436360836029053, 1.5145776271820068, 1.4856079816818237, 1.4567327499389648, 1.4279574155807495, 1.399288296699524, 1.370732069015503, 1.34229576587677, 1.3139872550964355, 1.2858150005340576, 1.2577881813049316, 1.2299168109893799, 1.2022114992141724, 1.1746841669082642, 1.1473474502563477, 1.1202155351638794, 1.0933034420013428, 1.0666279792785645, 1.0402072668075562, 1.0140613317489624, 0.9882117509841919, 0.9626826047897339, 0.9375, 0.9126926064491272, 0.8882918953895569, 0.8643323183059692, 0.8408514857292175, 0.8178907632827759, 0.7954951524734497, 0.7737136483192444, 0.7525996565818787, 0.7322109341621399, 0.7126096487045288, 0.6938626170158386, 0.6760408878326416, 0.6592194437980652, 0.6434769034385681, 0.6288940906524658, 0.615553617477417, 0.6035377383232117, 0.5929270386695862, 0.5837981700897217, 0.5762215256690979, 0.5702589750289917, 0.5659615993499756, 0.5633673667907715, 0.53125, 0.5321683287620544, 0.5349138379096985, 0.5394586324691772, 0.5457577705383301, 0.5537514090538025, 0.5633673667907715, 0.5745242834091187, 0.5871341824531555, 0.6011057496070862, 0.6163463592529297, 0.6327642798423767, 0.650270402431488, 0.668779194355011, 0.6882098317146301, 0.7084864974021912, 0.72953861951828, 0.7513009309768677, 0.7737136483192444, 0.7967218160629272, 0.8202753067016602, 0.8443285226821899, 0.8688399195671082, 0.8937718272209167, 0.9190900921821594, 0.9447635412216187, 0.9707640409469604, 0.9970660209655762, 1.0236462354660034, 1.0504834651947021, 1.0775587558746338, 1.1048543453216553, 1.1323543787002563, 1.1600444316864014, 1.1879111528396606, 1.2159422636032104, 1.244126796722412, 1.2724546194076538, 1.3009161949157715, 1.3295029401779175, 1.358207106590271, 1.3870213031768799, 1.4159388542175293, 1.4449535608291626, 1.4740595817565918, 1.5032516717910767, 1.5325249433517456, 1.5618748664855957, 1.5912971496582031, 1.6207878589630127, 1.6503432989120483, 1.679960012435913, 1.7096349000930786, 1.7393649816513062, 1.769147515296936, 1.7989797592163086, 1.8288593292236328, 1.8587840795516968, 1.8887516260147095, 1.9187601804733276, 1.948807716369629, 1.9788925647735596, 2.0090129375457764, 2.0391671657562256, 2.0693540573120117, 2.0391671657562256, 2.0090129375457764, 1.9788925647735596, 1.948807716369629, 1.9187601804733276, 1.8887516260147095, 1.8587840795516968, 1.8288593292236328, 1.7989797592163086, 1.769147515296936, 1.7393649816513062, 1.7096349000930786, 1.679960012435913, 1.6503432989120483, 1.6207878589630127, 1.5912971496582031, 1.5618748664855957, 1.5325249433517456, 1.5032516717910767, 1.4740595817565918, 1.4449535608291626, 1.4159388542175293, 1.3870213031768799, 1.358207106590271, 1.3295029401779175, 1.3009161949157715, 1.2724546194076538, 1.244126796722412, 1.2159422636032104, 1.1879111528396606, 1.1600444316864014, 1.1323543787002563, 1.1048543453216553, 1.0775587558746338, 1.0504834651947021, 1.0236462354660034, 0.9970660209655762, 0.9707640409469604, 0.9447635412216187, 0.9190900921821594, 0.8937718272209167, 0.8688399195671082, 0.8443285226821899, 0.8202753067016602, 0.7967218160629272, 0.7737136483192444, 0.7513009309768677, 0.72953861951828, 0.7084864974021912, 0.6882098317146301, 0.668779194355011, 0.650270402431488, 0.6327642798423767, 0.6163463592529297, 0.6011057496070862, 0.5871341824531555, 0.5745242834091187, 0.5633673667907715, 0.5537514090538025, 0.5457577705383301, 0.5394586324691772, 0.5349138379096985, 0.5321683287620544, 0.5, 0.5009756088256836, 0.503891110420227, 0.5087131261825562, 0.5153881907463074, 0.5238454341888428, 0.5340002179145813, 0.5457577705383301, 0.55901700258255, 0.5736737251281738, 0.5896238088607788, 0.6067652702331543, 0.625, 0.6442352533340454, 0.664384126663208, 0.6853660345077515, 0.7071067690849304, 0.72953861951828, 0.7525996565818787, 0.7762339115142822, 0.8003905415534973, 0.8250236511230469, 0.8500919342041016, 0.8755578398704529, 0.9013878107070923, 0.9275513887405396, 0.9540210962295532, 0.9807721972465515, 1.007782220840454, 1.0350309610366821, 1.0625, 1.0901727676391602, 1.1180340051651, 1.1460700035095215, 1.174268364906311, 1.2026176452636719, 1.231107234954834, 1.2597277164459229, 1.2884705066680908, 1.3173273801803589, 1.346291184425354, 1.3753551244735718, 1.4045127630233765, 1.4337587356567383, 1.4630874395370483, 1.4924942255020142, 1.5219744443893433, 1.5515239238739014, 1.5811388492584229, 1.6108155250549316, 1.6405506134033203, 1.6703410148620605, 1.7001838684082031, 1.7300763130187988, 1.7600159645080566, 1.7900004386901855, 1.820027470588684, 1.8500950336456299, 1.8802011013031006, 1.9103440046310425, 1.9405218362808228, 1.9707331657409668, 2.000976324081421, 2.03125, 2.0615527629852295, 2.03125, 2.000976324081421, 1.9707331657409668, 1.9405218362808228, 1.9103440046310425, 1.8802011013031006, 1.8500950336456299, 1.820027470588684, 1.7900004386901855, 1.7600159645080566, 1.7300763130187988, 1.7001838684082031, 1.6703410148620605, 1.6405506134033203, 1.6108155250549316, 1.5811388492584229, 1.5515239238739014, 1.5219744443893433, 1.4924942255020142, 1.4630874395370483, 1.4337587356567383, 1.4045127630233765, 1.3753551244735718, 1.346291184425354, 1.3173273801803589, 1.2884705066680908, 1.2597277164459229, 1.231107234954834, 1.2026176452636719, 1.174268364906311, 1.1460700035095215, 1.1180340051651, 1.0901727676391602, 1.0625, 1.0350309610366821, 1.007782220840454, 0.9807721972465515, 0.9540210962295532, 0.9275513887405396, 0.9013878107070923, 0.8755578398704529, 0.8500919342041016, 0.8250236511230469, 0.8003905415534973, 0.7762339115142822, 0.7525996565818787, 0.72953861951828, 0.7071067690849304, 0.6853660345077515, 0.664384126663208, 0.6442352533340454, 0.625, 0.6067652702331543, 0.5896238088607788, 0.5736737251281738, 0.55901700258255, 0.5457577705383301, 0.5340002179145813, 0.5238454341888428, 0.5153881907463074, 0.5087131261825562, 0.503891110420227, 0.5009756088256836, 0.46875, 0.469790518283844, 0.47289830446243286, 0.47803306579589844, 0.4851304590702057, 0.49410587549209595, 0.504859209060669, 0.5172795653343201, 0.53125, 0.5466517210006714, 0.5633673667907715, 0.5812836289405823, 0.6002929210662842, 0.6202948093414307, 0.6411963701248169, 0.6629126071929932, 0.6853660345077515, 0.7084864974021912, 0.7322109341621399, 0.7564824223518372, 0.78125, 0.8064680099487305, 0.8320954442024231, 0.858095645904541, 0.8844357132911682, 0.9110862612724304, 0.9380207061767578, 0.9652153253555298, 0.9926487803459167, 1.0203016996383667, 1.0481568574905396, 1.0761984586715698, 1.104412317276001, 1.1327855587005615, 1.1613065004348755, 1.1899645328521729, 1.21875, 1.2476540803909302, 1.276668667793274, 1.305786371231079, 1.3350006341934204, 1.364305019378662, 1.3936939239501953, 1.4231622219085693, 1.452704906463623, 1.4823176860809326, 1.5119962692260742, 1.5417370796203613, 1.5715364217758179, 1.6013909578323364, 1.6312979459762573, 1.6612542867660522, 1.691257357597351, 1.7213048934936523, 1.751394510269165, 1.7815240621566772, 1.8116916418075562, 1.8418952226638794, 1.8721332550048828, 1.9024039506912231, 1.9327057600021362, 1.963037371635437, 1.9933973550796509, 2.0237843990325928, 2.054197311401367, 2.0237843990325928, 1.9933973550796509, 1.963037371635437, 1.9327057600021362, 1.9024039506912231, 1.8721332550048828, 1.8418952226638794, 1.8116916418075562, 1.7815240621566772, 1.751394510269165, 1.7213048934936523, 1.691257357597351, 1.6612542867660522, 1.6312979459762573, 1.6013909578323364, 1.5715364217758179, 1.5417370796203613, 1.5119962692260742, 1.4823176860809326, 1.452704906463623, 1.4231622219085693, 1.3936939239501953, 1.364305019378662, 1.3350006341934204, 1.305786371231079, 1.276668667793274, 1.2476540803909302, 1.21875, 1.1899645328521729, 1.1613065004348755, 1.1327855587005615, 1.104412317276001, 1.0761984586715698, 1.0481568574905396, 1.0203016996383667, 0.9926487803459167, 0.9652153253555298, 0.9380207061767578, 0.9110862612724304, 0.8844357132911682, 0.858095645904541, 0.8320954442024231, 0.8064680099487305, 0.78125, 0.7564824223518372, 0.7322109341621399, 0.7084864974021912, 0.6853660345077515, 0.6629126071929932, 0.6411963701248169, 0.6202948093414307, 0.6002929210662842, 0.5812836289405823, 0.5633673667907715, 0.5466517210006714, 0.53125, 0.5172795653343201, 0.504859209060669, 0.49410587549209595, 0.4851304590702057, 0.47803306579589844, 0.47289830446243286, 0.469790518283844, 0.4375, 0.4386146366596222, 0.4419417381286621, 0.44743192195892334, 0.455006867647171, 0.46456465125083923, 0.4759858250617981, 0.4891398847103119, 0.503891110420227, 0.5201036334037781, 0.5376453399658203, 0.5563904047012329, 0.5762215256690979, 0.5970304012298584, 0.6187184453010559, 0.6411963701248169, 0.664384126663208, 0.6882098317146301, 0.7126096487045288, 0.7375264763832092, 0.7629097104072571, 0.7887143492698669, 0.814900279045105, 0.8414319753646851, 0.8682777285575867, 0.8954092860221863, 0.9228014349937439, 0.9504316449165344, 0.9782797694206238, 1.0063276290893555, 1.0345591306686401, 1.0629594326019287, 1.0915155410766602, 1.1202155351638794, 1.1490485668182373, 1.1780048608779907, 1.2070754766464233, 1.2362525463104248, 1.2655285596847534, 1.2948968410491943, 1.3243513107299805, 1.3538862466812134, 1.3834965229034424, 1.4131773710250854, 1.4429244995117188, 1.472733974456787, 1.5026018619537354, 1.5325249433517456, 1.5625, 1.5925240516662598, 1.6225943565368652, 1.6527085304260254, 1.6828639507293701, 1.7130587100982666, 1.743290662765503, 1.7735579013824463, 1.803858757019043, 1.8341913223266602, 1.8645542860031128, 1.8949459791183472, 1.9253652095794678, 1.9558106660842896, 1.9862810373306274, 2.016775369644165, 2.047292470932007, 2.016775369644165, 1.9862810373306274, 1.9558106660842896, 1.9253652095794678, 1.8949459791183472, 1.8645542860031128, 1.8341913223266602, 1.803858757019043, 1.7735579013824463, 1.743290662765503, 1.7130587100982666, 1.6828639507293701, 1.6527085304260254, 1.6225943565368652, 1.5925240516662598, 1.5625, 1.5325249433517456, 1.5026018619537354, 1.472733974456787, 1.4429244995117188, 1.4131773710250854, 1.3834965229034424, 1.3538862466812134, 1.3243513107299805, 1.2948968410491943, 1.2655285596847534, 1.2362525463104248, 1.2070754766464233, 1.1780048608779907, 1.1490485668182373, 1.1202155351638794, 1.0915155410766602, 1.0629594326019287, 1.0345591306686401, 1.0063276290893555, 0.9782797694206238, 0.9504316449165344, 0.9228014349937439, 0.8954092860221863, 0.8682777285575867, 0.8414319753646851, 0.814900279045105, 0.7887143492698669, 0.7629097104072571, 0.7375264763832092, 0.7126096487045288, 0.6882098317146301, 0.664384126663208, 0.6411963701248169, 0.6187184453010559, 0.5970304012298584, 0.5762215256690979, 0.5563904047012329, 0.5376453399658203, 0.5201036334037781, 0.503891110420227, 0.4891398847103119, 0.4759858250617981, 0.46456465125083923, 0.455006867647171, 0.44743192195892334, 0.4419417381286621, 0.4386146366596222, 0.40625, 0.4074501395225525, 0.411029577255249, 0.4169270098209381, 0.4250459671020508, 0.43526214361190796, 0.44743192195892334, 0.46140071749687195, 0.4770105481147766, 0.49410587549209595, 0.5125381350517273, 0.5321683287620544, 0.5528689622879028, 0.5745242834091187, 0.5970304012298584, 0.6202948093414307, 0.6442352533340454, 0.668779194355011, 0.6938626170158386, 0.7194290161132812, 0.7454288005828857, 0.7718180418014526, 0.7985582947731018, 0.8256152868270874, 0.8529589772224426, 0.8805626630783081, 0.9084026217460632, 0.9364577531814575, 0.9647093415260315, 0.9931405186653137, 1.0217363834381104, 1.0504834651947021, 1.0793697834014893, 1.1083842515945435, 1.1375172138214111, 1.1667596101760864, 1.1961036920547485, 1.2255419492721558, 1.2550678253173828, 1.2846752405166626, 1.3143588304519653, 1.3441133499145508, 1.373934268951416, 1.4038172960281372, 1.4337587356567383, 1.4637547731399536, 1.4938023090362549, 1.5238981246948242, 1.5540395975112915, 1.584223985671997, 1.61444890499115, 1.644712209701538, 1.6750116348266602, 1.7053455114364624, 1.7357118129730225, 1.7661088705062866, 1.7965352535247803, 1.8269895315170288, 1.857470154762268, 1.8879759311676025, 1.9185056686401367, 1.9490582942962646, 1.9796326160430908, 2.010227680206299, 2.0408427715301514, 2.010227680206299, 1.9796326160430908, 1.9490582942962646, 1.9185056686401367, 1.8879759311676025, 1.857470154762268, 1.8269895315170288, 1.7965352535247803, 1.7661088705062866, 1.7357118129730225, 1.7053455114364624, 1.6750116348266602, 1.644712209701538, 1.61444890499115, 1.584223985671997, 1.5540395975112915, 1.5238981246948242, 1.4938023090362549, 1.4637547731399536, 1.4337587356567383, 1.4038172960281372, 1.373934268951416, 1.3441133499145508, 1.3143588304519653, 1.2846752405166626, 1.2550678253173828, 1.2255419492721558, 1.1961036920547485, 1.1667596101760864, 1.1375172138214111, 1.1083842515945435, 1.0793697834014893, 1.0504834651947021, 1.0217363834381104, 0.9931405186653137, 0.9647093415260315, 0.9364577531814575, 0.9084026217460632, 0.8805626630783081, 0.8529589772224426, 0.8256152868270874, 0.7985582947731018, 0.7718180418014526, 0.7454288005828857, 0.7194290161132812, 0.6938626170158386, 0.668779194355011, 0.6442352533340454, 0.6202948093414307, 0.5970304012298584, 0.5745242834091187, 0.5528689622879028, 0.5321683287620544, 0.5125381350517273, 0.49410587549209595, 0.4770105481147766, 0.46140071749687195, 0.44743192195892334, 0.43526214361190796, 0.4250459671020508, 0.4169270098209381, 0.411029577255249, 0.4074501395225525, 0.375, 0.37629982829093933, 0.3801726698875427, 0.3865411579608917, 0.3952847123146057, 0.40625, 0.41926273703575134, 0.43413886427879333, 0.45069390535354614, 0.46875, 0.48814061284065247, 0.5087131261825562, 0.5303300619125366, 0.5528689622879028, 0.5762215256690979, 0.6002929210662842, 0.625, 0.650270402431488, 0.6760408878326416, 0.7022563815116882, 0.7288689613342285, 0.7558366656303406, 0.7831227779388428, 0.8106951117515564, 0.8385254740715027, 0.8665890097618103, 0.8948638439178467, 0.9233304262161255, 0.9519716501235962, 0.9807721972465515, 1.009718418121338, 1.0387980937957764, 1.0680004358291626, 1.0973156690597534, 1.126734733581543, 1.15625, 1.1858540773391724, 1.2155406475067139, 1.2453036308288574, 1.2751379013061523, 1.305038332939148, 1.3350006341934204, 1.3650206327438354, 1.395094633102417, 1.4252192974090576, 1.4553914070129395, 1.4856079816818237, 1.5158666372299194, 1.546164631843567, 1.5764998197555542, 1.6068700551986694, 1.6372733116149902, 1.6677080392837524, 1.6981722116470337, 1.7286646366119385, 1.7591835260391235, 1.7897276878356934, 1.8202956914901733, 1.850886583328247, 1.881499171257019, 1.9121322631835938, 1.9427851438522339, 1.973456621170044, 2.004146099090576, 2.0348525047302246, 2.004146099090576, 1.973456621170044, 1.9427851438522339, 1.9121322631835938, 1.881499171257019, 1.850886583328247, 1.8202956914901733, 1.7897276878356934, 1.7591835260391235, 1.7286646366119385, 1.6981722116470337, 1.6677080392837524, 1.6372733116149902, 1.6068700551986694, 1.5764998197555542, 1.546164631843567, 1.5158666372299194, 1.4856079816818237, 1.4553914070129395, 1.4252192974090576, 1.395094633102417, 1.3650206327438354, 1.3350006341934204, 1.305038332939148, 1.2751379013061523, 1.2453036308288574, 1.2155406475067139, 1.1858540773391724, 1.15625, 1.126734733581543, 1.0973156690597534, 1.0680004358291626, 1.0387980937957764, 1.009718418121338, 0.9807721972465515, 0.9519716501235962, 0.9233304262161255, 0.8948638439178467, 0.8665890097618103, 0.8385254740715027, 0.8106951117515564, 0.7831227779388428, 0.7558366656303406, 0.7288689613342285, 0.7022563815116882, 0.6760408878326416, 0.650270402431488, 0.625, 0.6002929210662842, 0.5762215256690979, 0.5528689622879028, 0.5303300619125366, 0.5087131261825562, 0.48814061284065247, 0.46875, 0.45069390535354614, 0.43413886427879333, 0.41926273703575134, 0.40625, 0.3952847123146057, 0.3865411579608917, 0.3801726698875427, 0.37629982829093933, 0.34375, 0.34516751766204834, 0.3493856191635132, 0.3563048243522644, 0.3657718598842621, 0.3775951862335205, 0.3915613889694214, 0.4074501395225525, 0.4250459671020508, 0.44414594769477844, 0.46456465125083923, 0.48613590002059937, 0.5087131261825562, 0.5321683287620544, 0.5563904047012329, 0.5812836289405823, 0.6067652702331543, 0.6327642798423767, 0.6592194437980652, 0.6860780715942383, 0.713294506072998, 0.740829348564148, 0.7686483860015869, 0.7967218160629272, 0.8250236511230469, 0.8535312414169312, 0.8822246193885803, 0.9110862612724304, 0.9401005506515503, 0.9692538976669312, 0.998534083366394, 1.0279302597045898, 1.057432770729065, 1.0870329141616821, 1.1167230606079102, 1.146496057510376, 1.1763455867767334, 1.206266164779663, 1.2362525463104248, 1.2662999629974365, 1.296404242515564, 1.3265615701675415, 1.3567683696746826, 1.3870213031768799, 1.417317509651184, 1.447654366493225, 1.4780292510986328, 1.5084397792816162, 1.5388840436935425, 1.5693598985671997, 1.5998656749725342, 1.6303997039794922, 1.66096031665802, 1.691546082496643, 1.7221556901931763, 1.7527879476547241, 1.7834416627883911, 1.8141156435012817, 1.8448090553283691, 1.8755207061767578, 1.90625, 1.9369958639144897, 1.9677577018737793, 1.9985345602035522, 2.0293259620666504, 1.9985345602035522, 1.9677577018737793, 1.9369958639144897, 1.90625, 1.8755207061767578, 1.8448090553283691, 1.8141156435012817, 1.7834416627883911, 1.7527879476547241, 1.7221556901931763, 1.691546082496643, 1.66096031665802, 1.6303997039794922, 1.5998656749725342, 1.5693598985671997, 1.5388840436935425, 1.5084397792816162, 1.4780292510986328, 1.447654366493225, 1.417317509651184, 1.3870213031768799, 1.3567683696746826, 1.3265615701675415, 1.296404242515564, 1.2662999629974365, 1.2362525463104248, 1.206266164779663, 1.1763455867767334, 1.146496057510376, 1.1167230606079102, 1.0870329141616821, 1.057432770729065, 1.0279302597045898, 0.998534083366394, 0.9692538976669312, 0.9401005506515503, 0.9110862612724304, 0.8822246193885803, 0.8535312414169312, 0.8250236511230469, 0.7967218160629272, 0.7686483860015869, 0.740829348564148, 0.713294506072998, 0.6860780715942383, 0.6592194437980652, 0.6327642798423767, 0.6067652702331543, 0.5812836289405823, 0.5563904047012329, 0.5321683287620544, 0.5087131261825562, 0.48613590002059937, 0.46456465125083923, 0.44414594769477844, 0.4250459671020508, 0.4074501395225525, 0.3915613889694214, 0.3775951862335205, 0.3657718598842621, 0.3563048243522644, 0.3493856191635132, 0.34516751766204834, 0.3125, 0.3140586018562317, 0.3186887204647064, 0.326259583234787, 0.3365727961063385, 0.3493856191635132, 0.36443448066711426, 0.38145485520362854, 0.40019527077674866, 0.42042574286460876, 0.4419417381286621, 0.46456465125083923, 0.48814061284065247, 0.5125381350517273, 0.5376453399658203, 0.5633673667907715, 0.5896238088607788, 0.6163463592529297, 0.6434769034385681, 0.6709659695625305, 0.6987712383270264, 0.7268564701080322, 0.755190372467041, 0.7837460041046143, 0.8125, 0.8414319753646851, 0.8705242872238159, 0.8997612595558167, 0.9291293025016785, 0.9586163759231567, 0.9882117509841919, 1.0179060697555542, 1.0476908683776855, 1.0775587558746338, 1.107502818107605, 1.1375172138214111, 1.1675963401794434, 1.1977355480194092, 1.2279301881790161, 1.258176326751709, 1.2884705066680908, 1.3188092708587646, 1.3491895198822021, 1.3796087503433228, 1.4100642204284668, 1.4405537843704224, 1.4710752964019775, 1.50162672996521, 1.5322062969207764, 1.5628124475479126, 1.5934436321258545, 1.624098300933838, 1.6547752618789673, 1.6854733228683472, 1.716191291809082, 1.746928095817566, 1.7776827812194824, 1.8084545135498047, 1.8392423391342163, 1.87004554271698, 1.9008632898330688, 1.9316949844360352, 1.962539792060852, 1.9933973550796509, 2.0242669582366943, 1.9933973550796509, 1.962539792060852, 1.9316949844360352, 1.9008632898330688, 1.87004554271698, 1.8392423391342163, 1.8084545135498047, 1.7776827812194824, 1.746928095817566, 1.716191291809082, 1.6854733228683472, 1.6547752618789673, 1.624098300933838, 1.5934436321258545, 1.5628124475479126, 1.5322062969207764, 1.50162672996521, 1.4710752964019775, 1.4405537843704224, 1.4100642204284668, 1.3796087503433228, 1.3491895198822021, 1.3188092708587646, 1.2884705066680908, 1.258176326751709, 1.2279301881790161, 1.1977355480194092, 1.1675963401794434, 1.1375172138214111, 1.107502818107605, 1.0775587558746338, 1.0476908683776855, 1.0179060697555542, 0.9882117509841919, 0.9586163759231567, 0.9291293025016785, 0.8997612595558167, 0.8705242872238159, 0.8414319753646851, 0.8125, 0.7837460041046143, 0.755190372467041, 0.7268564701080322, 0.6987712383270264, 0.6709659695625305, 0.6434769034385681, 0.6163463592529297, 0.5896238088607788, 0.5633673667907715, 0.5376453399658203, 0.5125381350517273, 0.48814061284065247, 0.46456465125083923, 0.4419417381286621, 0.42042574286460876, 0.40019527077674866, 0.38145485520362854, 0.36443448066711426, 0.3493856191635132, 0.3365727961063385, 0.326259583234787, 0.3186887204647064, 0.3140586018562317, 0.28125, 0.2829807996749878, 0.28811076283454895, 0.2964635193347931, 0.3077768087387085, 0.32173845171928406, 0.3380204439163208, 0.3563048243522644, 0.37629982829093933, 0.39774757623672485, 0.42042574286460876, 0.44414594769477844, 0.46875, 0.49410587549209595, 0.5201036334037781, 0.5466517210006714, 0.5736737251281738, 0.6011057496070862, 0.6288940906524658, 0.6569936275482178, 0.6853660345077515, 0.7139787077903748, 0.7428039908409119, 0.7718180418014526, 0.8010003566741943, 0.8303331136703491, 0.8598010540008545, 0.8893905878067017, 0.9190900921821594, 0.9488891363143921, 0.9787787199020386, 1.0087507963180542, 1.0387980937957764, 1.0689144134521484, 1.099094033241272, 1.1293319463729858, 1.1596235036849976, 1.1899645328521729, 1.2203514575958252, 1.2507810592651367, 1.28125, 1.3117557764053345, 1.34229576587677, 1.3728677034378052, 1.403469443321228, 1.4340991973876953, 1.4647551774978638, 1.4954357147216797, 1.5261393785476685, 1.556864857673645, 1.5876107215881348, 1.6183758974075317, 1.64915931224823, 1.679960012435913, 1.710776925086975, 1.7416093349456787, 1.772456407546997, 1.8033173084259033, 1.8341913223266602, 1.8650779724121094, 1.8959764242172241, 1.9268862009048462, 1.957806944847107, 1.9887378215789795, 2.0196785926818848, 1.9887378215789795, 1.957806944847107, 1.9268862009048462, 1.8959764242172241, 1.8650779724121094, 1.8341913223266602, 1.8033173084259033, 1.772456407546997, 1.7416093349456787, 1.710776925086975, 1.679960012435913, 1.64915931224823, 1.6183758974075317, 1.5876107215881348, 1.556864857673645, 1.5261393785476685, 1.4954357147216797, 1.4647551774978638, 1.4340991973876953, 1.403469443321228, 1.3728677034378052, 1.34229576587677, 1.3117557764053345, 1.28125, 1.2507810592651367, 1.2203514575958252, 1.1899645328521729, 1.1596235036849976, 1.1293319463729858, 1.099094033241272, 1.0689144134521484, 1.0387980937957764, 1.0087507963180542, 0.9787787199020386, 0.9488891363143921, 0.9190900921821594, 0.8893905878067017, 0.8598010540008545, 0.8303331136703491, 0.8010003566741943, 0.7718180418014526, 0.7428039908409119, 0.7139787077903748, 0.6853660345077515, 0.6569936275482178, 0.6288940906524658, 0.6011057496070862, 0.5736737251281738, 0.5466517210006714, 0.5201036334037781, 0.49410587549209595, 0.46875, 0.44414594769477844, 0.42042574286460876, 0.39774757623672485, 0.37629982829093933, 0.3563048243522644, 0.3380204439163208, 0.32173845171928406, 0.3077768087387085, 0.2964635193347931, 0.28811076283454895, 0.2829807996749878, 0.25, 0.2519455552101135, 0.2576940953731537, 0.26700010895729065, 0.279508501291275, 0.2948119044303894, 0.3125, 0.332192063331604, 0.3535533845424652, 0.37629982829093933, 0.40019527077674866, 0.4250459671020508, 0.45069390535354614, 0.4770105481147766, 0.503891110420227, 0.53125, 0.55901700258255, 0.5871341824531555, 0.615553617477417, 0.6442352533340454, 0.673145592212677, 0.7022563815116882, 0.7315437197685242, 0.7609872221946716, 0.7905694246292114, 0.8202753067016602, 0.8500919342041016, 0.8800079822540283, 0.910013735294342, 0.9401005506515503, 0.9702609181404114, 1.0004881620407104, 1.0307763814926147, 1.0611203908920288, 1.0915155410766602, 1.1219576597213745, 1.1524430513381958, 1.1829683780670166, 1.2135305404663086, 1.244126796722412, 1.2747548818588257, 1.3054124116897583, 1.3360973596572876, 1.3668079376220703, 1.3975424766540527, 1.4282993078231812, 1.45907723903656, 1.4898747205734253, 1.520690679550171, 1.5515239238739014, 1.5823736190795898, 1.6132386922836304, 1.644118309020996, 1.6750116348266602, 1.7059179544448853, 1.7368366718292236, 1.7677669525146484, 1.7987083196640015, 1.829660177230835, 1.8606219291687012, 1.8915932178497314, 1.9225735664367676, 1.9535624980926514, 1.9845595359802246, 2.015564441680908, 1.9845595359802246, 1.9535624980926514, 1.9225735664367676, 1.8915932178497314, 1.8606219291687012, 1.829660177230835, 1.7987083196640015, 1.7677669525146484, 1.7368366718292236, 1.7059179544448853, 1.6750116348266602, 1.644118309020996, 1.6132386922836304, 1.5823736190795898, 1.5515239238739014, 1.520690679550171, 1.4898747205734253, 1.45907723903656, 1.4282993078231812, 1.3975424766540527, 1.3668079376220703, 1.3360973596572876, 1.3054124116897583, 1.2747548818588257, 1.244126796722412, 1.2135305404663086, 1.1829683780670166, 1.1524430513381958, 1.1219576597213745, 1.0915155410766602, 1.0611203908920288, 1.0307763814926147, 1.0004881620407104, 0.9702609181404114, 0.9401005506515503, 0.910013735294342, 0.8800079822540283, 0.8500919342041016, 0.8202753067016602, 0.7905694246292114, 0.7609872221946716, 0.7315437197685242, 0.7022563815116882, 0.673145592212677, 0.6442352533340454, 0.615553617477417, 0.5871341824531555, 0.55901700258255, 0.53125, 0.503891110420227, 0.4770105481147766, 0.45069390535354614, 0.4250459671020508, 0.40019527077674866, 0.37629982829093933, 0.3535533845424652, 0.332192063331604, 0.3125, 0.2948119044303894, 0.279508501291275, 0.26700010895729065, 0.2576940953731537, 0.2519455552101135, 0.21875, 0.22097086906433105, 0.2275034338235855, 0.23799291253089905, 0.2519455552101135, 0.26882266998291016, 0.28811076283454895, 0.30935922265052795, 0.332192063331604, 0.3563048243522644, 0.38145485520362854, 0.4074501395225525, 0.43413886427879333, 0.46140071749687195, 0.4891398847103119, 0.5172795653343201, 0.5457577705383301, 0.5745242834091187, 0.6035377383232117, 0.6327642798423767, 0.6621756553649902, 0.6917482614517212, 0.7214622497558594, 0.7513009309768677, 0.78125, 0.8112971782684326, 0.8414319753646851, 0.8716453313827515, 0.9019293785095215, 0.9322771430015564, 0.9626826047897339, 0.9931405186653137, 1.0236462354660034, 1.054195523262024, 1.0847846269607544, 1.115410566329956, 1.1460700035095215, 1.1767606735229492, 1.2074799537658691, 1.2382258176803589, 1.268996238708496, 1.2997896671295166, 1.3306043148040771, 1.3614387512207031, 1.392291784286499, 1.4231622219085693, 1.454048752784729, 1.4849505424499512, 1.5158666372299194, 1.5467960834503174, 1.5777381658554077, 1.6086921691894531, 1.6396574974060059, 1.670633316040039, 1.7016191482543945, 1.732614517211914, 1.76361882686615, 1.7946317195892334, 1.8256527185440063, 1.8566813468933105, 1.8877172470092773, 1.9187601804733276, 1.9498096704483032, 1.980865478515625, 2.011927366256714, 1.980865478515625, 1.9498096704483032, 1.9187601804733276, 1.8877172470092773, 1.8566813468933105, 1.8256527185440063, 1.7946317195892334, 1.76361882686615, 1.732614517211914, 1.7016191482543945, 1.670633316040039, 1.6396574974060059, 1.6086921691894531, 1.5777381658554077, 1.5467960834503174, 1.5158666372299194, 1.4849505424499512, 1.454048752784729, 1.4231622219085693, 1.392291784286499, 1.3614387512207031, 1.3306043148040771, 1.2997896671295166, 1.268996238708496, 1.2382258176803589, 1.2074799537658691, 1.1767606735229492, 1.1460700035095215, 1.115410566329956, 1.0847846269607544, 1.054195523262024, 1.0236462354660034, 0.9931405186653137, 0.9626826047897339, 0.9322771430015564, 0.9019293785095215, 0.8716453313827515, 0.8414319753646851, 0.8112971782684326, 0.78125, 0.7513009309768677, 0.7214622497558594, 0.6917482614517212, 0.6621756553649902, 0.6327642798423767, 0.6035377383232117, 0.5745242834091187, 0.5457577705383301, 0.5172795653343201, 0.4891398847103119, 0.46140071749687195, 0.43413886427879333, 0.4074501395225525, 0.38145485520362854, 0.3563048243522644, 0.332192063331604, 0.30935922265052795, 0.28811076283454895, 0.26882266998291016, 0.2519455552101135, 0.23799291253089905, 0.2275034338235855, 0.22097086906433105, 0.1875, 0.19008633494377136, 0.19764235615730286, 0.20963136851787567, 0.22534695267677307, 0.24407030642032623, 0.2651650309562683, 0.28811076283454895, 0.3125, 0.3380204439163208, 0.36443448066711426, 0.3915613889694214, 0.41926273703575134, 0.44743192195892334, 0.4759858250617981, 0.504859209060669, 0.5340002179145813, 0.5633673667907715, 0.5929270386695862, 0.6226518154144287, 0.652519166469574, 0.6825103163719177, 0.7126096487045288, 0.7428039908409119, 0.7730823159217834, 0.8034350275993347, 0.8338540196418762, 0.8643323183059692, 0.8948638439178467, 0.9254432916641235, 0.9560661315917969, 0.986728310585022, 1.0174262523651123, 1.0481568574905396, 1.0789172649383545, 1.1097050905227661, 1.1405179500579834, 1.171354055404663, 1.2022114992141724, 1.233088731765747, 1.2639843225479126, 1.2948968410491943, 1.3258252143859863, 1.3567683696746826, 1.3877252340316772, 1.4186949729919434, 1.4496766328811646, 1.4806697368621826, 1.5116733312606812, 1.542686939239502, 1.5737098455429077, 1.6047414541244507, 1.6357815265655518, 1.6668294668197632, 1.6978846788406372, 1.7289470434188843, 1.7600159645080566, 1.7910912036895752, 1.8221725225448608, 1.8532593250274658, 1.8843517303466797, 1.9154491424560547, 1.9465514421463013, 1.9776583909988403, 2.0087697505950928, 1.9776583909988403, 1.9465514421463013, 1.9154491424560547, 1.8843517303466797, 1.8532593250274658, 1.8221725225448608, 1.7910912036895752, 1.7600159645080566, 1.7289470434188843, 1.6978846788406372, 1.6668294668197632, 1.6357815265655518, 1.6047414541244507, 1.5737098455429077, 1.542686939239502, 1.5116733312606812, 1.4806697368621826, 1.4496766328811646, 1.4186949729919434, 1.3877252340316772, 1.3567683696746826, 1.3258252143859863, 1.2948968410491943, 1.2639843225479126, 1.233088731765747, 1.2022114992141724, 1.171354055404663, 1.1405179500579834, 1.1097050905227661, 1.0789172649383545, 1.0481568574905396, 1.0174262523651123, 0.986728310585022, 0.9560661315917969, 0.9254432916641235, 0.8948638439178467, 0.8643323183059692, 0.8338540196418762, 0.8034350275993347, 0.7730823159217834, 0.7428039908409119, 0.7126096487045288, 0.6825103163719177, 0.652519166469574, 0.6226518154144287, 0.5929270386695862, 0.5633673667907715, 0.5340002179145813, 0.504859209060669, 0.4759858250617981, 0.44743192195892334, 0.41926273703575134, 0.3915613889694214, 0.36443448066711426, 0.3380204439163208, 0.3125, 0.28811076283454895, 0.2651650309562683, 0.24407030642032623, 0.22534695267677307, 0.20963136851787567, 0.19764235615730286, 0.19008633494377136, 0.15625, 0.1593443602323532, 0.16828639805316925, 0.18221724033355713, 0.20009763538837433, 0.22097086906433105, 0.24407030642032623, 0.26882266998291016, 0.2948119044303894, 0.32173845171928406, 0.3493856191635132, 0.3775951862335205, 0.40625, 0.43526214361190796, 0.46456465125083923, 0.49410587549209595, 0.5238454341888428, 0.5537514090538025, 0.5837981700897217, 0.6139650940895081, 0.6442352533340454, 0.6745947599411011, 0.7050321102142334, 0.7355376482009888, 0.7661031484603882, 0.7967218160629272, 0.8273876309394836, 0.858095645904541, 0.8888413906097412, 0.9196211695671082, 0.9504316449165344, 0.981269896030426, 1.0121334791183472, 1.0430200099945068, 1.0739275217056274, 1.1048543453216553, 1.1357988119125366, 1.1667596101760864, 1.1977355480194092, 1.2287251949310303, 1.2597277164459229, 1.29074227809906, 1.3217679262161255, 1.3528038263320923, 1.3838493824005127, 1.4149038791656494, 1.4459669589996338, 1.477037787437439, 1.5081160068511963, 1.539201259613037, 1.5702930688858032, 1.6013909578323364, 1.6324946880340576, 1.6636039018630981, 1.694718360900879, 1.7258377075195312, 1.7569615840911865, 1.7880899906158447, 1.8192224502563477, 1.8503589630126953, 1.881499171257019, 1.9126429557800293, 1.9437901973724365, 1.9749406576156616, 2.006094217300415, 1.9749406576156616, 1.9437901973724365, 1.9126429557800293, 1.881499171257019, 1.8503589630126953, 1.8192224502563477, 1.7880899906158447, 1.7569615840911865, 1.7258377075195312, 1.694718360900879, 1.6636039018630981, 1.6324946880340576, 1.6013909578323364, 1.5702930688858032, 1.539201259613037, 1.5081160068511963, 1.477037787437439, 1.4459669589996338, 1.4149038791656494, 1.3838493824005127, 1.3528038263320923, 1.3217679262161255, 1.29074227809906, 1.2597277164459229, 1.2287251949310303, 1.1977355480194092, 1.1667596101760864, 1.1357988119125366, 1.1048543453216553, 1.0739275217056274, 1.0430200099945068, 1.0121334791183472, 0.981269896030426, 0.9504316449165344, 0.9196211695671082, 0.8888413906097412, 0.858095645904541, 0.8273876309394836, 0.7967218160629272, 0.7661031484603882, 0.7355376482009888, 0.7050321102142334, 0.6745947599411011, 0.6442352533340454, 0.6139650940895081, 0.5837981700897217, 0.5537514090538025, 0.5238454341888428, 0.49410587549209595, 0.46456465125083923, 0.43526214361190796, 0.40625, 0.3775951862335205, 0.3493856191635132, 0.32173845171928406, 0.2948119044303894, 0.26882266998291016, 0.24407030642032623, 0.22097086906433105, 0.20009763538837433, 0.18221724033355713, 0.16828639805316925, 0.1593443602323532, 0.125, 0.12884704768657684, 0.1397542506456375, 0.15625, 0.1767766922712326, 0.20009763538837433, 0.22534695267677307, 0.2519455552101135, 0.279508501291275, 0.3077768087387085, 0.3365727961063385, 0.3657718598842621, 0.3952847123146057, 0.4250459671020508, 0.455006867647171, 0.4851304590702057, 0.5153881907463074, 0.5457577705383301, 0.5762215256690979, 0.6067652702331543, 0.6373774409294128, 0.6680486798286438, 0.6987712383270264, 0.72953861951828, 0.7603453397750854, 0.7911868095397949, 0.822059154510498, 0.8529589772224426, 0.8838834762573242, 0.9148300886154175, 0.9457966089248657, 0.9767812490463257, 1.007782220840454, 1.0387980937957764, 1.069827675819397, 1.1008696556091309, 1.1319231986999512, 1.1629871129989624, 1.1940608024597168, 1.2251434326171875, 1.2562344074249268, 1.2873331308364868, 1.3184388875961304, 1.3495514392852783, 1.3806700706481934, 1.411794662475586, 1.4429244995117188, 1.4740595817565918, 1.5051993131637573, 1.5363435745239258, 1.5674920082092285, 1.598644495010376, 1.62980055809021, 1.66096031665802, 1.692123293876648, 1.7232894897460938, 1.7544585466384888, 1.7856305837631226, 1.8168052434921265, 1.847982406616211, 1.879162073135376, 1.9103440046310425, 1.941528081893921, 1.9727143049240112, 2.0039024353027344, 1.9727143049240112, 1.941528081893921, 1.9103440046310425, 1.879162073135376, 1.847982406616211, 1.8168052434921265, 1.7856305837631226, 1.7544585466384888, 1.7232894897460938, 1.692123293876648, 1.66096031665802, 1.62980055809021, 1.598644495010376, 1.5674920082092285, 1.5363435745239258, 1.5051993131637573, 1.4740595817565918, 1.4429244995117188, 1.411794662475586, 1.3806700706481934, 1.3495514392852783, 1.3184388875961304, 1.2873331308364868, 1.2562344074249268, 1.2251434326171875, 1.1940608024597168, 1.1629871129989624, 1.1319231986999512, 1.1008696556091309, 1.069827675819397, 1.0387980937957764, 1.007782220840454, 0.9767812490463257, 0.9457966089248657, 0.9148300886154175, 0.8838834762573242, 0.8529589772224426, 0.822059154510498, 0.7911868095397949, 0.7603453397750854, 0.72953861951828, 0.6987712383270264, 0.6680486798286438, 0.6373774409294128, 0.6067652702331543, 0.5762215256690979, 0.5457577705383301, 0.5153881907463074, 0.4851304590702057, 0.455006867647171, 0.4250459671020508, 0.3952847123146057, 0.3657718598842621, 0.3365727961063385, 0.3077768087387085, 0.279508501291275, 0.2519455552101135, 0.22534695267677307, 0.20009763538837433, 0.1767766922712326, 0.15625, 0.1397542506456375, 0.12884704768657684, 0.09375, 0.09882117807865143, 0.11267347633838654, 0.13258251547813416, 0.15625, 0.18221724033355713, 0.20963136851787567, 0.23799291253089905, 0.26700010895729065, 0.2964635193347931, 0.326259583234787, 0.3563048243522644, 0.3865411579608917, 0.4169270098209381, 0.44743192195892334, 0.47803306579589844, 0.5087131261825562, 0.5394586324691772, 0.5702589750289917, 0.6011057496070862, 0.6319921612739563, 0.6629126071929932, 0.6938626170158386, 0.7248383164405823, 0.7558366656303406, 0.7868549227714539, 0.8178907632827759, 0.8489423394203186, 0.8800079822540283, 0.9110862612724304, 0.9421758651733398, 0.9732757210731506, 1.0043848752975464, 1.035502552986145, 1.0666279792785645, 1.097760558128357, 1.1288994550704956, 1.1600444316864014, 1.1911948919296265, 1.2223504781723022, 1.2535107135772705, 1.2846752405166626, 1.315843939781189, 1.3470163345336914, 1.3781923055648804, 1.4093714952468872, 1.4405537843704224, 1.4717389345169067, 1.5029268264770508, 1.5341172218322754, 1.565310001373291, 1.5965049266815186, 1.6277021169662476, 1.6589012145996094, 1.690102219581604, 1.7213048934936523, 1.752509355545044, 1.7837153673171997, 1.8149229288101196, 1.8461319208145142, 1.8773423433303833, 1.908553957939148, 1.939766764640808, 1.9709808826446533, 2.0021960735321045, 1.9709808826446533, 1.939766764640808, 1.908553957939148, 1.8773423433303833, 1.8461319208145142, 1.8149229288101196, 1.7837153673171997, 1.752509355545044, 1.7213048934936523, 1.690102219581604, 1.6589012145996094, 1.6277021169662476, 1.5965049266815186, 1.565310001373291, 1.5341172218322754, 1.5029268264770508, 1.4717389345169067, 1.4405537843704224, 1.4093714952468872, 1.3781923055648804, 1.3470163345336914, 1.315843939781189, 1.2846752405166626, 1.2535107135772705, 1.2223504781723022, 1.1911948919296265, 1.1600444316864014, 1.1288994550704956, 1.097760558128357, 1.0666279792785645, 1.035502552986145, 1.0043848752975464, 0.9732757210731506, 0.9421758651733398, 0.9110862612724304, 0.8800079822540283, 0.8489423394203186, 0.8178907632827759, 0.7868549227714539, 0.7558366656303406, 0.7248383164405823, 0.6938626170158386, 0.6629126071929932, 0.6319921612739563, 0.6011057496070862, 0.5702589750289917, 0.5394586324691772, 0.5087131261825562, 0.47803306579589844, 0.44743192195892334, 0.4169270098209381, 0.3865411579608917, 0.3563048243522644, 0.326259583234787, 0.2964635193347931, 0.26700010895729065, 0.23799291253089905, 0.20963136851787567, 0.18221724033355713, 0.15625, 0.13258251547813416, 0.11267347633838654, 0.09882117807865143, 0.0625, 0.06987712532281876, 0.0883883461356163, 0.11267347633838654, 0.1397542506456375, 0.16828639805316925, 0.19764235615730286, 0.2275034338235855, 0.2576940953731537, 0.28811076283454895, 0.3186887204647064, 0.3493856191635132, 0.3801726698875427, 0.411029577255249, 0.4419417381286621, 0.47289830446243286, 0.503891110420227, 0.5349138379096985, 0.5659615993499756, 0.5970304012298584, 0.6281172037124634, 0.6592194437980652, 0.6903350353240967, 0.7214622497558594, 0.7525996565818787, 0.7837460041046143, 0.814900279045105, 0.846061646938324, 0.8772292733192444, 0.9084026217460632, 0.939581036567688, 0.9707640409469604, 1.0019512176513672, 1.0331422090530396, 1.0643366575241089, 1.0955342054367065, 1.126734733581543, 1.157938003540039, 1.1891436576843262, 1.2203514575958252, 1.2515615224838257, 1.282773494720459, 1.3139872550964355, 1.3452026844024658, 1.3764196634292603, 1.4076381921768188, 1.4388580322265625, 1.4700791835784912, 1.5013015270233154, 1.5325249433517456, 1.5637495517730713, 1.5949749946594238, 1.6262015104293823, 1.6574288606643677, 1.6886570453643799, 1.7198859453201294, 1.7511156797409058, 1.7823461294174194, 1.8135772943496704, 1.8448090553283691, 1.8760414123535156, 1.9072743654251099, 1.9385077953338623, 1.9697418212890625, 2.000976324081421, 1.9697418212890625, 1.9385077953338623, 1.9072743654251099, 1.8760414123535156, 1.8448090553283691, 1.8135772943496704, 1.7823461294174194, 1.7511156797409058, 1.7198859453201294, 1.6886570453643799, 1.6574288606643677, 1.6262015104293823, 1.5949749946594238, 1.5637495517730713, 1.5325249433517456, 1.5013015270233154, 1.4700791835784912, 1.4388580322265625, 1.4076381921768188, 1.3764196634292603, 1.3452026844024658, 1.3139872550964355, 1.282773494720459, 1.2515615224838257, 1.2203514575958252, 1.1891436576843262, 1.157938003540039, 1.126734733581543, 1.0955342054367065, 1.0643366575241089, 1.0331422090530396, 1.0019512176513672, 0.9707640409469604, 0.939581036567688, 0.9084026217460632, 0.8772292733192444, 0.846061646938324, 0.814900279045105, 0.7837460041046143, 0.7525996565818787, 0.7214622497558594, 0.6903350353240967, 0.6592194437980652, 0.6281172037124634, 0.5970304012298584, 0.5659615993499756, 0.5349138379096985, 0.503891110420227, 0.47289830446243286, 0.4419417381286621, 0.411029577255249, 0.3801726698875427, 0.3493856191635132, 0.3186887204647064, 0.28811076283454895, 0.2576940953731537, 0.2275034338235855, 0.19764235615730286, 0.16828639805316925, 0.1397542506456375, 0.11267347633838654, 0.0883883461356163, 0.06987712532281876, 0.03125, 0.04419417306780815, 0.06987712532281876, 0.09882117807865143, 0.12884704768657684, 0.1593443602323532, 0.19008633494377136, 0.22097086906433105, 0.2519455552101135, 0.2829807996749878, 0.3140586018562317, 0.34516751766204834, 0.37629982829093933, 0.4074501395225525, 0.4386146366596222, 0.469790518283844, 0.5009756088256836, 0.5321683287620544, 0.5633673667907715, 0.5945718288421631, 0.6257807612419128, 0.6569936275482178, 0.6882098317146301, 0.7194290161132812, 0.7506507635116577, 0.7818747758865356, 0.8131007552146912, 0.8443285226821899, 0.8755578398704529, 0.9067886471748352, 0.9380207061767578, 0.9692538976669312, 1.0004881620407104, 1.0317233800888062, 1.0629594326019287, 1.0941963195800781, 1.1254339218139648, 1.1566722393035889, 1.1879111528396606, 1.2191505432128906, 1.2503905296325684, 1.2816309928894043, 1.3128719329833984, 1.3441133499145508, 1.3753551244735718, 1.4065971374511719, 1.4378396272659302, 1.4690823554992676, 1.5003254413604736, 1.5315688848495483, 1.5628124475479126, 1.5940563678741455, 1.625300407409668, 1.656544804573059, 1.6877893209457397, 1.7190340757369995, 1.7502789497375488, 1.7815240621566772, 1.8127694129943848, 1.8440147638320923, 1.875260353088379, 1.9065061807632446, 1.9377520084381104, 1.9689979553222656, 2.000244140625, 1.9689979553222656, 1.9377520084381104, 1.9065061807632446, 1.875260353088379, 1.8440147638320923, 1.8127694129943848, 1.7815240621566772, 1.7502789497375488, 1.7190340757369995, 1.6877893209457397, 1.656544804573059, 1.625300407409668, 1.5940563678741455, 1.5628124475479126, 1.5315688848495483, 1.5003254413604736, 1.4690823554992676, 1.4378396272659302, 1.4065971374511719, 1.3753551244735718, 1.3441133499145508, 1.3128719329833984, 1.2816309928894043, 1.2503905296325684, 1.2191505432128906, 1.1879111528396606, 1.1566722393035889, 1.1254339218139648, 1.0941963195800781, 1.0629594326019287, 1.0317233800888062, 1.0004881620407104, 0.9692538976669312, 0.9380207061767578, 0.9067886471748352, 0.8755578398704529, 0.8443285226821899, 0.8131007552146912, 0.7818747758865356, 0.7506507635116577, 0.7194290161132812, 0.6882098317146301, 0.6569936275482178, 0.6257807612419128, 0.5945718288421631, 0.5633673667907715, 0.5321683287620544, 0.5009756088256836, 0.469790518283844, 0.4386146366596222, 0.4074501395225525, 0.37629982829093933, 0.34516751766204834, 0.3140586018562317, 0.2829807996749878, 0.2519455552101135, 0.22097086906433105, 0.19008633494377136, 0.1593443602323532, 0.12884704768657684, 0.09882117807865143, 0.06987712532281876, 0.04419417306780815, };
# 6 "cordiccart2pol.cpp" 2


__attribute__((sdx_kernel("cordiccart2pol", 0))) void cordiccart2pol(data_t x, data_t y, data_t * r, data_t * theta)
{
#line 9 "/home/linux/ieng6/students/769/zeh003/Desktop/CSE-237C-Starter/project_files/project2/cordic/HLS/cordic_LUT/cordiccart2pol.tcl"
#pragma HLSDIRECTIVE TOP name=cordiccart2pol
# 9 "cordiccart2pol.cpp"


    ap_fixed<7, 2, AP_RND, AP_WRAP, 1> fixed_x = x;
    ap_fixed<7, 2, AP_RND, AP_WRAP, 1> fixed_y = y;


    ap_uint<2*7> index;


    VITIS_LOOP_18_1: for(int i = 0; i < 7; i++)
    {
#pragma HLS UNROLL
 index[2*7 -1-i] = fixed_x[7 -1-i];
        index[7 -1-i] = fixed_y[7 -1-i];
    }


    *r = my_LUT_r[index];
    *theta = my_LUT_th[index];
}
