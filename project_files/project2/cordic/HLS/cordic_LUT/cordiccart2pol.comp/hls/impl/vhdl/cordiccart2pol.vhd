-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cordiccart2pol is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (3 downto 0);
    y : IN STD_LOGIC_VECTOR (3 downto 0);
    r : OUT STD_LOGIC_VECTOR (3 downto 0);
    r_ap_vld : OUT STD_LOGIC;
    theta : OUT STD_LOGIC_VECTOR (3 downto 0);
    theta_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cordiccart2pol is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cordiccart2pol_cordiccart2pol,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.256000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=5,HLS_SYN_LUT=54,HLS_VERSION=2024_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal my_LUT_r_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal my_LUT_r_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal my_LUT_th_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal my_LUT_th_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal my_LUT_r_ce0_local : STD_LOGIC;
    signal my_LUT_th_ce0_local : STD_LOGIC;
    signal tmp_fu_103_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_117_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln11_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_fu_131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln11_fu_149_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln11_1_fu_137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_fu_143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln11_1_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fixed_x_1_fu_153_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal fixed_x_fu_111_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_177_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_191_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln12_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln12_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln12_fu_223_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln12_1_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln12_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln12_1_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fixed_y_1_fu_227_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal fixed_y_fu_185_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal fixed_x_2_fu_169_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal fixed_y_2_fu_243_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal index_fu_251_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cordiccart2pol_my_LUT_r_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component cordiccart2pol_my_LUT_th_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    my_LUT_r_U : component cordiccart2pol_my_LUT_r_ROM_AUTO_1R
    generic map (
        DataWidth => 3,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => my_LUT_r_address0,
        ce0 => my_LUT_r_ce0_local,
        q0 => my_LUT_r_q0);

    my_LUT_th_U : component cordiccart2pol_my_LUT_th_ROM_AUTO_1R
    generic map (
        DataWidth => 4,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => my_LUT_th_address0,
        ce0 => my_LUT_th_ce0_local,
        q0 => my_LUT_th_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    and_ln11_1_fu_137_p2 <= (tmp_fu_103_p3 and tmp_1_fu_117_p3);
    and_ln11_fu_131_p2 <= (xor_ln11_fu_125_p2 and tmp_1_fu_117_p3);
    and_ln12_1_fu_211_p2 <= (tmp_3_fu_191_p3 and tmp_2_fu_177_p3);
    and_ln12_fu_205_p2 <= (xor_ln12_fu_199_p2 and tmp_3_fu_191_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    fixed_x_1_fu_153_p4 <= ((tmp_fu_103_p3 & trunc_ln11_fu_149_p1) & ap_const_lv1_0);
    fixed_x_2_fu_169_p3 <= 
        fixed_x_1_fu_153_p4 when (xor_ln11_1_fu_163_p2(0) = '1') else 
        fixed_x_fu_111_p2;
    fixed_x_fu_111_p2 <= std_logic_vector(shift_left(unsigned(x),to_integer(unsigned('0' & ap_const_lv4_1(4-1 downto 0)))));
    fixed_y_1_fu_227_p4 <= ((tmp_2_fu_177_p3 & trunc_ln12_fu_223_p1) & ap_const_lv1_0);
    fixed_y_2_fu_243_p3 <= 
        fixed_y_1_fu_227_p4 when (xor_ln12_1_fu_237_p2(0) = '1') else 
        fixed_y_fu_185_p2;
    fixed_y_fu_185_p2 <= std_logic_vector(shift_left(unsigned(y),to_integer(unsigned('0' & ap_const_lv4_1(4-1 downto 0)))));
    index_fu_251_p3 <= (fixed_x_2_fu_169_p3 & fixed_y_2_fu_243_p3);
    my_LUT_r_address0 <= zext_ln26_fu_259_p1(8 - 1 downto 0);

    my_LUT_r_ce0_local_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            my_LUT_r_ce0_local <= ap_const_logic_1;
        else 
            my_LUT_r_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    my_LUT_th_address0 <= zext_ln26_fu_259_p1(8 - 1 downto 0);

    my_LUT_th_ce0_local_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            my_LUT_th_ce0_local <= ap_const_logic_1;
        else 
            my_LUT_th_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    or_ln11_fu_143_p2 <= (tmp_fu_103_p3 or and_ln11_fu_131_p2);
    or_ln12_fu_217_p2 <= (tmp_2_fu_177_p3 or and_ln12_fu_205_p2);
    r <= std_logic_vector(IEEE.numeric_std.resize(unsigned(my_LUT_r_q0),4));

    r_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            r_ap_vld <= ap_const_logic_1;
        else 
            r_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    theta <= my_LUT_th_q0;

    theta_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            theta_ap_vld <= ap_const_logic_1;
        else 
            theta_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_117_p3 <= x(2 downto 2);
    tmp_2_fu_177_p3 <= y(3 downto 3);
    tmp_3_fu_191_p3 <= y(2 downto 2);
    tmp_fu_103_p3 <= x(3 downto 3);
    trunc_ln11_fu_149_p1 <= x(2 - 1 downto 0);
    trunc_ln12_fu_223_p1 <= y(2 - 1 downto 0);
    xor_ln11_1_fu_163_p2 <= (or_ln11_fu_143_p2 xor and_ln11_1_fu_137_p2);
    xor_ln11_fu_125_p2 <= (tmp_fu_103_p3 xor ap_const_lv1_1);
    xor_ln12_1_fu_237_p2 <= (or_ln12_fu_217_p2 xor and_ln12_1_fu_211_p2);
    xor_ln12_fu_199_p2 <= (tmp_2_fu_177_p3 xor ap_const_lv1_1);
    zext_ln26_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_fu_251_p3),64));
end behav;
